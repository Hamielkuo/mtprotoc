// Code generated by protoc-gen-go. DO NOT EDIT.
// source: schema.tl.sync_service.proto

package mtproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// /////////////////////////////////////////////////////////////////////////////
// invokeAfterMsg#cb9f372d {X:Type} msg_id:long query:!X = X;
type TLInvokeAfterMsg struct {
	MsgId int64  `protobuf:"varint,1,opt,name=msg_id,json=msgId" json:"msg_id,omitempty"`
	Query []byte `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *TLInvokeAfterMsg) Reset()                    { *m = TLInvokeAfterMsg{} }
func (m *TLInvokeAfterMsg) String() string            { return proto.CompactTextString(m) }
func (*TLInvokeAfterMsg) ProtoMessage()               {}
func (*TLInvokeAfterMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *TLInvokeAfterMsg) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *TLInvokeAfterMsg) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// invokeAfterMsgs#3dc4b4f0 {X:Type} msg_ids:Vector<long> query:!X = X;
type TLInvokeAfterMsgs struct {
	MsgIds []int64 `protobuf:"varint,1,rep,packed,name=msg_ids,json=msgIds" json:"msg_ids,omitempty"`
	Query  []byte  `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *TLInvokeAfterMsgs) Reset()                    { *m = TLInvokeAfterMsgs{} }
func (m *TLInvokeAfterMsgs) String() string            { return proto.CompactTextString(m) }
func (*TLInvokeAfterMsgs) ProtoMessage()               {}
func (*TLInvokeAfterMsgs) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *TLInvokeAfterMsgs) GetMsgIds() []int64 {
	if m != nil {
		return m.MsgIds
	}
	return nil
}

func (m *TLInvokeAfterMsgs) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// initConnection#c7481da6 {X:Type} api_id:int device_model:string system_version:string app_version:string system_lang_code:string lang_pack:string lang_code:string query:!X = X;
type TLInitConnection struct {
	ApiId          int32  `protobuf:"varint,1,opt,name=api_id,json=apiId" json:"api_id,omitempty"`
	DeviceModel    string `protobuf:"bytes,2,opt,name=device_model,json=deviceModel" json:"device_model,omitempty"`
	SystemVersion  string `protobuf:"bytes,3,opt,name=system_version,json=systemVersion" json:"system_version,omitempty"`
	AppVersion     string `protobuf:"bytes,4,opt,name=app_version,json=appVersion" json:"app_version,omitempty"`
	SystemLangCode string `protobuf:"bytes,5,opt,name=system_lang_code,json=systemLangCode" json:"system_lang_code,omitempty"`
	LangPack       string `protobuf:"bytes,6,opt,name=lang_pack,json=langPack" json:"lang_pack,omitempty"`
	LangCode       string `protobuf:"bytes,7,opt,name=lang_code,json=langCode" json:"lang_code,omitempty"`
	Query          []byte `protobuf:"bytes,8,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *TLInitConnection) Reset()                    { *m = TLInitConnection{} }
func (m *TLInitConnection) String() string            { return proto.CompactTextString(m) }
func (*TLInitConnection) ProtoMessage()               {}
func (*TLInitConnection) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *TLInitConnection) GetApiId() int32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

func (m *TLInitConnection) GetDeviceModel() string {
	if m != nil {
		return m.DeviceModel
	}
	return ""
}

func (m *TLInitConnection) GetSystemVersion() string {
	if m != nil {
		return m.SystemVersion
	}
	return ""
}

func (m *TLInitConnection) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *TLInitConnection) GetSystemLangCode() string {
	if m != nil {
		return m.SystemLangCode
	}
	return ""
}

func (m *TLInitConnection) GetLangPack() string {
	if m != nil {
		return m.LangPack
	}
	return ""
}

func (m *TLInitConnection) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

func (m *TLInitConnection) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// invokeWithLayer#da9b0d0d {X:Type} layer:int query:!X = X;
type TLInvokeWithLayer struct {
	Layer int32  `protobuf:"varint,1,opt,name=layer" json:"layer,omitempty"`
	Query []byte `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *TLInvokeWithLayer) Reset()                    { *m = TLInvokeWithLayer{} }
func (m *TLInvokeWithLayer) String() string            { return proto.CompactTextString(m) }
func (*TLInvokeWithLayer) ProtoMessage()               {}
func (*TLInvokeWithLayer) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *TLInvokeWithLayer) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *TLInvokeWithLayer) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// invokeWithoutUpdates#bf9459b7 {X:Type} query:!X = X;
type TLInvokeWithoutUpdates struct {
	Query []byte `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *TLInvokeWithoutUpdates) Reset()                    { *m = TLInvokeWithoutUpdates{} }
func (m *TLInvokeWithoutUpdates) String() string            { return proto.CompactTextString(m) }
func (*TLInvokeWithoutUpdates) ProtoMessage()               {}
func (*TLInvokeWithoutUpdates) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *TLInvokeWithoutUpdates) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// auth.checkPhone#6fe51dfb phone_number:string = auth.CheckedPhone;
type TLAuthCheckPhone struct {
	PhoneNumber string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
}

func (m *TLAuthCheckPhone) Reset()                    { *m = TLAuthCheckPhone{} }
func (m *TLAuthCheckPhone) String() string            { return proto.CompactTextString(m) }
func (*TLAuthCheckPhone) ProtoMessage()               {}
func (*TLAuthCheckPhone) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *TLAuthCheckPhone) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// auth.sendCode#86aef0ec flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool api_id:int api_hash:string = auth.SentCode;
type TLAuthSendCode struct {
	AllowFlashcall bool   `protobuf:"varint,2,opt,name=allow_flashcall,json=allowFlashcall" json:"allow_flashcall,omitempty"`
	PhoneNumber    string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
	CurrentNumber  *Bool  `protobuf:"bytes,4,opt,name=current_number,json=currentNumber" json:"current_number,omitempty"`
	ApiId          int32  `protobuf:"varint,5,opt,name=api_id,json=apiId" json:"api_id,omitempty"`
	ApiHash        string `protobuf:"bytes,6,opt,name=api_hash,json=apiHash" json:"api_hash,omitempty"`
}

func (m *TLAuthSendCode) Reset()                    { *m = TLAuthSendCode{} }
func (m *TLAuthSendCode) String() string            { return proto.CompactTextString(m) }
func (*TLAuthSendCode) ProtoMessage()               {}
func (*TLAuthSendCode) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *TLAuthSendCode) GetAllowFlashcall() bool {
	if m != nil {
		return m.AllowFlashcall
	}
	return false
}

func (m *TLAuthSendCode) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TLAuthSendCode) GetCurrentNumber() *Bool {
	if m != nil {
		return m.CurrentNumber
	}
	return nil
}

func (m *TLAuthSendCode) GetApiId() int32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

func (m *TLAuthSendCode) GetApiHash() string {
	if m != nil {
		return m.ApiHash
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// auth.signUp#1b067634 phone_number:string phone_code_hash:string phone_code:string first_name:string last_name:string = auth.Authorization;
type TLAuthSignUp struct {
	PhoneNumber   string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
	PhoneCodeHash string `protobuf:"bytes,2,opt,name=phone_code_hash,json=phoneCodeHash" json:"phone_code_hash,omitempty"`
	PhoneCode     string `protobuf:"bytes,3,opt,name=phone_code,json=phoneCode" json:"phone_code,omitempty"`
	FirstName     string `protobuf:"bytes,4,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName      string `protobuf:"bytes,5,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
}

func (m *TLAuthSignUp) Reset()                    { *m = TLAuthSignUp{} }
func (m *TLAuthSignUp) String() string            { return proto.CompactTextString(m) }
func (*TLAuthSignUp) ProtoMessage()               {}
func (*TLAuthSignUp) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *TLAuthSignUp) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TLAuthSignUp) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *TLAuthSignUp) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

func (m *TLAuthSignUp) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *TLAuthSignUp) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// auth.signIn#bcd51581 phone_number:string phone_code_hash:string phone_code:string = auth.Authorization;
type TLAuthSignIn struct {
	PhoneNumber   string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
	PhoneCodeHash string `protobuf:"bytes,2,opt,name=phone_code_hash,json=phoneCodeHash" json:"phone_code_hash,omitempty"`
	PhoneCode     string `protobuf:"bytes,3,opt,name=phone_code,json=phoneCode" json:"phone_code,omitempty"`
}

func (m *TLAuthSignIn) Reset()                    { *m = TLAuthSignIn{} }
func (m *TLAuthSignIn) String() string            { return proto.CompactTextString(m) }
func (*TLAuthSignIn) ProtoMessage()               {}
func (*TLAuthSignIn) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *TLAuthSignIn) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TLAuthSignIn) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *TLAuthSignIn) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// auth.logOut#5717da40 = Bool;
type TLAuthLogOut struct {
}

func (m *TLAuthLogOut) Reset()                    { *m = TLAuthLogOut{} }
func (m *TLAuthLogOut) String() string            { return proto.CompactTextString(m) }
func (*TLAuthLogOut) ProtoMessage()               {}
func (*TLAuthLogOut) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

// /////////////////////////////////////////////////////////////////////////////
// auth.resetAuthorizations#9fab0d1a = Bool;
type TLAuthResetAuthorizations struct {
}

func (m *TLAuthResetAuthorizations) Reset()                    { *m = TLAuthResetAuthorizations{} }
func (m *TLAuthResetAuthorizations) String() string            { return proto.CompactTextString(m) }
func (*TLAuthResetAuthorizations) ProtoMessage()               {}
func (*TLAuthResetAuthorizations) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

// /////////////////////////////////////////////////////////////////////////////
// auth.sendInvites#771c1d97 phone_numbers:Vector<string> message:string = Bool;
type TLAuthSendInvites struct {
	PhoneNumbers []string `protobuf:"bytes,1,rep,name=phone_numbers,json=phoneNumbers" json:"phone_numbers,omitempty"`
	Message      string   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *TLAuthSendInvites) Reset()                    { *m = TLAuthSendInvites{} }
func (m *TLAuthSendInvites) String() string            { return proto.CompactTextString(m) }
func (*TLAuthSendInvites) ProtoMessage()               {}
func (*TLAuthSendInvites) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *TLAuthSendInvites) GetPhoneNumbers() []string {
	if m != nil {
		return m.PhoneNumbers
	}
	return nil
}

func (m *TLAuthSendInvites) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// auth.exportAuthorization#e5bfffcd dc_id:int = auth.ExportedAuthorization;
type TLAuthExportAuthorization struct {
	DcId int32 `protobuf:"varint,1,opt,name=dc_id,json=dcId" json:"dc_id,omitempty"`
}

func (m *TLAuthExportAuthorization) Reset()                    { *m = TLAuthExportAuthorization{} }
func (m *TLAuthExportAuthorization) String() string            { return proto.CompactTextString(m) }
func (*TLAuthExportAuthorization) ProtoMessage()               {}
func (*TLAuthExportAuthorization) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *TLAuthExportAuthorization) GetDcId() int32 {
	if m != nil {
		return m.DcId
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// auth.importAuthorization#e3ef9613 id:int bytes:bytes = auth.Authorization;
type TLAuthImportAuthorization struct {
	Id    int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Bytes []byte `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *TLAuthImportAuthorization) Reset()                    { *m = TLAuthImportAuthorization{} }
func (m *TLAuthImportAuthorization) String() string            { return proto.CompactTextString(m) }
func (*TLAuthImportAuthorization) ProtoMessage()               {}
func (*TLAuthImportAuthorization) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *TLAuthImportAuthorization) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TLAuthImportAuthorization) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// auth.bindTempAuthKey#cdd42a05 perm_auth_key_id:long nonce:long expires_at:int encrypted_message:bytes = Bool;
type TLAuthBindTempAuthKey struct {
	PermAuthKeyId    int64  `protobuf:"varint,1,opt,name=perm_auth_key_id,json=permAuthKeyId" json:"perm_auth_key_id,omitempty"`
	Nonce            int64  `protobuf:"varint,2,opt,name=nonce" json:"nonce,omitempty"`
	ExpiresAt        int32  `protobuf:"varint,3,opt,name=expires_at,json=expiresAt" json:"expires_at,omitempty"`
	EncryptedMessage []byte `protobuf:"bytes,4,opt,name=encrypted_message,json=encryptedMessage,proto3" json:"encrypted_message,omitempty"`
}

func (m *TLAuthBindTempAuthKey) Reset()                    { *m = TLAuthBindTempAuthKey{} }
func (m *TLAuthBindTempAuthKey) String() string            { return proto.CompactTextString(m) }
func (*TLAuthBindTempAuthKey) ProtoMessage()               {}
func (*TLAuthBindTempAuthKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *TLAuthBindTempAuthKey) GetPermAuthKeyId() int64 {
	if m != nil {
		return m.PermAuthKeyId
	}
	return 0
}

func (m *TLAuthBindTempAuthKey) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TLAuthBindTempAuthKey) GetExpiresAt() int32 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *TLAuthBindTempAuthKey) GetEncryptedMessage() []byte {
	if m != nil {
		return m.EncryptedMessage
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// auth.importBotAuthorization#67a3ff2c flags:int api_id:int api_hash:string bot_auth_token:string = auth.Authorization;
type TLAuthImportBotAuthorization struct {
	Flags        int32  `protobuf:"varint,1,opt,name=flags" json:"flags,omitempty"`
	ApiId        int32  `protobuf:"varint,2,opt,name=api_id,json=apiId" json:"api_id,omitempty"`
	ApiHash      string `protobuf:"bytes,3,opt,name=api_hash,json=apiHash" json:"api_hash,omitempty"`
	BotAuthToken string `protobuf:"bytes,4,opt,name=bot_auth_token,json=botAuthToken" json:"bot_auth_token,omitempty"`
}

func (m *TLAuthImportBotAuthorization) Reset()                    { *m = TLAuthImportBotAuthorization{} }
func (m *TLAuthImportBotAuthorization) String() string            { return proto.CompactTextString(m) }
func (*TLAuthImportBotAuthorization) ProtoMessage()               {}
func (*TLAuthImportBotAuthorization) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *TLAuthImportBotAuthorization) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *TLAuthImportBotAuthorization) GetApiId() int32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

func (m *TLAuthImportBotAuthorization) GetApiHash() string {
	if m != nil {
		return m.ApiHash
	}
	return ""
}

func (m *TLAuthImportBotAuthorization) GetBotAuthToken() string {
	if m != nil {
		return m.BotAuthToken
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// auth.checkPassword#a63011e password_hash:bytes = auth.Authorization;
type TLAuthCheckPassword struct {
	PasswordHash []byte `protobuf:"bytes,1,opt,name=password_hash,json=passwordHash,proto3" json:"password_hash,omitempty"`
}

func (m *TLAuthCheckPassword) Reset()                    { *m = TLAuthCheckPassword{} }
func (m *TLAuthCheckPassword) String() string            { return proto.CompactTextString(m) }
func (*TLAuthCheckPassword) ProtoMessage()               {}
func (*TLAuthCheckPassword) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{16} }

func (m *TLAuthCheckPassword) GetPasswordHash() []byte {
	if m != nil {
		return m.PasswordHash
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// auth.requestPasswordRecovery#d897bc66 = auth.PasswordRecovery;
type TLAuthRequestPasswordRecovery struct {
}

func (m *TLAuthRequestPasswordRecovery) Reset()                    { *m = TLAuthRequestPasswordRecovery{} }
func (m *TLAuthRequestPasswordRecovery) String() string            { return proto.CompactTextString(m) }
func (*TLAuthRequestPasswordRecovery) ProtoMessage()               {}
func (*TLAuthRequestPasswordRecovery) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{17} }

// /////////////////////////////////////////////////////////////////////////////
// auth.recoverPassword#4ea56e92 code:string = auth.Authorization;
type TLAuthRecoverPassword struct {
	Code string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
}

func (m *TLAuthRecoverPassword) Reset()                    { *m = TLAuthRecoverPassword{} }
func (m *TLAuthRecoverPassword) String() string            { return proto.CompactTextString(m) }
func (*TLAuthRecoverPassword) ProtoMessage()               {}
func (*TLAuthRecoverPassword) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{18} }

func (m *TLAuthRecoverPassword) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// auth.resendCode#3ef1a9bf phone_number:string phone_code_hash:string = auth.SentCode;
type TLAuthResendCode struct {
	PhoneNumber   string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
	PhoneCodeHash string `protobuf:"bytes,2,opt,name=phone_code_hash,json=phoneCodeHash" json:"phone_code_hash,omitempty"`
}

func (m *TLAuthResendCode) Reset()                    { *m = TLAuthResendCode{} }
func (m *TLAuthResendCode) String() string            { return proto.CompactTextString(m) }
func (*TLAuthResendCode) ProtoMessage()               {}
func (*TLAuthResendCode) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{19} }

func (m *TLAuthResendCode) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TLAuthResendCode) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// auth.cancelCode#1f040578 phone_number:string phone_code_hash:string = Bool;
type TLAuthCancelCode struct {
	PhoneNumber   string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
	PhoneCodeHash string `protobuf:"bytes,2,opt,name=phone_code_hash,json=phoneCodeHash" json:"phone_code_hash,omitempty"`
}

func (m *TLAuthCancelCode) Reset()                    { *m = TLAuthCancelCode{} }
func (m *TLAuthCancelCode) String() string            { return proto.CompactTextString(m) }
func (*TLAuthCancelCode) ProtoMessage()               {}
func (*TLAuthCancelCode) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{20} }

func (m *TLAuthCancelCode) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TLAuthCancelCode) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// auth.dropTempAuthKeys#8e48a188 except_auth_keys:Vector<long> = Bool;
type TLAuthDropTempAuthKeys struct {
	ExceptAuthKeys []int64 `protobuf:"varint,1,rep,packed,name=except_auth_keys,json=exceptAuthKeys" json:"except_auth_keys,omitempty"`
}

func (m *TLAuthDropTempAuthKeys) Reset()                    { *m = TLAuthDropTempAuthKeys{} }
func (m *TLAuthDropTempAuthKeys) String() string            { return proto.CompactTextString(m) }
func (*TLAuthDropTempAuthKeys) ProtoMessage()               {}
func (*TLAuthDropTempAuthKeys) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{21} }

func (m *TLAuthDropTempAuthKeys) GetExceptAuthKeys() []int64 {
	if m != nil {
		return m.ExceptAuthKeys
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// account.registerDevice#637ea878 token_type:int token:string = Bool;
type TLAccountRegisterDevice struct {
	TokenType int32  `protobuf:"varint,1,opt,name=token_type,json=tokenType" json:"token_type,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *TLAccountRegisterDevice) Reset()                    { *m = TLAccountRegisterDevice{} }
func (m *TLAccountRegisterDevice) String() string            { return proto.CompactTextString(m) }
func (*TLAccountRegisterDevice) ProtoMessage()               {}
func (*TLAccountRegisterDevice) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{22} }

func (m *TLAccountRegisterDevice) GetTokenType() int32 {
	if m != nil {
		return m.TokenType
	}
	return 0
}

func (m *TLAccountRegisterDevice) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// account.unregisterDevice#65c55b40 token_type:int token:string = Bool;
type TLAccountUnregisterDevice struct {
	TokenType int32  `protobuf:"varint,1,opt,name=token_type,json=tokenType" json:"token_type,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *TLAccountUnregisterDevice) Reset()                    { *m = TLAccountUnregisterDevice{} }
func (m *TLAccountUnregisterDevice) String() string            { return proto.CompactTextString(m) }
func (*TLAccountUnregisterDevice) ProtoMessage()               {}
func (*TLAccountUnregisterDevice) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{23} }

func (m *TLAccountUnregisterDevice) GetTokenType() int32 {
	if m != nil {
		return m.TokenType
	}
	return 0
}

func (m *TLAccountUnregisterDevice) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// account.updateNotifySettings#84be5b93 peer:InputNotifyPeer settings:InputPeerNotifySettings = Bool;
type TLAccountUpdateNotifySettings struct {
	Peer     *InputNotifyPeer         `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Settings *InputPeerNotifySettings `protobuf:"bytes,2,opt,name=settings" json:"settings,omitempty"`
}

func (m *TLAccountUpdateNotifySettings) Reset()                    { *m = TLAccountUpdateNotifySettings{} }
func (m *TLAccountUpdateNotifySettings) String() string            { return proto.CompactTextString(m) }
func (*TLAccountUpdateNotifySettings) ProtoMessage()               {}
func (*TLAccountUpdateNotifySettings) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{24} }

func (m *TLAccountUpdateNotifySettings) GetPeer() *InputNotifyPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLAccountUpdateNotifySettings) GetSettings() *InputPeerNotifySettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// account.getNotifySettings#12b3ad31 peer:InputNotifyPeer = PeerNotifySettings;
type TLAccountGetNotifySettings struct {
	Peer *InputNotifyPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *TLAccountGetNotifySettings) Reset()                    { *m = TLAccountGetNotifySettings{} }
func (m *TLAccountGetNotifySettings) String() string            { return proto.CompactTextString(m) }
func (*TLAccountGetNotifySettings) ProtoMessage()               {}
func (*TLAccountGetNotifySettings) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{25} }

func (m *TLAccountGetNotifySettings) GetPeer() *InputNotifyPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// account.resetNotifySettings#db7e1747 = Bool;
type TLAccountResetNotifySettings struct {
}

func (m *TLAccountResetNotifySettings) Reset()                    { *m = TLAccountResetNotifySettings{} }
func (m *TLAccountResetNotifySettings) String() string            { return proto.CompactTextString(m) }
func (*TLAccountResetNotifySettings) ProtoMessage()               {}
func (*TLAccountResetNotifySettings) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{26} }

// /////////////////////////////////////////////////////////////////////////////
// account.updateProfile#78515775 flags:# first_name:flags.0?string last_name:flags.1?string about:flags.2?string = User;
type TLAccountUpdateProfile struct {
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	About     string `protobuf:"bytes,4,opt,name=about" json:"about,omitempty"`
}

func (m *TLAccountUpdateProfile) Reset()                    { *m = TLAccountUpdateProfile{} }
func (m *TLAccountUpdateProfile) String() string            { return proto.CompactTextString(m) }
func (*TLAccountUpdateProfile) ProtoMessage()               {}
func (*TLAccountUpdateProfile) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{27} }

func (m *TLAccountUpdateProfile) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *TLAccountUpdateProfile) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *TLAccountUpdateProfile) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// account.updateStatus#6628562c offline:Bool = Bool;
type TLAccountUpdateStatus struct {
	Offline *Bool `protobuf:"bytes,1,opt,name=offline" json:"offline,omitempty"`
}

func (m *TLAccountUpdateStatus) Reset()                    { *m = TLAccountUpdateStatus{} }
func (m *TLAccountUpdateStatus) String() string            { return proto.CompactTextString(m) }
func (*TLAccountUpdateStatus) ProtoMessage()               {}
func (*TLAccountUpdateStatus) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{28} }

func (m *TLAccountUpdateStatus) GetOffline() *Bool {
	if m != nil {
		return m.Offline
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// account.getWallPapers#c04cfac2 = Vector<WallPaper>;
type TLAccountGetWallPapers struct {
}

func (m *TLAccountGetWallPapers) Reset()                    { *m = TLAccountGetWallPapers{} }
func (m *TLAccountGetWallPapers) String() string            { return proto.CompactTextString(m) }
func (*TLAccountGetWallPapers) ProtoMessage()               {}
func (*TLAccountGetWallPapers) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{29} }

// /////////////////////////////////////////////////////////////////////////////
// account.reportPeer#ae189d5f peer:InputPeer reason:ReportReason = Bool;
type TLAccountReportPeer struct {
	Peer   *InputPeer    `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Reason *ReportReason `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
}

func (m *TLAccountReportPeer) Reset()                    { *m = TLAccountReportPeer{} }
func (m *TLAccountReportPeer) String() string            { return proto.CompactTextString(m) }
func (*TLAccountReportPeer) ProtoMessage()               {}
func (*TLAccountReportPeer) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{30} }

func (m *TLAccountReportPeer) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLAccountReportPeer) GetReason() *ReportReason {
	if m != nil {
		return m.Reason
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// account.checkUsername#2714d86c username:string = Bool;
type TLAccountCheckUsername struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *TLAccountCheckUsername) Reset()                    { *m = TLAccountCheckUsername{} }
func (m *TLAccountCheckUsername) String() string            { return proto.CompactTextString(m) }
func (*TLAccountCheckUsername) ProtoMessage()               {}
func (*TLAccountCheckUsername) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{31} }

func (m *TLAccountCheckUsername) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// account.updateUsername#3e0bdd7c username:string = User;
type TLAccountUpdateUsername struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *TLAccountUpdateUsername) Reset()                    { *m = TLAccountUpdateUsername{} }
func (m *TLAccountUpdateUsername) String() string            { return proto.CompactTextString(m) }
func (*TLAccountUpdateUsername) ProtoMessage()               {}
func (*TLAccountUpdateUsername) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{32} }

func (m *TLAccountUpdateUsername) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// account.getPrivacy#dadbc950 key:InputPrivacyKey = account.PrivacyRules;
type TLAccountGetPrivacy struct {
	Key *InputPrivacyKey `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *TLAccountGetPrivacy) Reset()                    { *m = TLAccountGetPrivacy{} }
func (m *TLAccountGetPrivacy) String() string            { return proto.CompactTextString(m) }
func (*TLAccountGetPrivacy) ProtoMessage()               {}
func (*TLAccountGetPrivacy) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{33} }

func (m *TLAccountGetPrivacy) GetKey() *InputPrivacyKey {
	if m != nil {
		return m.Key
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// account.setPrivacy#c9f81ce8 key:InputPrivacyKey rules:Vector<InputPrivacyRule> = account.PrivacyRules;
type TLAccountSetPrivacy struct {
	Key   *InputPrivacyKey    `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Rules []*InputPrivacyRule `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
}

func (m *TLAccountSetPrivacy) Reset()                    { *m = TLAccountSetPrivacy{} }
func (m *TLAccountSetPrivacy) String() string            { return proto.CompactTextString(m) }
func (*TLAccountSetPrivacy) ProtoMessage()               {}
func (*TLAccountSetPrivacy) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{34} }

func (m *TLAccountSetPrivacy) GetKey() *InputPrivacyKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *TLAccountSetPrivacy) GetRules() []*InputPrivacyRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// account.deleteAccount#418d4e0b reason:string = Bool;
type TLAccountDeleteAccount struct {
	Reason string `protobuf:"bytes,1,opt,name=reason" json:"reason,omitempty"`
}

func (m *TLAccountDeleteAccount) Reset()                    { *m = TLAccountDeleteAccount{} }
func (m *TLAccountDeleteAccount) String() string            { return proto.CompactTextString(m) }
func (*TLAccountDeleteAccount) ProtoMessage()               {}
func (*TLAccountDeleteAccount) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{35} }

func (m *TLAccountDeleteAccount) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// account.getAccountTTL#8fc711d = AccountDaysTTL;
type TLAccountGetAccountTTL struct {
}

func (m *TLAccountGetAccountTTL) Reset()                    { *m = TLAccountGetAccountTTL{} }
func (m *TLAccountGetAccountTTL) String() string            { return proto.CompactTextString(m) }
func (*TLAccountGetAccountTTL) ProtoMessage()               {}
func (*TLAccountGetAccountTTL) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{36} }

// /////////////////////////////////////////////////////////////////////////////
// account.setAccountTTL#2442485e ttl:AccountDaysTTL = Bool;
type TLAccountSetAccountTTL struct {
	Ttl *AccountDaysTTL `protobuf:"bytes,1,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *TLAccountSetAccountTTL) Reset()                    { *m = TLAccountSetAccountTTL{} }
func (m *TLAccountSetAccountTTL) String() string            { return proto.CompactTextString(m) }
func (*TLAccountSetAccountTTL) ProtoMessage()               {}
func (*TLAccountSetAccountTTL) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{37} }

func (m *TLAccountSetAccountTTL) GetTtl() *AccountDaysTTL {
	if m != nil {
		return m.Ttl
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// account.sendChangePhoneCode#8e57deb flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool = auth.SentCode;
type TLAccountSendChangePhoneCode struct {
	AllowFlashcall bool   `protobuf:"varint,2,opt,name=allow_flashcall,json=allowFlashcall" json:"allow_flashcall,omitempty"`
	PhoneNumber    string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
	CurrentNumber  *Bool  `protobuf:"bytes,4,opt,name=current_number,json=currentNumber" json:"current_number,omitempty"`
}

func (m *TLAccountSendChangePhoneCode) Reset()                    { *m = TLAccountSendChangePhoneCode{} }
func (m *TLAccountSendChangePhoneCode) String() string            { return proto.CompactTextString(m) }
func (*TLAccountSendChangePhoneCode) ProtoMessage()               {}
func (*TLAccountSendChangePhoneCode) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{38} }

func (m *TLAccountSendChangePhoneCode) GetAllowFlashcall() bool {
	if m != nil {
		return m.AllowFlashcall
	}
	return false
}

func (m *TLAccountSendChangePhoneCode) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TLAccountSendChangePhoneCode) GetCurrentNumber() *Bool {
	if m != nil {
		return m.CurrentNumber
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// account.changePhone#70c32edb phone_number:string phone_code_hash:string phone_code:string = User;
type TLAccountChangePhone struct {
	PhoneNumber   string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
	PhoneCodeHash string `protobuf:"bytes,2,opt,name=phone_code_hash,json=phoneCodeHash" json:"phone_code_hash,omitempty"`
	PhoneCode     string `protobuf:"bytes,3,opt,name=phone_code,json=phoneCode" json:"phone_code,omitempty"`
}

func (m *TLAccountChangePhone) Reset()                    { *m = TLAccountChangePhone{} }
func (m *TLAccountChangePhone) String() string            { return proto.CompactTextString(m) }
func (*TLAccountChangePhone) ProtoMessage()               {}
func (*TLAccountChangePhone) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{39} }

func (m *TLAccountChangePhone) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TLAccountChangePhone) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *TLAccountChangePhone) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// account.updateDeviceLocked#38df3532 period:int = Bool;
type TLAccountUpdateDeviceLocked struct {
	Period int32 `protobuf:"varint,1,opt,name=period" json:"period,omitempty"`
}

func (m *TLAccountUpdateDeviceLocked) Reset()                    { *m = TLAccountUpdateDeviceLocked{} }
func (m *TLAccountUpdateDeviceLocked) String() string            { return proto.CompactTextString(m) }
func (*TLAccountUpdateDeviceLocked) ProtoMessage()               {}
func (*TLAccountUpdateDeviceLocked) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{40} }

func (m *TLAccountUpdateDeviceLocked) GetPeriod() int32 {
	if m != nil {
		return m.Period
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// account.getAuthorizations#e320c158 = account.Authorizations;
type TLAccountGetAuthorizations struct {
}

func (m *TLAccountGetAuthorizations) Reset()                    { *m = TLAccountGetAuthorizations{} }
func (m *TLAccountGetAuthorizations) String() string            { return proto.CompactTextString(m) }
func (*TLAccountGetAuthorizations) ProtoMessage()               {}
func (*TLAccountGetAuthorizations) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{41} }

// /////////////////////////////////////////////////////////////////////////////
// account.resetAuthorization#df77f3bc hash:long = Bool;
type TLAccountResetAuthorization struct {
	Hash int64 `protobuf:"varint,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *TLAccountResetAuthorization) Reset()                    { *m = TLAccountResetAuthorization{} }
func (m *TLAccountResetAuthorization) String() string            { return proto.CompactTextString(m) }
func (*TLAccountResetAuthorization) ProtoMessage()               {}
func (*TLAccountResetAuthorization) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{42} }

func (m *TLAccountResetAuthorization) GetHash() int64 {
	if m != nil {
		return m.Hash
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// account.getPassword#548a30f5 = account.Password;
type TLAccountGetPassword struct {
}

func (m *TLAccountGetPassword) Reset()                    { *m = TLAccountGetPassword{} }
func (m *TLAccountGetPassword) String() string            { return proto.CompactTextString(m) }
func (*TLAccountGetPassword) ProtoMessage()               {}
func (*TLAccountGetPassword) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{43} }

// /////////////////////////////////////////////////////////////////////////////
// account.getPasswordSettings#bc8d11bb current_password_hash:bytes = account.PasswordSettings;
type TLAccountGetPasswordSettings struct {
	CurrentPasswordHash []byte `protobuf:"bytes,1,opt,name=current_password_hash,json=currentPasswordHash,proto3" json:"current_password_hash,omitempty"`
}

func (m *TLAccountGetPasswordSettings) Reset()                    { *m = TLAccountGetPasswordSettings{} }
func (m *TLAccountGetPasswordSettings) String() string            { return proto.CompactTextString(m) }
func (*TLAccountGetPasswordSettings) ProtoMessage()               {}
func (*TLAccountGetPasswordSettings) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{44} }

func (m *TLAccountGetPasswordSettings) GetCurrentPasswordHash() []byte {
	if m != nil {
		return m.CurrentPasswordHash
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// account.updatePasswordSettings#fa7c4b86 current_password_hash:bytes new_settings:account.PasswordInputSettings = Bool;
type TLAccountUpdatePasswordSettings struct {
	CurrentPasswordHash []byte                         `protobuf:"bytes,1,opt,name=current_password_hash,json=currentPasswordHash,proto3" json:"current_password_hash,omitempty"`
	NewSettings         *Account_PasswordInputSettings `protobuf:"bytes,2,opt,name=new_settings,json=newSettings" json:"new_settings,omitempty"`
}

func (m *TLAccountUpdatePasswordSettings) Reset()         { *m = TLAccountUpdatePasswordSettings{} }
func (m *TLAccountUpdatePasswordSettings) String() string { return proto.CompactTextString(m) }
func (*TLAccountUpdatePasswordSettings) ProtoMessage()    {}
func (*TLAccountUpdatePasswordSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{45}
}

func (m *TLAccountUpdatePasswordSettings) GetCurrentPasswordHash() []byte {
	if m != nil {
		return m.CurrentPasswordHash
	}
	return nil
}

func (m *TLAccountUpdatePasswordSettings) GetNewSettings() *Account_PasswordInputSettings {
	if m != nil {
		return m.NewSettings
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// account.sendConfirmPhoneCode#1516d7bd flags:# allow_flashcall:flags.0?true hash:string current_number:flags.0?Bool = auth.SentCode;
type TLAccountSendConfirmPhoneCode struct {
	AllowFlashcall bool   `protobuf:"varint,2,opt,name=allow_flashcall,json=allowFlashcall" json:"allow_flashcall,omitempty"`
	Hash           string `protobuf:"bytes,3,opt,name=hash" json:"hash,omitempty"`
	CurrentNumber  *Bool  `protobuf:"bytes,4,opt,name=current_number,json=currentNumber" json:"current_number,omitempty"`
}

func (m *TLAccountSendConfirmPhoneCode) Reset()                    { *m = TLAccountSendConfirmPhoneCode{} }
func (m *TLAccountSendConfirmPhoneCode) String() string            { return proto.CompactTextString(m) }
func (*TLAccountSendConfirmPhoneCode) ProtoMessage()               {}
func (*TLAccountSendConfirmPhoneCode) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{46} }

func (m *TLAccountSendConfirmPhoneCode) GetAllowFlashcall() bool {
	if m != nil {
		return m.AllowFlashcall
	}
	return false
}

func (m *TLAccountSendConfirmPhoneCode) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *TLAccountSendConfirmPhoneCode) GetCurrentNumber() *Bool {
	if m != nil {
		return m.CurrentNumber
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// account.confirmPhone#5f2178c3 phone_code_hash:string phone_code:string = Bool;
type TLAccountConfirmPhone struct {
	PhoneCodeHash string `protobuf:"bytes,1,opt,name=phone_code_hash,json=phoneCodeHash" json:"phone_code_hash,omitempty"`
	PhoneCode     string `protobuf:"bytes,2,opt,name=phone_code,json=phoneCode" json:"phone_code,omitempty"`
}

func (m *TLAccountConfirmPhone) Reset()                    { *m = TLAccountConfirmPhone{} }
func (m *TLAccountConfirmPhone) String() string            { return proto.CompactTextString(m) }
func (*TLAccountConfirmPhone) ProtoMessage()               {}
func (*TLAccountConfirmPhone) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{47} }

func (m *TLAccountConfirmPhone) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *TLAccountConfirmPhone) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// account.getTmpPassword#4a82327e password_hash:bytes period:int = account.TmpPassword;
type TLAccountGetTmpPassword struct {
	PasswordHash []byte `protobuf:"bytes,1,opt,name=password_hash,json=passwordHash,proto3" json:"password_hash,omitempty"`
	Period       int32  `protobuf:"varint,2,opt,name=period" json:"period,omitempty"`
}

func (m *TLAccountGetTmpPassword) Reset()                    { *m = TLAccountGetTmpPassword{} }
func (m *TLAccountGetTmpPassword) String() string            { return proto.CompactTextString(m) }
func (*TLAccountGetTmpPassword) ProtoMessage()               {}
func (*TLAccountGetTmpPassword) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{48} }

func (m *TLAccountGetTmpPassword) GetPasswordHash() []byte {
	if m != nil {
		return m.PasswordHash
	}
	return nil
}

func (m *TLAccountGetTmpPassword) GetPeriod() int32 {
	if m != nil {
		return m.Period
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// users.getUsers#d91a548 id:Vector<InputUser> = Vector<User>;
type TLUsersGetUsers struct {
	Id []*InputUser `protobuf:"bytes,1,rep,name=id" json:"id,omitempty"`
}

func (m *TLUsersGetUsers) Reset()                    { *m = TLUsersGetUsers{} }
func (m *TLUsersGetUsers) String() string            { return proto.CompactTextString(m) }
func (*TLUsersGetUsers) ProtoMessage()               {}
func (*TLUsersGetUsers) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{49} }

func (m *TLUsersGetUsers) GetId() []*InputUser {
	if m != nil {
		return m.Id
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// users.getFullUser#ca30a5b1 id:InputUser = UserFull;
type TLUsersGetFullUser struct {
	Id *InputUser `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *TLUsersGetFullUser) Reset()                    { *m = TLUsersGetFullUser{} }
func (m *TLUsersGetFullUser) String() string            { return proto.CompactTextString(m) }
func (*TLUsersGetFullUser) ProtoMessage()               {}
func (*TLUsersGetFullUser) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{50} }

func (m *TLUsersGetFullUser) GetId() *InputUser {
	if m != nil {
		return m.Id
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// contacts.getStatuses#c4a353ee = Vector<ContactStatus>;
type TLContactsGetStatuses struct {
}

func (m *TLContactsGetStatuses) Reset()                    { *m = TLContactsGetStatuses{} }
func (m *TLContactsGetStatuses) String() string            { return proto.CompactTextString(m) }
func (*TLContactsGetStatuses) ProtoMessage()               {}
func (*TLContactsGetStatuses) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{51} }

// /////////////////////////////////////////////////////////////////////////////
// contacts.getContacts#c023849f hash:int = contacts.Contacts;
type TLContactsGetContacts struct {
	Hash int32 `protobuf:"varint,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *TLContactsGetContacts) Reset()                    { *m = TLContactsGetContacts{} }
func (m *TLContactsGetContacts) String() string            { return proto.CompactTextString(m) }
func (*TLContactsGetContacts) ProtoMessage()               {}
func (*TLContactsGetContacts) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{52} }

func (m *TLContactsGetContacts) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// contacts.importContacts#2c800be5 contacts:Vector<InputContact> = contacts.ImportedContacts;
type TLContactsImportContacts struct {
	Contacts []*InputContact `protobuf:"bytes,1,rep,name=contacts" json:"contacts,omitempty"`
}

func (m *TLContactsImportContacts) Reset()                    { *m = TLContactsImportContacts{} }
func (m *TLContactsImportContacts) String() string            { return proto.CompactTextString(m) }
func (*TLContactsImportContacts) ProtoMessage()               {}
func (*TLContactsImportContacts) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{53} }

func (m *TLContactsImportContacts) GetContacts() []*InputContact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// contacts.deleteContact#8e953744 id:InputUser = contacts.Link;
type TLContactsDeleteContact struct {
	Id *InputUser `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *TLContactsDeleteContact) Reset()                    { *m = TLContactsDeleteContact{} }
func (m *TLContactsDeleteContact) String() string            { return proto.CompactTextString(m) }
func (*TLContactsDeleteContact) ProtoMessage()               {}
func (*TLContactsDeleteContact) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{54} }

func (m *TLContactsDeleteContact) GetId() *InputUser {
	if m != nil {
		return m.Id
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// contacts.deleteContacts#59ab389e id:Vector<InputUser> = Bool;
type TLContactsDeleteContacts struct {
	Id []*InputUser `protobuf:"bytes,1,rep,name=id" json:"id,omitempty"`
}

func (m *TLContactsDeleteContacts) Reset()                    { *m = TLContactsDeleteContacts{} }
func (m *TLContactsDeleteContacts) String() string            { return proto.CompactTextString(m) }
func (*TLContactsDeleteContacts) ProtoMessage()               {}
func (*TLContactsDeleteContacts) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{55} }

func (m *TLContactsDeleteContacts) GetId() []*InputUser {
	if m != nil {
		return m.Id
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// contacts.block#332b49fc id:InputUser = Bool;
type TLContactsBlock struct {
	Id *InputUser `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *TLContactsBlock) Reset()                    { *m = TLContactsBlock{} }
func (m *TLContactsBlock) String() string            { return proto.CompactTextString(m) }
func (*TLContactsBlock) ProtoMessage()               {}
func (*TLContactsBlock) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{56} }

func (m *TLContactsBlock) GetId() *InputUser {
	if m != nil {
		return m.Id
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// contacts.unblock#e54100bd id:InputUser = Bool;
type TLContactsUnblock struct {
	Id *InputUser `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *TLContactsUnblock) Reset()                    { *m = TLContactsUnblock{} }
func (m *TLContactsUnblock) String() string            { return proto.CompactTextString(m) }
func (*TLContactsUnblock) ProtoMessage()               {}
func (*TLContactsUnblock) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{57} }

func (m *TLContactsUnblock) GetId() *InputUser {
	if m != nil {
		return m.Id
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// contacts.getBlocked#f57c350f offset:int limit:int = contacts.Blocked;
type TLContactsGetBlocked struct {
	Offset int32 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *TLContactsGetBlocked) Reset()                    { *m = TLContactsGetBlocked{} }
func (m *TLContactsGetBlocked) String() string            { return proto.CompactTextString(m) }
func (*TLContactsGetBlocked) ProtoMessage()               {}
func (*TLContactsGetBlocked) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{58} }

func (m *TLContactsGetBlocked) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TLContactsGetBlocked) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// contacts.exportCard#84e53737 = Vector<int>;
type TLContactsExportCard struct {
}

func (m *TLContactsExportCard) Reset()                    { *m = TLContactsExportCard{} }
func (m *TLContactsExportCard) String() string            { return proto.CompactTextString(m) }
func (*TLContactsExportCard) ProtoMessage()               {}
func (*TLContactsExportCard) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{59} }

// /////////////////////////////////////////////////////////////////////////////
// contacts.importCard#4fe196fe export_card:Vector<int> = User;
type TLContactsImportCard struct {
	ExportCard []int32 `protobuf:"varint,1,rep,packed,name=export_card,json=exportCard" json:"export_card,omitempty"`
}

func (m *TLContactsImportCard) Reset()                    { *m = TLContactsImportCard{} }
func (m *TLContactsImportCard) String() string            { return proto.CompactTextString(m) }
func (*TLContactsImportCard) ProtoMessage()               {}
func (*TLContactsImportCard) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{60} }

func (m *TLContactsImportCard) GetExportCard() []int32 {
	if m != nil {
		return m.ExportCard
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// contacts.search#11f812d8 q:string limit:int = contacts.Found;
type TLContactsSearch struct {
	Q     string `protobuf:"bytes,1,opt,name=q" json:"q,omitempty"`
	Limit int32  `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *TLContactsSearch) Reset()                    { *m = TLContactsSearch{} }
func (m *TLContactsSearch) String() string            { return proto.CompactTextString(m) }
func (*TLContactsSearch) ProtoMessage()               {}
func (*TLContactsSearch) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{61} }

func (m *TLContactsSearch) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *TLContactsSearch) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// contacts.resolveUsername#f93ccba3 username:string = contacts.ResolvedPeer;
type TLContactsResolveUsername struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *TLContactsResolveUsername) Reset()                    { *m = TLContactsResolveUsername{} }
func (m *TLContactsResolveUsername) String() string            { return proto.CompactTextString(m) }
func (*TLContactsResolveUsername) ProtoMessage()               {}
func (*TLContactsResolveUsername) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{62} }

func (m *TLContactsResolveUsername) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// contacts.getTopPeers#d4982db5 flags:# correspondents:flags.0?true bots_pm:flags.1?true bots_inline:flags.2?true phone_calls:flags.3?true groups:flags.10?true channels:flags.15?true offset:int limit:int hash:int = contacts.TopPeers;
type TLContactsGetTopPeers struct {
	Correspondents bool  `protobuf:"varint,2,opt,name=correspondents" json:"correspondents,omitempty"`
	BotsPm         bool  `protobuf:"varint,3,opt,name=bots_pm,json=botsPm" json:"bots_pm,omitempty"`
	BotsInline     bool  `protobuf:"varint,4,opt,name=bots_inline,json=botsInline" json:"bots_inline,omitempty"`
	PhoneCalls     bool  `protobuf:"varint,5,opt,name=phone_calls,json=phoneCalls" json:"phone_calls,omitempty"`
	Groups         bool  `protobuf:"varint,6,opt,name=groups" json:"groups,omitempty"`
	Channels       bool  `protobuf:"varint,7,opt,name=channels" json:"channels,omitempty"`
	Offset         int32 `protobuf:"varint,8,opt,name=offset" json:"offset,omitempty"`
	Limit          int32 `protobuf:"varint,9,opt,name=limit" json:"limit,omitempty"`
	Hash           int32 `protobuf:"varint,10,opt,name=hash" json:"hash,omitempty"`
}

func (m *TLContactsGetTopPeers) Reset()                    { *m = TLContactsGetTopPeers{} }
func (m *TLContactsGetTopPeers) String() string            { return proto.CompactTextString(m) }
func (*TLContactsGetTopPeers) ProtoMessage()               {}
func (*TLContactsGetTopPeers) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{63} }

func (m *TLContactsGetTopPeers) GetCorrespondents() bool {
	if m != nil {
		return m.Correspondents
	}
	return false
}

func (m *TLContactsGetTopPeers) GetBotsPm() bool {
	if m != nil {
		return m.BotsPm
	}
	return false
}

func (m *TLContactsGetTopPeers) GetBotsInline() bool {
	if m != nil {
		return m.BotsInline
	}
	return false
}

func (m *TLContactsGetTopPeers) GetPhoneCalls() bool {
	if m != nil {
		return m.PhoneCalls
	}
	return false
}

func (m *TLContactsGetTopPeers) GetGroups() bool {
	if m != nil {
		return m.Groups
	}
	return false
}

func (m *TLContactsGetTopPeers) GetChannels() bool {
	if m != nil {
		return m.Channels
	}
	return false
}

func (m *TLContactsGetTopPeers) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TLContactsGetTopPeers) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TLContactsGetTopPeers) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// contacts.resetTopPeerRating#1ae373ac category:TopPeerCategory peer:InputPeer = Bool;
type TLContactsResetTopPeerRating struct {
	Category *TopPeerCategory `protobuf:"bytes,1,opt,name=category" json:"category,omitempty"`
	Peer     *InputPeer       `protobuf:"bytes,2,opt,name=peer" json:"peer,omitempty"`
}

func (m *TLContactsResetTopPeerRating) Reset()                    { *m = TLContactsResetTopPeerRating{} }
func (m *TLContactsResetTopPeerRating) String() string            { return proto.CompactTextString(m) }
func (*TLContactsResetTopPeerRating) ProtoMessage()               {}
func (*TLContactsResetTopPeerRating) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{64} }

func (m *TLContactsResetTopPeerRating) GetCategory() *TopPeerCategory {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *TLContactsResetTopPeerRating) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// contacts.resetSaved#879537f1 = Bool;
type TLContactsResetSaved struct {
}

func (m *TLContactsResetSaved) Reset()                    { *m = TLContactsResetSaved{} }
func (m *TLContactsResetSaved) String() string            { return proto.CompactTextString(m) }
func (*TLContactsResetSaved) ProtoMessage()               {}
func (*TLContactsResetSaved) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{65} }

// /////////////////////////////////////////////////////////////////////////////
// messages.getMessages#4222fa74 id:Vector<int> = messages.Messages;
type TLMessagesGetMessages struct {
	Id []int32 `protobuf:"varint,1,rep,packed,name=id" json:"id,omitempty"`
}

func (m *TLMessagesGetMessages) Reset()                    { *m = TLMessagesGetMessages{} }
func (m *TLMessagesGetMessages) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetMessages) ProtoMessage()               {}
func (*TLMessagesGetMessages) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{66} }

func (m *TLMessagesGetMessages) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getDialogs#191ba9c5 flags:# exclude_pinned:flags.0?true offset_date:int offset_id:int offset_peer:InputPeer limit:int = messages.Dialogs;
type TLMessagesGetDialogs struct {
	ExcludePinned bool       `protobuf:"varint,2,opt,name=exclude_pinned,json=excludePinned" json:"exclude_pinned,omitempty"`
	OffsetDate    int32      `protobuf:"varint,3,opt,name=offset_date,json=offsetDate" json:"offset_date,omitempty"`
	OffsetId      int32      `protobuf:"varint,4,opt,name=offset_id,json=offsetId" json:"offset_id,omitempty"`
	OffsetPeer    *InputPeer `protobuf:"bytes,5,opt,name=offset_peer,json=offsetPeer" json:"offset_peer,omitempty"`
	Limit         int32      `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
}

func (m *TLMessagesGetDialogs) Reset()                    { *m = TLMessagesGetDialogs{} }
func (m *TLMessagesGetDialogs) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetDialogs) ProtoMessage()               {}
func (*TLMessagesGetDialogs) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{67} }

func (m *TLMessagesGetDialogs) GetExcludePinned() bool {
	if m != nil {
		return m.ExcludePinned
	}
	return false
}

func (m *TLMessagesGetDialogs) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *TLMessagesGetDialogs) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *TLMessagesGetDialogs) GetOffsetPeer() *InputPeer {
	if m != nil {
		return m.OffsetPeer
	}
	return nil
}

func (m *TLMessagesGetDialogs) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getHistory#afa92846 peer:InputPeer offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
type TLMessagesGetHistory struct {
	Peer       *InputPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	OffsetId   int32      `protobuf:"varint,2,opt,name=offset_id,json=offsetId" json:"offset_id,omitempty"`
	OffsetDate int32      `protobuf:"varint,3,opt,name=offset_date,json=offsetDate" json:"offset_date,omitempty"`
	AddOffset  int32      `protobuf:"varint,4,opt,name=add_offset,json=addOffset" json:"add_offset,omitempty"`
	Limit      int32      `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
	MaxId      int32      `protobuf:"varint,6,opt,name=max_id,json=maxId" json:"max_id,omitempty"`
	MinId      int32      `protobuf:"varint,7,opt,name=min_id,json=minId" json:"min_id,omitempty"`
}

func (m *TLMessagesGetHistory) Reset()                    { *m = TLMessagesGetHistory{} }
func (m *TLMessagesGetHistory) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetHistory) ProtoMessage()               {}
func (*TLMessagesGetHistory) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{68} }

func (m *TLMessagesGetHistory) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetHistory) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *TLMessagesGetHistory) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *TLMessagesGetHistory) GetAddOffset() int32 {
	if m != nil {
		return m.AddOffset
	}
	return 0
}

func (m *TLMessagesGetHistory) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TLMessagesGetHistory) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *TLMessagesGetHistory) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.search#39e9ea0 flags:# peer:InputPeer q:string from_id:flags.0?InputUser filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
type TLMessagesSearch struct {
	Peer      *InputPeer      `protobuf:"bytes,2,opt,name=peer" json:"peer,omitempty"`
	Q         string          `protobuf:"bytes,3,opt,name=q" json:"q,omitempty"`
	FromId    *InputUser      `protobuf:"bytes,4,opt,name=from_id,json=fromId" json:"from_id,omitempty"`
	Filter    *MessagesFilter `protobuf:"bytes,5,opt,name=filter" json:"filter,omitempty"`
	MinDate   int32           `protobuf:"varint,6,opt,name=min_date,json=minDate" json:"min_date,omitempty"`
	MaxDate   int32           `protobuf:"varint,7,opt,name=max_date,json=maxDate" json:"max_date,omitempty"`
	OffsetId  int32           `protobuf:"varint,8,opt,name=offset_id,json=offsetId" json:"offset_id,omitempty"`
	AddOffset int32           `protobuf:"varint,9,opt,name=add_offset,json=addOffset" json:"add_offset,omitempty"`
	Limit     int32           `protobuf:"varint,10,opt,name=limit" json:"limit,omitempty"`
	MaxId     int32           `protobuf:"varint,11,opt,name=max_id,json=maxId" json:"max_id,omitempty"`
	MinId     int32           `protobuf:"varint,12,opt,name=min_id,json=minId" json:"min_id,omitempty"`
}

func (m *TLMessagesSearch) Reset()                    { *m = TLMessagesSearch{} }
func (m *TLMessagesSearch) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesSearch) ProtoMessage()               {}
func (*TLMessagesSearch) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{69} }

func (m *TLMessagesSearch) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSearch) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *TLMessagesSearch) GetFromId() *InputUser {
	if m != nil {
		return m.FromId
	}
	return nil
}

func (m *TLMessagesSearch) GetFilter() *MessagesFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *TLMessagesSearch) GetMinDate() int32 {
	if m != nil {
		return m.MinDate
	}
	return 0
}

func (m *TLMessagesSearch) GetMaxDate() int32 {
	if m != nil {
		return m.MaxDate
	}
	return 0
}

func (m *TLMessagesSearch) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *TLMessagesSearch) GetAddOffset() int32 {
	if m != nil {
		return m.AddOffset
	}
	return 0
}

func (m *TLMessagesSearch) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TLMessagesSearch) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *TLMessagesSearch) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.readHistory#e306d3a peer:InputPeer max_id:int = messages.AffectedMessages;
type TLMessagesReadHistory struct {
	Peer  *InputPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	MaxId int32      `protobuf:"varint,2,opt,name=max_id,json=maxId" json:"max_id,omitempty"`
}

func (m *TLMessagesReadHistory) Reset()                    { *m = TLMessagesReadHistory{} }
func (m *TLMessagesReadHistory) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesReadHistory) ProtoMessage()               {}
func (*TLMessagesReadHistory) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{70} }

func (m *TLMessagesReadHistory) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesReadHistory) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.deleteHistory#1c015b09 flags:# just_clear:flags.0?true peer:InputPeer max_id:int = messages.AffectedHistory;
type TLMessagesDeleteHistory struct {
	JustClear bool       `protobuf:"varint,2,opt,name=just_clear,json=justClear" json:"just_clear,omitempty"`
	Peer      *InputPeer `protobuf:"bytes,3,opt,name=peer" json:"peer,omitempty"`
	MaxId     int32      `protobuf:"varint,4,opt,name=max_id,json=maxId" json:"max_id,omitempty"`
}

func (m *TLMessagesDeleteHistory) Reset()                    { *m = TLMessagesDeleteHistory{} }
func (m *TLMessagesDeleteHistory) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesDeleteHistory) ProtoMessage()               {}
func (*TLMessagesDeleteHistory) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{71} }

func (m *TLMessagesDeleteHistory) GetJustClear() bool {
	if m != nil {
		return m.JustClear
	}
	return false
}

func (m *TLMessagesDeleteHistory) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesDeleteHistory) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.deleteMessages#e58e95d2 flags:# revoke:flags.0?true id:Vector<int> = messages.AffectedMessages;
type TLMessagesDeleteMessages struct {
	Revoke bool    `protobuf:"varint,2,opt,name=revoke" json:"revoke,omitempty"`
	Id     []int32 `protobuf:"varint,3,rep,packed,name=id" json:"id,omitempty"`
}

func (m *TLMessagesDeleteMessages) Reset()                    { *m = TLMessagesDeleteMessages{} }
func (m *TLMessagesDeleteMessages) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesDeleteMessages) ProtoMessage()               {}
func (*TLMessagesDeleteMessages) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{72} }

func (m *TLMessagesDeleteMessages) GetRevoke() bool {
	if m != nil {
		return m.Revoke
	}
	return false
}

func (m *TLMessagesDeleteMessages) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.receivedMessages#5a954c0 max_id:int = Vector<ReceivedNotifyMessage>;
type TLMessagesReceivedMessages struct {
	MaxId int32 `protobuf:"varint,1,opt,name=max_id,json=maxId" json:"max_id,omitempty"`
}

func (m *TLMessagesReceivedMessages) Reset()                    { *m = TLMessagesReceivedMessages{} }
func (m *TLMessagesReceivedMessages) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesReceivedMessages) ProtoMessage()               {}
func (*TLMessagesReceivedMessages) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{73} }

func (m *TLMessagesReceivedMessages) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.setTyping#a3825e50 peer:InputPeer action:SendMessageAction = Bool;
type TLMessagesSetTyping struct {
	Peer   *InputPeer         `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Action *SendMessageAction `protobuf:"bytes,2,opt,name=action" json:"action,omitempty"`
}

func (m *TLMessagesSetTyping) Reset()                    { *m = TLMessagesSetTyping{} }
func (m *TLMessagesSetTyping) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesSetTyping) ProtoMessage()               {}
func (*TLMessagesSetTyping) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{74} }

func (m *TLMessagesSetTyping) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSetTyping) GetAction() *SendMessageAction {
	if m != nil {
		return m.Action
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.sendMessage#fa88427a flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
type TLMessagesSendMessage struct {
	NoWebpage    bool             `protobuf:"varint,2,opt,name=no_webpage,json=noWebpage" json:"no_webpage,omitempty"`
	Silent       bool             `protobuf:"varint,3,opt,name=silent" json:"silent,omitempty"`
	Background   bool             `protobuf:"varint,4,opt,name=background" json:"background,omitempty"`
	ClearDraft   bool             `protobuf:"varint,5,opt,name=clear_draft,json=clearDraft" json:"clear_draft,omitempty"`
	Peer         *InputPeer       `protobuf:"bytes,6,opt,name=peer" json:"peer,omitempty"`
	ReplyToMsgId int32            `protobuf:"varint,7,opt,name=reply_to_msg_id,json=replyToMsgId" json:"reply_to_msg_id,omitempty"`
	Message      string           `protobuf:"bytes,8,opt,name=message" json:"message,omitempty"`
	RandomId     int64            `protobuf:"varint,9,opt,name=random_id,json=randomId" json:"random_id,omitempty"`
	ReplyMarkup  *ReplyMarkup     `protobuf:"bytes,10,opt,name=reply_markup,json=replyMarkup" json:"reply_markup,omitempty"`
	Entities     []*MessageEntity `protobuf:"bytes,11,rep,name=entities" json:"entities,omitempty"`
}

func (m *TLMessagesSendMessage) Reset()                    { *m = TLMessagesSendMessage{} }
func (m *TLMessagesSendMessage) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesSendMessage) ProtoMessage()               {}
func (*TLMessagesSendMessage) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{75} }

func (m *TLMessagesSendMessage) GetNoWebpage() bool {
	if m != nil {
		return m.NoWebpage
	}
	return false
}

func (m *TLMessagesSendMessage) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *TLMessagesSendMessage) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *TLMessagesSendMessage) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *TLMessagesSendMessage) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendMessage) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *TLMessagesSendMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TLMessagesSendMessage) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesSendMessage) GetReplyMarkup() *ReplyMarkup {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *TLMessagesSendMessage) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.sendMedia#c8f16791 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int media:InputMedia random_id:long reply_markup:flags.2?ReplyMarkup = Updates;
type TLMessagesSendMedia struct {
	Silent       bool         `protobuf:"varint,2,opt,name=silent" json:"silent,omitempty"`
	Background   bool         `protobuf:"varint,3,opt,name=background" json:"background,omitempty"`
	ClearDraft   bool         `protobuf:"varint,4,opt,name=clear_draft,json=clearDraft" json:"clear_draft,omitempty"`
	Peer         *InputPeer   `protobuf:"bytes,5,opt,name=peer" json:"peer,omitempty"`
	ReplyToMsgId int32        `protobuf:"varint,6,opt,name=reply_to_msg_id,json=replyToMsgId" json:"reply_to_msg_id,omitempty"`
	Media        *InputMedia  `protobuf:"bytes,7,opt,name=media" json:"media,omitempty"`
	RandomId     int64        `protobuf:"varint,8,opt,name=random_id,json=randomId" json:"random_id,omitempty"`
	ReplyMarkup  *ReplyMarkup `protobuf:"bytes,9,opt,name=reply_markup,json=replyMarkup" json:"reply_markup,omitempty"`
}

func (m *TLMessagesSendMedia) Reset()                    { *m = TLMessagesSendMedia{} }
func (m *TLMessagesSendMedia) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesSendMedia) ProtoMessage()               {}
func (*TLMessagesSendMedia) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{76} }

func (m *TLMessagesSendMedia) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *TLMessagesSendMedia) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *TLMessagesSendMedia) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *TLMessagesSendMedia) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendMedia) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *TLMessagesSendMedia) GetMedia() *InputMedia {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *TLMessagesSendMedia) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesSendMedia) GetReplyMarkup() *ReplyMarkup {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.forwardMessages#708e0195 flags:# silent:flags.5?true background:flags.6?true with_my_score:flags.8?true from_peer:InputPeer id:Vector<int> random_id:Vector<long> to_peer:InputPeer = Updates;
type TLMessagesForwardMessages struct {
	Silent      bool       `protobuf:"varint,2,opt,name=silent" json:"silent,omitempty"`
	Background  bool       `protobuf:"varint,3,opt,name=background" json:"background,omitempty"`
	WithMyScore bool       `protobuf:"varint,4,opt,name=with_my_score,json=withMyScore" json:"with_my_score,omitempty"`
	FromPeer    *InputPeer `protobuf:"bytes,5,opt,name=from_peer,json=fromPeer" json:"from_peer,omitempty"`
	Id          []int32    `protobuf:"varint,6,rep,packed,name=id" json:"id,omitempty"`
	RandomId    []int64    `protobuf:"varint,7,rep,packed,name=random_id,json=randomId" json:"random_id,omitempty"`
	ToPeer      *InputPeer `protobuf:"bytes,8,opt,name=to_peer,json=toPeer" json:"to_peer,omitempty"`
}

func (m *TLMessagesForwardMessages) Reset()                    { *m = TLMessagesForwardMessages{} }
func (m *TLMessagesForwardMessages) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesForwardMessages) ProtoMessage()               {}
func (*TLMessagesForwardMessages) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{77} }

func (m *TLMessagesForwardMessages) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *TLMessagesForwardMessages) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *TLMessagesForwardMessages) GetWithMyScore() bool {
	if m != nil {
		return m.WithMyScore
	}
	return false
}

func (m *TLMessagesForwardMessages) GetFromPeer() *InputPeer {
	if m != nil {
		return m.FromPeer
	}
	return nil
}

func (m *TLMessagesForwardMessages) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLMessagesForwardMessages) GetRandomId() []int64 {
	if m != nil {
		return m.RandomId
	}
	return nil
}

func (m *TLMessagesForwardMessages) GetToPeer() *InputPeer {
	if m != nil {
		return m.ToPeer
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.reportSpam#cf1592db peer:InputPeer = Bool;
type TLMessagesReportSpam struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *TLMessagesReportSpam) Reset()                    { *m = TLMessagesReportSpam{} }
func (m *TLMessagesReportSpam) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesReportSpam) ProtoMessage()               {}
func (*TLMessagesReportSpam) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{78} }

func (m *TLMessagesReportSpam) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.hideReportSpam#a8f1709b peer:InputPeer = Bool;
type TLMessagesHideReportSpam struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *TLMessagesHideReportSpam) Reset()                    { *m = TLMessagesHideReportSpam{} }
func (m *TLMessagesHideReportSpam) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesHideReportSpam) ProtoMessage()               {}
func (*TLMessagesHideReportSpam) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{79} }

func (m *TLMessagesHideReportSpam) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getPeerSettings#3672e09c peer:InputPeer = PeerSettings;
type TLMessagesGetPeerSettings struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *TLMessagesGetPeerSettings) Reset()                    { *m = TLMessagesGetPeerSettings{} }
func (m *TLMessagesGetPeerSettings) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetPeerSettings) ProtoMessage()               {}
func (*TLMessagesGetPeerSettings) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{80} }

func (m *TLMessagesGetPeerSettings) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getChats#3c6aa187 id:Vector<int> = messages.Chats;
type TLMessagesGetChats struct {
	Id []int32 `protobuf:"varint,1,rep,packed,name=id" json:"id,omitempty"`
}

func (m *TLMessagesGetChats) Reset()                    { *m = TLMessagesGetChats{} }
func (m *TLMessagesGetChats) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetChats) ProtoMessage()               {}
func (*TLMessagesGetChats) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{81} }

func (m *TLMessagesGetChats) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getFullChat#3b831c66 chat_id:int = messages.ChatFull;
type TLMessagesGetFullChat struct {
	ChatId int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
}

func (m *TLMessagesGetFullChat) Reset()                    { *m = TLMessagesGetFullChat{} }
func (m *TLMessagesGetFullChat) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetFullChat) ProtoMessage()               {}
func (*TLMessagesGetFullChat) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{82} }

func (m *TLMessagesGetFullChat) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.editChatTitle#dc452855 chat_id:int title:string = Updates;
type TLMessagesEditChatTitle struct {
	ChatId int32  `protobuf:"varint,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	Title  string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *TLMessagesEditChatTitle) Reset()                    { *m = TLMessagesEditChatTitle{} }
func (m *TLMessagesEditChatTitle) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesEditChatTitle) ProtoMessage()               {}
func (*TLMessagesEditChatTitle) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{83} }

func (m *TLMessagesEditChatTitle) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLMessagesEditChatTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// messages.editChatPhoto#ca4c79d8 chat_id:int photo:InputChatPhoto = Updates;
type TLMessagesEditChatPhoto struct {
	ChatId int32           `protobuf:"varint,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	Photo  *InputChatPhoto `protobuf:"bytes,2,opt,name=photo" json:"photo,omitempty"`
}

func (m *TLMessagesEditChatPhoto) Reset()                    { *m = TLMessagesEditChatPhoto{} }
func (m *TLMessagesEditChatPhoto) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesEditChatPhoto) ProtoMessage()               {}
func (*TLMessagesEditChatPhoto) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{84} }

func (m *TLMessagesEditChatPhoto) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLMessagesEditChatPhoto) GetPhoto() *InputChatPhoto {
	if m != nil {
		return m.Photo
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.addChatUser#f9a0aa09 chat_id:int user_id:InputUser fwd_limit:int = Updates;
type TLMessagesAddChatUser struct {
	ChatId   int32      `protobuf:"varint,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	UserId   *InputUser `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	FwdLimit int32      `protobuf:"varint,3,opt,name=fwd_limit,json=fwdLimit" json:"fwd_limit,omitempty"`
}

func (m *TLMessagesAddChatUser) Reset()                    { *m = TLMessagesAddChatUser{} }
func (m *TLMessagesAddChatUser) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesAddChatUser) ProtoMessage()               {}
func (*TLMessagesAddChatUser) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{85} }

func (m *TLMessagesAddChatUser) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLMessagesAddChatUser) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLMessagesAddChatUser) GetFwdLimit() int32 {
	if m != nil {
		return m.FwdLimit
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.deleteChatUser#e0611f16 chat_id:int user_id:InputUser = Updates;
type TLMessagesDeleteChatUser struct {
	ChatId int32      `protobuf:"varint,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	UserId *InputUser `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *TLMessagesDeleteChatUser) Reset()                    { *m = TLMessagesDeleteChatUser{} }
func (m *TLMessagesDeleteChatUser) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesDeleteChatUser) ProtoMessage()               {}
func (*TLMessagesDeleteChatUser) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{86} }

func (m *TLMessagesDeleteChatUser) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLMessagesDeleteChatUser) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.createChat#9cb126e users:Vector<InputUser> title:string = Updates;
type TLMessagesCreateChat struct {
	Users []*InputUser `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	Title string       `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *TLMessagesCreateChat) Reset()                    { *m = TLMessagesCreateChat{} }
func (m *TLMessagesCreateChat) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesCreateChat) ProtoMessage()               {}
func (*TLMessagesCreateChat) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{87} }

func (m *TLMessagesCreateChat) GetUsers() []*InputUser {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *TLMessagesCreateChat) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// messages.forwardMessage#33963bf9 peer:InputPeer id:int random_id:long = Updates;
type TLMessagesForwardMessage struct {
	Peer     *InputPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Id       int32      `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	RandomId int64      `protobuf:"varint,3,opt,name=random_id,json=randomId" json:"random_id,omitempty"`
}

func (m *TLMessagesForwardMessage) Reset()                    { *m = TLMessagesForwardMessage{} }
func (m *TLMessagesForwardMessage) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesForwardMessage) ProtoMessage()               {}
func (*TLMessagesForwardMessage) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{88} }

func (m *TLMessagesForwardMessage) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesForwardMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TLMessagesForwardMessage) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getDhConfig#26cf8950 version:int random_length:int = messages.DhConfig;
type TLMessagesGetDhConfig struct {
	Version      int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	RandomLength int32 `protobuf:"varint,2,opt,name=random_length,json=randomLength" json:"random_length,omitempty"`
}

func (m *TLMessagesGetDhConfig) Reset()                    { *m = TLMessagesGetDhConfig{} }
func (m *TLMessagesGetDhConfig) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetDhConfig) ProtoMessage()               {}
func (*TLMessagesGetDhConfig) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{89} }

func (m *TLMessagesGetDhConfig) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TLMessagesGetDhConfig) GetRandomLength() int32 {
	if m != nil {
		return m.RandomLength
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.requestEncryption#f64daf43 user_id:InputUser random_id:int g_a:bytes = EncryptedChat;
type TLMessagesRequestEncryption struct {
	UserId   *InputUser `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	RandomId int32      `protobuf:"varint,2,opt,name=random_id,json=randomId" json:"random_id,omitempty"`
	GA       []byte     `protobuf:"bytes,3,opt,name=g_a,json=gA,proto3" json:"g_a,omitempty"`
}

func (m *TLMessagesRequestEncryption) Reset()                    { *m = TLMessagesRequestEncryption{} }
func (m *TLMessagesRequestEncryption) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesRequestEncryption) ProtoMessage()               {}
func (*TLMessagesRequestEncryption) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{90} }

func (m *TLMessagesRequestEncryption) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLMessagesRequestEncryption) GetRandomId() int32 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesRequestEncryption) GetGA() []byte {
	if m != nil {
		return m.GA
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.acceptEncryption#3dbc0415 peer:InputEncryptedChat g_b:bytes key_fingerprint:long = EncryptedChat;
type TLMessagesAcceptEncryption struct {
	Peer           *InputEncryptedChat `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	GB             []byte              `protobuf:"bytes,2,opt,name=g_b,json=gB,proto3" json:"g_b,omitempty"`
	KeyFingerprint int64               `protobuf:"varint,3,opt,name=key_fingerprint,json=keyFingerprint" json:"key_fingerprint,omitempty"`
}

func (m *TLMessagesAcceptEncryption) Reset()                    { *m = TLMessagesAcceptEncryption{} }
func (m *TLMessagesAcceptEncryption) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesAcceptEncryption) ProtoMessage()               {}
func (*TLMessagesAcceptEncryption) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{91} }

func (m *TLMessagesAcceptEncryption) GetPeer() *InputEncryptedChat {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesAcceptEncryption) GetGB() []byte {
	if m != nil {
		return m.GB
	}
	return nil
}

func (m *TLMessagesAcceptEncryption) GetKeyFingerprint() int64 {
	if m != nil {
		return m.KeyFingerprint
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.discardEncryption#edd923c5 chat_id:int = Bool;
type TLMessagesDiscardEncryption struct {
	ChatId int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
}

func (m *TLMessagesDiscardEncryption) Reset()                    { *m = TLMessagesDiscardEncryption{} }
func (m *TLMessagesDiscardEncryption) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesDiscardEncryption) ProtoMessage()               {}
func (*TLMessagesDiscardEncryption) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{92} }

func (m *TLMessagesDiscardEncryption) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.setEncryptedTyping#791451ed peer:InputEncryptedChat typing:Bool = Bool;
type TLMessagesSetEncryptedTyping struct {
	Peer   *InputEncryptedChat `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Typing *Bool               `protobuf:"bytes,2,opt,name=typing" json:"typing,omitempty"`
}

func (m *TLMessagesSetEncryptedTyping) Reset()                    { *m = TLMessagesSetEncryptedTyping{} }
func (m *TLMessagesSetEncryptedTyping) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesSetEncryptedTyping) ProtoMessage()               {}
func (*TLMessagesSetEncryptedTyping) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{93} }

func (m *TLMessagesSetEncryptedTyping) GetPeer() *InputEncryptedChat {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSetEncryptedTyping) GetTyping() *Bool {
	if m != nil {
		return m.Typing
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.readEncryptedHistory#7f4b690a peer:InputEncryptedChat max_date:int = Bool;
type TLMessagesReadEncryptedHistory struct {
	Peer    *InputEncryptedChat `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	MaxDate int32               `protobuf:"varint,2,opt,name=max_date,json=maxDate" json:"max_date,omitempty"`
}

func (m *TLMessagesReadEncryptedHistory) Reset()                    { *m = TLMessagesReadEncryptedHistory{} }
func (m *TLMessagesReadEncryptedHistory) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesReadEncryptedHistory) ProtoMessage()               {}
func (*TLMessagesReadEncryptedHistory) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{94} }

func (m *TLMessagesReadEncryptedHistory) GetPeer() *InputEncryptedChat {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesReadEncryptedHistory) GetMaxDate() int32 {
	if m != nil {
		return m.MaxDate
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.sendEncrypted#a9776773 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
type TLMessagesSendEncrypted struct {
	Peer     *InputEncryptedChat `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	RandomId int64               `protobuf:"varint,2,opt,name=random_id,json=randomId" json:"random_id,omitempty"`
	Data     []byte              `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TLMessagesSendEncrypted) Reset()                    { *m = TLMessagesSendEncrypted{} }
func (m *TLMessagesSendEncrypted) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesSendEncrypted) ProtoMessage()               {}
func (*TLMessagesSendEncrypted) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{95} }

func (m *TLMessagesSendEncrypted) GetPeer() *InputEncryptedChat {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendEncrypted) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesSendEncrypted) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.sendEncryptedFile#9a901b66 peer:InputEncryptedChat random_id:long data:bytes file:InputEncryptedFile = messages.SentEncryptedMessage;
type TLMessagesSendEncryptedFile struct {
	Peer     *InputEncryptedChat `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	RandomId int64               `protobuf:"varint,2,opt,name=random_id,json=randomId" json:"random_id,omitempty"`
	Data     []byte              `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	File     *InputEncryptedFile `protobuf:"bytes,4,opt,name=file" json:"file,omitempty"`
}

func (m *TLMessagesSendEncryptedFile) Reset()                    { *m = TLMessagesSendEncryptedFile{} }
func (m *TLMessagesSendEncryptedFile) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesSendEncryptedFile) ProtoMessage()               {}
func (*TLMessagesSendEncryptedFile) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{96} }

func (m *TLMessagesSendEncryptedFile) GetPeer() *InputEncryptedChat {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendEncryptedFile) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesSendEncryptedFile) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TLMessagesSendEncryptedFile) GetFile() *InputEncryptedFile {
	if m != nil {
		return m.File
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.sendEncryptedService#32d439a4 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
type TLMessagesSendEncryptedService struct {
	Peer     *InputEncryptedChat `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	RandomId int64               `protobuf:"varint,2,opt,name=random_id,json=randomId" json:"random_id,omitempty"`
	Data     []byte              `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TLMessagesSendEncryptedService) Reset()                    { *m = TLMessagesSendEncryptedService{} }
func (m *TLMessagesSendEncryptedService) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesSendEncryptedService) ProtoMessage()               {}
func (*TLMessagesSendEncryptedService) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{97} }

func (m *TLMessagesSendEncryptedService) GetPeer() *InputEncryptedChat {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendEncryptedService) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesSendEncryptedService) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.receivedQueue#55a5bb66 max_qts:int = Vector<long>;
type TLMessagesReceivedQueue struct {
	MaxQts int32 `protobuf:"varint,1,opt,name=max_qts,json=maxQts" json:"max_qts,omitempty"`
}

func (m *TLMessagesReceivedQueue) Reset()                    { *m = TLMessagesReceivedQueue{} }
func (m *TLMessagesReceivedQueue) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesReceivedQueue) ProtoMessage()               {}
func (*TLMessagesReceivedQueue) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{98} }

func (m *TLMessagesReceivedQueue) GetMaxQts() int32 {
	if m != nil {
		return m.MaxQts
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.reportEncryptedSpam#4b0c8c0f peer:InputEncryptedChat = Bool;
type TLMessagesReportEncryptedSpam struct {
	Peer *InputEncryptedChat `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *TLMessagesReportEncryptedSpam) Reset()                    { *m = TLMessagesReportEncryptedSpam{} }
func (m *TLMessagesReportEncryptedSpam) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesReportEncryptedSpam) ProtoMessage()               {}
func (*TLMessagesReportEncryptedSpam) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{99} }

func (m *TLMessagesReportEncryptedSpam) GetPeer() *InputEncryptedChat {
	if m != nil {
		return m.Peer
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.readMessageContents#36a73f77 id:Vector<int> = messages.AffectedMessages;
type TLMessagesReadMessageContents struct {
	Id []int32 `protobuf:"varint,1,rep,packed,name=id" json:"id,omitempty"`
}

func (m *TLMessagesReadMessageContents) Reset()                    { *m = TLMessagesReadMessageContents{} }
func (m *TLMessagesReadMessageContents) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesReadMessageContents) ProtoMessage()               {}
func (*TLMessagesReadMessageContents) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{100} }

func (m *TLMessagesReadMessageContents) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getAllStickers#1c9618b1 hash:int = messages.AllStickers;
type TLMessagesGetAllStickers struct {
	Hash int32 `protobuf:"varint,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *TLMessagesGetAllStickers) Reset()                    { *m = TLMessagesGetAllStickers{} }
func (m *TLMessagesGetAllStickers) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetAllStickers) ProtoMessage()               {}
func (*TLMessagesGetAllStickers) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{101} }

func (m *TLMessagesGetAllStickers) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getWebPagePreview#25223e24 message:string = MessageMedia;
type TLMessagesGetWebPagePreview struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *TLMessagesGetWebPagePreview) Reset()                    { *m = TLMessagesGetWebPagePreview{} }
func (m *TLMessagesGetWebPagePreview) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetWebPagePreview) ProtoMessage()               {}
func (*TLMessagesGetWebPagePreview) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{102} }

func (m *TLMessagesGetWebPagePreview) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// messages.exportChatInvite#7d885289 chat_id:int = ExportedChatInvite;
type TLMessagesExportChatInvite struct {
	ChatId int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
}

func (m *TLMessagesExportChatInvite) Reset()                    { *m = TLMessagesExportChatInvite{} }
func (m *TLMessagesExportChatInvite) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesExportChatInvite) ProtoMessage()               {}
func (*TLMessagesExportChatInvite) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{103} }

func (m *TLMessagesExportChatInvite) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.checkChatInvite#3eadb1bb hash:string = ChatInvite;
type TLMessagesCheckChatInvite struct {
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *TLMessagesCheckChatInvite) Reset()                    { *m = TLMessagesCheckChatInvite{} }
func (m *TLMessagesCheckChatInvite) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesCheckChatInvite) ProtoMessage()               {}
func (*TLMessagesCheckChatInvite) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{104} }

func (m *TLMessagesCheckChatInvite) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// messages.importChatInvite#6c50051c hash:string = Updates;
type TLMessagesImportChatInvite struct {
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *TLMessagesImportChatInvite) Reset()                    { *m = TLMessagesImportChatInvite{} }
func (m *TLMessagesImportChatInvite) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesImportChatInvite) ProtoMessage()               {}
func (*TLMessagesImportChatInvite) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{105} }

func (m *TLMessagesImportChatInvite) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getStickerSet#2619a90e stickerset:InputStickerSet = messages.StickerSet;
type TLMessagesGetStickerSet struct {
	Stickerset *InputStickerSet `protobuf:"bytes,1,opt,name=stickerset" json:"stickerset,omitempty"`
}

func (m *TLMessagesGetStickerSet) Reset()                    { *m = TLMessagesGetStickerSet{} }
func (m *TLMessagesGetStickerSet) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetStickerSet) ProtoMessage()               {}
func (*TLMessagesGetStickerSet) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{106} }

func (m *TLMessagesGetStickerSet) GetStickerset() *InputStickerSet {
	if m != nil {
		return m.Stickerset
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.installStickerSet#c78fe460 stickerset:InputStickerSet archived:Bool = messages.StickerSetInstallResult;
type TLMessagesInstallStickerSet struct {
	Stickerset *InputStickerSet `protobuf:"bytes,1,opt,name=stickerset" json:"stickerset,omitempty"`
	Archived   *Bool            `protobuf:"bytes,2,opt,name=archived" json:"archived,omitempty"`
}

func (m *TLMessagesInstallStickerSet) Reset()                    { *m = TLMessagesInstallStickerSet{} }
func (m *TLMessagesInstallStickerSet) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesInstallStickerSet) ProtoMessage()               {}
func (*TLMessagesInstallStickerSet) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{107} }

func (m *TLMessagesInstallStickerSet) GetStickerset() *InputStickerSet {
	if m != nil {
		return m.Stickerset
	}
	return nil
}

func (m *TLMessagesInstallStickerSet) GetArchived() *Bool {
	if m != nil {
		return m.Archived
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.uninstallStickerSet#f96e55de stickerset:InputStickerSet = Bool;
type TLMessagesUninstallStickerSet struct {
	Stickerset *InputStickerSet `protobuf:"bytes,1,opt,name=stickerset" json:"stickerset,omitempty"`
}

func (m *TLMessagesUninstallStickerSet) Reset()                    { *m = TLMessagesUninstallStickerSet{} }
func (m *TLMessagesUninstallStickerSet) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesUninstallStickerSet) ProtoMessage()               {}
func (*TLMessagesUninstallStickerSet) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{108} }

func (m *TLMessagesUninstallStickerSet) GetStickerset() *InputStickerSet {
	if m != nil {
		return m.Stickerset
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.startBot#e6df7378 bot:InputUser peer:InputPeer random_id:long start_param:string = Updates;
type TLMessagesStartBot struct {
	Bot        *InputUser `protobuf:"bytes,1,opt,name=bot" json:"bot,omitempty"`
	Peer       *InputPeer `protobuf:"bytes,2,opt,name=peer" json:"peer,omitempty"`
	RandomId   int64      `protobuf:"varint,3,opt,name=random_id,json=randomId" json:"random_id,omitempty"`
	StartParam string     `protobuf:"bytes,4,opt,name=start_param,json=startParam" json:"start_param,omitempty"`
}

func (m *TLMessagesStartBot) Reset()                    { *m = TLMessagesStartBot{} }
func (m *TLMessagesStartBot) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesStartBot) ProtoMessage()               {}
func (*TLMessagesStartBot) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{109} }

func (m *TLMessagesStartBot) GetBot() *InputUser {
	if m != nil {
		return m.Bot
	}
	return nil
}

func (m *TLMessagesStartBot) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesStartBot) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesStartBot) GetStartParam() string {
	if m != nil {
		return m.StartParam
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getMessagesViews#c4c8a55d peer:InputPeer id:Vector<int> increment:Bool = Vector<int>;
type TLMessagesGetMessagesViews struct {
	Peer      *InputPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Id        []int32    `protobuf:"varint,2,rep,packed,name=id" json:"id,omitempty"`
	Increment *Bool      `protobuf:"bytes,3,opt,name=increment" json:"increment,omitempty"`
}

func (m *TLMessagesGetMessagesViews) Reset()                    { *m = TLMessagesGetMessagesViews{} }
func (m *TLMessagesGetMessagesViews) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetMessagesViews) ProtoMessage()               {}
func (*TLMessagesGetMessagesViews) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{110} }

func (m *TLMessagesGetMessagesViews) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetMessagesViews) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLMessagesGetMessagesViews) GetIncrement() *Bool {
	if m != nil {
		return m.Increment
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.toggleChatAdmins#ec8bd9e1 chat_id:int enabled:Bool = Updates;
type TLMessagesToggleChatAdmins struct {
	ChatId  int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	Enabled *Bool `protobuf:"bytes,2,opt,name=enabled" json:"enabled,omitempty"`
}

func (m *TLMessagesToggleChatAdmins) Reset()                    { *m = TLMessagesToggleChatAdmins{} }
func (m *TLMessagesToggleChatAdmins) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesToggleChatAdmins) ProtoMessage()               {}
func (*TLMessagesToggleChatAdmins) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{111} }

func (m *TLMessagesToggleChatAdmins) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLMessagesToggleChatAdmins) GetEnabled() *Bool {
	if m != nil {
		return m.Enabled
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.editChatAdmin#a9e69f2e chat_id:int user_id:InputUser is_admin:Bool = Bool;
type TLMessagesEditChatAdmin struct {
	ChatId  int32      `protobuf:"varint,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	UserId  *InputUser `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	IsAdmin *Bool      `protobuf:"bytes,3,opt,name=is_admin,json=isAdmin" json:"is_admin,omitempty"`
}

func (m *TLMessagesEditChatAdmin) Reset()                    { *m = TLMessagesEditChatAdmin{} }
func (m *TLMessagesEditChatAdmin) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesEditChatAdmin) ProtoMessage()               {}
func (*TLMessagesEditChatAdmin) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{112} }

func (m *TLMessagesEditChatAdmin) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLMessagesEditChatAdmin) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLMessagesEditChatAdmin) GetIsAdmin() *Bool {
	if m != nil {
		return m.IsAdmin
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.migrateChat#15a3b8e3 chat_id:int = Updates;
type TLMessagesMigrateChat struct {
	ChatId int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
}

func (m *TLMessagesMigrateChat) Reset()                    { *m = TLMessagesMigrateChat{} }
func (m *TLMessagesMigrateChat) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesMigrateChat) ProtoMessage()               {}
func (*TLMessagesMigrateChat) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{113} }

func (m *TLMessagesMigrateChat) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.searchGlobal#9e3cacb0 q:string offset_date:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;
type TLMessagesSearchGlobal struct {
	Q          string     `protobuf:"bytes,1,opt,name=q" json:"q,omitempty"`
	OffsetDate int32      `protobuf:"varint,2,opt,name=offset_date,json=offsetDate" json:"offset_date,omitempty"`
	OffsetPeer *InputPeer `protobuf:"bytes,3,opt,name=offset_peer,json=offsetPeer" json:"offset_peer,omitempty"`
	OffsetId   int32      `protobuf:"varint,4,opt,name=offset_id,json=offsetId" json:"offset_id,omitempty"`
	Limit      int32      `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
}

func (m *TLMessagesSearchGlobal) Reset()                    { *m = TLMessagesSearchGlobal{} }
func (m *TLMessagesSearchGlobal) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesSearchGlobal) ProtoMessage()               {}
func (*TLMessagesSearchGlobal) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{114} }

func (m *TLMessagesSearchGlobal) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *TLMessagesSearchGlobal) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *TLMessagesSearchGlobal) GetOffsetPeer() *InputPeer {
	if m != nil {
		return m.OffsetPeer
	}
	return nil
}

func (m *TLMessagesSearchGlobal) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *TLMessagesSearchGlobal) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.reorderStickerSets#78337739 flags:# masks:flags.0?true order:Vector<long> = Bool;
type TLMessagesReorderStickerSets struct {
	Masks bool    `protobuf:"varint,2,opt,name=masks" json:"masks,omitempty"`
	Order []int64 `protobuf:"varint,3,rep,packed,name=order" json:"order,omitempty"`
}

func (m *TLMessagesReorderStickerSets) Reset()                    { *m = TLMessagesReorderStickerSets{} }
func (m *TLMessagesReorderStickerSets) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesReorderStickerSets) ProtoMessage()               {}
func (*TLMessagesReorderStickerSets) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{115} }

func (m *TLMessagesReorderStickerSets) GetMasks() bool {
	if m != nil {
		return m.Masks
	}
	return false
}

func (m *TLMessagesReorderStickerSets) GetOrder() []int64 {
	if m != nil {
		return m.Order
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getDocumentByHash#338e2464 sha256:bytes size:int mime_type:string = Document;
type TLMessagesGetDocumentByHash struct {
	Sha256   []byte `protobuf:"bytes,1,opt,name=sha256,proto3" json:"sha256,omitempty"`
	Size     int32  `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	MimeType string `protobuf:"bytes,3,opt,name=mime_type,json=mimeType" json:"mime_type,omitempty"`
}

func (m *TLMessagesGetDocumentByHash) Reset()                    { *m = TLMessagesGetDocumentByHash{} }
func (m *TLMessagesGetDocumentByHash) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetDocumentByHash) ProtoMessage()               {}
func (*TLMessagesGetDocumentByHash) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{116} }

func (m *TLMessagesGetDocumentByHash) GetSha256() []byte {
	if m != nil {
		return m.Sha256
	}
	return nil
}

func (m *TLMessagesGetDocumentByHash) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *TLMessagesGetDocumentByHash) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// messages.searchGifs#bf9a776b q:string offset:int = messages.FoundGifs;
type TLMessagesSearchGifs struct {
	Q      string `protobuf:"bytes,1,opt,name=q" json:"q,omitempty"`
	Offset int32  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *TLMessagesSearchGifs) Reset()                    { *m = TLMessagesSearchGifs{} }
func (m *TLMessagesSearchGifs) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesSearchGifs) ProtoMessage()               {}
func (*TLMessagesSearchGifs) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{117} }

func (m *TLMessagesSearchGifs) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *TLMessagesSearchGifs) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getSavedGifs#83bf3d52 hash:int = messages.SavedGifs;
type TLMessagesGetSavedGifs struct {
	Hash int32 `protobuf:"varint,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *TLMessagesGetSavedGifs) Reset()                    { *m = TLMessagesGetSavedGifs{} }
func (m *TLMessagesGetSavedGifs) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetSavedGifs) ProtoMessage()               {}
func (*TLMessagesGetSavedGifs) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{118} }

func (m *TLMessagesGetSavedGifs) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.saveGif#327a30cb id:InputDocument unsave:Bool = Bool;
type TLMessagesSaveGif struct {
	Id     *InputDocument `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Unsave *Bool          `protobuf:"bytes,2,opt,name=unsave" json:"unsave,omitempty"`
}

func (m *TLMessagesSaveGif) Reset()                    { *m = TLMessagesSaveGif{} }
func (m *TLMessagesSaveGif) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesSaveGif) ProtoMessage()               {}
func (*TLMessagesSaveGif) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{119} }

func (m *TLMessagesSaveGif) GetId() *InputDocument {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLMessagesSaveGif) GetUnsave() *Bool {
	if m != nil {
		return m.Unsave
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getInlineBotResults#514e999d flags:# bot:InputUser peer:InputPeer geo_point:flags.0?InputGeoPoint query:string offset:string = messages.BotResults;
type TLMessagesGetInlineBotResults struct {
	Bot      *InputUser     `protobuf:"bytes,2,opt,name=bot" json:"bot,omitempty"`
	Peer     *InputPeer     `protobuf:"bytes,3,opt,name=peer" json:"peer,omitempty"`
	GeoPoint *InputGeoPoint `protobuf:"bytes,4,opt,name=geo_point,json=geoPoint" json:"geo_point,omitempty"`
	Query    string         `protobuf:"bytes,5,opt,name=query" json:"query,omitempty"`
	Offset   string         `protobuf:"bytes,6,opt,name=offset" json:"offset,omitempty"`
}

func (m *TLMessagesGetInlineBotResults) Reset()                    { *m = TLMessagesGetInlineBotResults{} }
func (m *TLMessagesGetInlineBotResults) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetInlineBotResults) ProtoMessage()               {}
func (*TLMessagesGetInlineBotResults) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{120} }

func (m *TLMessagesGetInlineBotResults) GetBot() *InputUser {
	if m != nil {
		return m.Bot
	}
	return nil
}

func (m *TLMessagesGetInlineBotResults) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetInlineBotResults) GetGeoPoint() *InputGeoPoint {
	if m != nil {
		return m.GeoPoint
	}
	return nil
}

func (m *TLMessagesGetInlineBotResults) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *TLMessagesGetInlineBotResults) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// messages.setInlineBotResults#eb5ea206 flags:# gallery:flags.0?true private:flags.1?true query_id:long results:Vector<InputBotInlineResult> cache_time:int next_offset:flags.2?string switch_pm:flags.3?InlineBotSwitchPM = Bool;
type TLMessagesSetInlineBotResults struct {
	Gallery    bool                    `protobuf:"varint,2,opt,name=gallery" json:"gallery,omitempty"`
	Private    bool                    `protobuf:"varint,3,opt,name=private" json:"private,omitempty"`
	QueryId    int64                   `protobuf:"varint,4,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	Results    []*InputBotInlineResult `protobuf:"bytes,5,rep,name=results" json:"results,omitempty"`
	CacheTime  int32                   `protobuf:"varint,6,opt,name=cache_time,json=cacheTime" json:"cache_time,omitempty"`
	NextOffset string                  `protobuf:"bytes,7,opt,name=next_offset,json=nextOffset" json:"next_offset,omitempty"`
	SwitchPm   *InlineBotSwitchPM      `protobuf:"bytes,8,opt,name=switch_pm,json=switchPm" json:"switch_pm,omitempty"`
}

func (m *TLMessagesSetInlineBotResults) Reset()                    { *m = TLMessagesSetInlineBotResults{} }
func (m *TLMessagesSetInlineBotResults) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesSetInlineBotResults) ProtoMessage()               {}
func (*TLMessagesSetInlineBotResults) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{121} }

func (m *TLMessagesSetInlineBotResults) GetGallery() bool {
	if m != nil {
		return m.Gallery
	}
	return false
}

func (m *TLMessagesSetInlineBotResults) GetPrivate() bool {
	if m != nil {
		return m.Private
	}
	return false
}

func (m *TLMessagesSetInlineBotResults) GetQueryId() int64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *TLMessagesSetInlineBotResults) GetResults() []*InputBotInlineResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *TLMessagesSetInlineBotResults) GetCacheTime() int32 {
	if m != nil {
		return m.CacheTime
	}
	return 0
}

func (m *TLMessagesSetInlineBotResults) GetNextOffset() string {
	if m != nil {
		return m.NextOffset
	}
	return ""
}

func (m *TLMessagesSetInlineBotResults) GetSwitchPm() *InlineBotSwitchPM {
	if m != nil {
		return m.SwitchPm
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.sendInlineBotResult#b16e06fe flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int random_id:long query_id:long id:string = Updates;
type TLMessagesSendInlineBotResult struct {
	Silent       bool       `protobuf:"varint,2,opt,name=silent" json:"silent,omitempty"`
	Background   bool       `protobuf:"varint,3,opt,name=background" json:"background,omitempty"`
	ClearDraft   bool       `protobuf:"varint,4,opt,name=clear_draft,json=clearDraft" json:"clear_draft,omitempty"`
	Peer         *InputPeer `protobuf:"bytes,5,opt,name=peer" json:"peer,omitempty"`
	ReplyToMsgId int32      `protobuf:"varint,6,opt,name=reply_to_msg_id,json=replyToMsgId" json:"reply_to_msg_id,omitempty"`
	RandomId     int64      `protobuf:"varint,7,opt,name=random_id,json=randomId" json:"random_id,omitempty"`
	QueryId      int64      `protobuf:"varint,8,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	Id           string     `protobuf:"bytes,9,opt,name=id" json:"id,omitempty"`
}

func (m *TLMessagesSendInlineBotResult) Reset()                    { *m = TLMessagesSendInlineBotResult{} }
func (m *TLMessagesSendInlineBotResult) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesSendInlineBotResult) ProtoMessage()               {}
func (*TLMessagesSendInlineBotResult) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{122} }

func (m *TLMessagesSendInlineBotResult) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *TLMessagesSendInlineBotResult) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *TLMessagesSendInlineBotResult) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *TLMessagesSendInlineBotResult) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendInlineBotResult) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *TLMessagesSendInlineBotResult) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesSendInlineBotResult) GetQueryId() int64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *TLMessagesSendInlineBotResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getMessageEditData#fda68d36 peer:InputPeer id:int = messages.MessageEditData;
type TLMessagesGetMessageEditData struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Id   int32      `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *TLMessagesGetMessageEditData) Reset()                    { *m = TLMessagesGetMessageEditData{} }
func (m *TLMessagesGetMessageEditData) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetMessageEditData) ProtoMessage()               {}
func (*TLMessagesGetMessageEditData) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{123} }

func (m *TLMessagesGetMessageEditData) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetMessageEditData) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.editMessage#ce91e4ca flags:# no_webpage:flags.1?true peer:InputPeer id:int message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
type TLMessagesEditMessage struct {
	NoWebpage   bool             `protobuf:"varint,2,opt,name=no_webpage,json=noWebpage" json:"no_webpage,omitempty"`
	Peer        *InputPeer       `protobuf:"bytes,3,opt,name=peer" json:"peer,omitempty"`
	Id          int32            `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
	Message     string           `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
	ReplyMarkup *ReplyMarkup     `protobuf:"bytes,6,opt,name=reply_markup,json=replyMarkup" json:"reply_markup,omitempty"`
	Entities    []*MessageEntity `protobuf:"bytes,7,rep,name=entities" json:"entities,omitempty"`
}

func (m *TLMessagesEditMessage) Reset()                    { *m = TLMessagesEditMessage{} }
func (m *TLMessagesEditMessage) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesEditMessage) ProtoMessage()               {}
func (*TLMessagesEditMessage) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{124} }

func (m *TLMessagesEditMessage) GetNoWebpage() bool {
	if m != nil {
		return m.NoWebpage
	}
	return false
}

func (m *TLMessagesEditMessage) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesEditMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TLMessagesEditMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TLMessagesEditMessage) GetReplyMarkup() *ReplyMarkup {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *TLMessagesEditMessage) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.editInlineBotMessage#130c2c85 flags:# no_webpage:flags.1?true id:InputBotInlineMessageID message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Bool;
type TLMessagesEditInlineBotMessage struct {
	NoWebpage   bool                     `protobuf:"varint,2,opt,name=no_webpage,json=noWebpage" json:"no_webpage,omitempty"`
	Id          *InputBotInlineMessageID `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Message     string                   `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	ReplyMarkup *ReplyMarkup             `protobuf:"bytes,5,opt,name=reply_markup,json=replyMarkup" json:"reply_markup,omitempty"`
	Entities    []*MessageEntity         `protobuf:"bytes,6,rep,name=entities" json:"entities,omitempty"`
}

func (m *TLMessagesEditInlineBotMessage) Reset()         { *m = TLMessagesEditInlineBotMessage{} }
func (m *TLMessagesEditInlineBotMessage) String() string { return proto.CompactTextString(m) }
func (*TLMessagesEditInlineBotMessage) ProtoMessage()    {}
func (*TLMessagesEditInlineBotMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{125}
}

func (m *TLMessagesEditInlineBotMessage) GetNoWebpage() bool {
	if m != nil {
		return m.NoWebpage
	}
	return false
}

func (m *TLMessagesEditInlineBotMessage) GetId() *InputBotInlineMessageID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLMessagesEditInlineBotMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TLMessagesEditInlineBotMessage) GetReplyMarkup() *ReplyMarkup {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *TLMessagesEditInlineBotMessage) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getBotCallbackAnswer#810a9fec flags:# game:flags.1?true peer:InputPeer msg_id:int data:flags.0?bytes = messages.BotCallbackAnswer;
type TLMessagesGetBotCallbackAnswer struct {
	Game  bool       `protobuf:"varint,2,opt,name=game" json:"game,omitempty"`
	Peer  *InputPeer `protobuf:"bytes,3,opt,name=peer" json:"peer,omitempty"`
	MsgId int32      `protobuf:"varint,4,opt,name=msg_id,json=msgId" json:"msg_id,omitempty"`
	Data  []byte     `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TLMessagesGetBotCallbackAnswer) Reset()         { *m = TLMessagesGetBotCallbackAnswer{} }
func (m *TLMessagesGetBotCallbackAnswer) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetBotCallbackAnswer) ProtoMessage()    {}
func (*TLMessagesGetBotCallbackAnswer) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{126}
}

func (m *TLMessagesGetBotCallbackAnswer) GetGame() bool {
	if m != nil {
		return m.Game
	}
	return false
}

func (m *TLMessagesGetBotCallbackAnswer) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetBotCallbackAnswer) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *TLMessagesGetBotCallbackAnswer) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.setBotCallbackAnswer#d58f130a flags:# alert:flags.1?true query_id:long message:flags.0?string url:flags.2?string cache_time:int = Bool;
type TLMessagesSetBotCallbackAnswer struct {
	Alert     bool   `protobuf:"varint,2,opt,name=alert" json:"alert,omitempty"`
	QueryId   int64  `protobuf:"varint,3,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	Message   string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Url       string `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	CacheTime int32  `protobuf:"varint,6,opt,name=cache_time,json=cacheTime" json:"cache_time,omitempty"`
}

func (m *TLMessagesSetBotCallbackAnswer) Reset()         { *m = TLMessagesSetBotCallbackAnswer{} }
func (m *TLMessagesSetBotCallbackAnswer) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSetBotCallbackAnswer) ProtoMessage()    {}
func (*TLMessagesSetBotCallbackAnswer) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{127}
}

func (m *TLMessagesSetBotCallbackAnswer) GetAlert() bool {
	if m != nil {
		return m.Alert
	}
	return false
}

func (m *TLMessagesSetBotCallbackAnswer) GetQueryId() int64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *TLMessagesSetBotCallbackAnswer) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TLMessagesSetBotCallbackAnswer) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *TLMessagesSetBotCallbackAnswer) GetCacheTime() int32 {
	if m != nil {
		return m.CacheTime
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getPeerDialogs#2d9776b9 peers:Vector<InputPeer> = messages.PeerDialogs;
type TLMessagesGetPeerDialogs struct {
	Peers []*InputPeer `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *TLMessagesGetPeerDialogs) Reset()                    { *m = TLMessagesGetPeerDialogs{} }
func (m *TLMessagesGetPeerDialogs) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetPeerDialogs) ProtoMessage()               {}
func (*TLMessagesGetPeerDialogs) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{128} }

func (m *TLMessagesGetPeerDialogs) GetPeers() []*InputPeer {
	if m != nil {
		return m.Peers
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.saveDraft#bc39e14b flags:# no_webpage:flags.1?true reply_to_msg_id:flags.0?int peer:InputPeer message:string entities:flags.3?Vector<MessageEntity> = Bool;
type TLMessagesSaveDraft struct {
	NoWebpage    bool             `protobuf:"varint,2,opt,name=no_webpage,json=noWebpage" json:"no_webpage,omitempty"`
	ReplyToMsgId int32            `protobuf:"varint,3,opt,name=reply_to_msg_id,json=replyToMsgId" json:"reply_to_msg_id,omitempty"`
	Peer         *InputPeer       `protobuf:"bytes,4,opt,name=peer" json:"peer,omitempty"`
	Message      string           `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
	Entities     []*MessageEntity `protobuf:"bytes,6,rep,name=entities" json:"entities,omitempty"`
}

func (m *TLMessagesSaveDraft) Reset()                    { *m = TLMessagesSaveDraft{} }
func (m *TLMessagesSaveDraft) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesSaveDraft) ProtoMessage()               {}
func (*TLMessagesSaveDraft) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{129} }

func (m *TLMessagesSaveDraft) GetNoWebpage() bool {
	if m != nil {
		return m.NoWebpage
	}
	return false
}

func (m *TLMessagesSaveDraft) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *TLMessagesSaveDraft) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSaveDraft) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TLMessagesSaveDraft) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getAllDrafts#6a3f8d65 = Updates;
type TLMessagesGetAllDrafts struct {
}

func (m *TLMessagesGetAllDrafts) Reset()                    { *m = TLMessagesGetAllDrafts{} }
func (m *TLMessagesGetAllDrafts) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetAllDrafts) ProtoMessage()               {}
func (*TLMessagesGetAllDrafts) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{130} }

// /////////////////////////////////////////////////////////////////////////////
// messages.getFeaturedStickers#2dacca4f hash:int = messages.FeaturedStickers;
type TLMessagesGetFeaturedStickers struct {
	Hash int32 `protobuf:"varint,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *TLMessagesGetFeaturedStickers) Reset()                    { *m = TLMessagesGetFeaturedStickers{} }
func (m *TLMessagesGetFeaturedStickers) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetFeaturedStickers) ProtoMessage()               {}
func (*TLMessagesGetFeaturedStickers) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{131} }

func (m *TLMessagesGetFeaturedStickers) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.readFeaturedStickers#5b118126 id:Vector<long> = Bool;
type TLMessagesReadFeaturedStickers struct {
	Id []int64 `protobuf:"varint,1,rep,packed,name=id" json:"id,omitempty"`
}

func (m *TLMessagesReadFeaturedStickers) Reset()         { *m = TLMessagesReadFeaturedStickers{} }
func (m *TLMessagesReadFeaturedStickers) String() string { return proto.CompactTextString(m) }
func (*TLMessagesReadFeaturedStickers) ProtoMessage()    {}
func (*TLMessagesReadFeaturedStickers) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{132}
}

func (m *TLMessagesReadFeaturedStickers) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getRecentStickers#5ea192c9 flags:# attached:flags.0?true hash:int = messages.RecentStickers;
type TLMessagesGetRecentStickers struct {
	Attached bool  `protobuf:"varint,2,opt,name=attached" json:"attached,omitempty"`
	Hash     int32 `protobuf:"varint,3,opt,name=hash" json:"hash,omitempty"`
}

func (m *TLMessagesGetRecentStickers) Reset()                    { *m = TLMessagesGetRecentStickers{} }
func (m *TLMessagesGetRecentStickers) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetRecentStickers) ProtoMessage()               {}
func (*TLMessagesGetRecentStickers) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{133} }

func (m *TLMessagesGetRecentStickers) GetAttached() bool {
	if m != nil {
		return m.Attached
	}
	return false
}

func (m *TLMessagesGetRecentStickers) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.saveRecentSticker#392718f8 flags:# attached:flags.0?true id:InputDocument unsave:Bool = Bool;
type TLMessagesSaveRecentSticker struct {
	Attached bool           `protobuf:"varint,2,opt,name=attached" json:"attached,omitempty"`
	Id       *InputDocument `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Unsave   *Bool          `protobuf:"bytes,4,opt,name=unsave" json:"unsave,omitempty"`
}

func (m *TLMessagesSaveRecentSticker) Reset()                    { *m = TLMessagesSaveRecentSticker{} }
func (m *TLMessagesSaveRecentSticker) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesSaveRecentSticker) ProtoMessage()               {}
func (*TLMessagesSaveRecentSticker) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{134} }

func (m *TLMessagesSaveRecentSticker) GetAttached() bool {
	if m != nil {
		return m.Attached
	}
	return false
}

func (m *TLMessagesSaveRecentSticker) GetId() *InputDocument {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLMessagesSaveRecentSticker) GetUnsave() *Bool {
	if m != nil {
		return m.Unsave
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.clearRecentStickers#8999602d flags:# attached:flags.0?true = Bool;
type TLMessagesClearRecentStickers struct {
	Attached bool `protobuf:"varint,2,opt,name=attached" json:"attached,omitempty"`
}

func (m *TLMessagesClearRecentStickers) Reset()                    { *m = TLMessagesClearRecentStickers{} }
func (m *TLMessagesClearRecentStickers) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesClearRecentStickers) ProtoMessage()               {}
func (*TLMessagesClearRecentStickers) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{135} }

func (m *TLMessagesClearRecentStickers) GetAttached() bool {
	if m != nil {
		return m.Attached
	}
	return false
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getArchivedStickers#57f17692 flags:# masks:flags.0?true offset_id:long limit:int = messages.ArchivedStickers;
type TLMessagesGetArchivedStickers struct {
	Masks    bool  `protobuf:"varint,2,opt,name=masks" json:"masks,omitempty"`
	OffsetId int64 `protobuf:"varint,3,opt,name=offset_id,json=offsetId" json:"offset_id,omitempty"`
	Limit    int32 `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
}

func (m *TLMessagesGetArchivedStickers) Reset()                    { *m = TLMessagesGetArchivedStickers{} }
func (m *TLMessagesGetArchivedStickers) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetArchivedStickers) ProtoMessage()               {}
func (*TLMessagesGetArchivedStickers) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{136} }

func (m *TLMessagesGetArchivedStickers) GetMasks() bool {
	if m != nil {
		return m.Masks
	}
	return false
}

func (m *TLMessagesGetArchivedStickers) GetOffsetId() int64 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *TLMessagesGetArchivedStickers) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getMaskStickers#65b8c79f hash:int = messages.AllStickers;
type TLMessagesGetMaskStickers struct {
	Hash int32 `protobuf:"varint,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *TLMessagesGetMaskStickers) Reset()                    { *m = TLMessagesGetMaskStickers{} }
func (m *TLMessagesGetMaskStickers) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetMaskStickers) ProtoMessage()               {}
func (*TLMessagesGetMaskStickers) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{137} }

func (m *TLMessagesGetMaskStickers) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getAttachedStickers#cc5b67cc media:InputStickeredMedia = Vector<StickerSetCovered>;
type TLMessagesGetAttachedStickers struct {
	Media *InputStickeredMedia `protobuf:"bytes,1,opt,name=media" json:"media,omitempty"`
}

func (m *TLMessagesGetAttachedStickers) Reset()                    { *m = TLMessagesGetAttachedStickers{} }
func (m *TLMessagesGetAttachedStickers) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetAttachedStickers) ProtoMessage()               {}
func (*TLMessagesGetAttachedStickers) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{138} }

func (m *TLMessagesGetAttachedStickers) GetMedia() *InputStickeredMedia {
	if m != nil {
		return m.Media
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.setGameScore#8ef8ecc0 flags:# edit_message:flags.0?true force:flags.1?true peer:InputPeer id:int user_id:InputUser score:int = Updates;
type TLMessagesSetGameScore struct {
	EditMessage bool       `protobuf:"varint,2,opt,name=edit_message,json=editMessage" json:"edit_message,omitempty"`
	Force       bool       `protobuf:"varint,3,opt,name=force" json:"force,omitempty"`
	Peer        *InputPeer `protobuf:"bytes,4,opt,name=peer" json:"peer,omitempty"`
	Id          int32      `protobuf:"varint,5,opt,name=id" json:"id,omitempty"`
	UserId      *InputUser `protobuf:"bytes,6,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Score       int32      `protobuf:"varint,7,opt,name=score" json:"score,omitempty"`
}

func (m *TLMessagesSetGameScore) Reset()                    { *m = TLMessagesSetGameScore{} }
func (m *TLMessagesSetGameScore) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesSetGameScore) ProtoMessage()               {}
func (*TLMessagesSetGameScore) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{139} }

func (m *TLMessagesSetGameScore) GetEditMessage() bool {
	if m != nil {
		return m.EditMessage
	}
	return false
}

func (m *TLMessagesSetGameScore) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *TLMessagesSetGameScore) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSetGameScore) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TLMessagesSetGameScore) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLMessagesSetGameScore) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.setInlineGameScore#15ad9f64 flags:# edit_message:flags.0?true force:flags.1?true id:InputBotInlineMessageID user_id:InputUser score:int = Bool;
type TLMessagesSetInlineGameScore struct {
	EditMessage bool                     `protobuf:"varint,2,opt,name=edit_message,json=editMessage" json:"edit_message,omitempty"`
	Force       bool                     `protobuf:"varint,3,opt,name=force" json:"force,omitempty"`
	Id          *InputBotInlineMessageID `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	UserId      *InputUser               `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Score       int32                    `protobuf:"varint,6,opt,name=score" json:"score,omitempty"`
}

func (m *TLMessagesSetInlineGameScore) Reset()                    { *m = TLMessagesSetInlineGameScore{} }
func (m *TLMessagesSetInlineGameScore) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesSetInlineGameScore) ProtoMessage()               {}
func (*TLMessagesSetInlineGameScore) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{140} }

func (m *TLMessagesSetInlineGameScore) GetEditMessage() bool {
	if m != nil {
		return m.EditMessage
	}
	return false
}

func (m *TLMessagesSetInlineGameScore) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *TLMessagesSetInlineGameScore) GetId() *InputBotInlineMessageID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLMessagesSetInlineGameScore) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLMessagesSetInlineGameScore) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getGameHighScores#e822649d peer:InputPeer id:int user_id:InputUser = messages.HighScores;
type TLMessagesGetGameHighScores struct {
	Peer   *InputPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Id     int32      `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	UserId *InputUser `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *TLMessagesGetGameHighScores) Reset()                    { *m = TLMessagesGetGameHighScores{} }
func (m *TLMessagesGetGameHighScores) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetGameHighScores) ProtoMessage()               {}
func (*TLMessagesGetGameHighScores) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{141} }

func (m *TLMessagesGetGameHighScores) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetGameHighScores) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TLMessagesGetGameHighScores) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getInlineGameHighScores#f635e1b id:InputBotInlineMessageID user_id:InputUser = messages.HighScores;
type TLMessagesGetInlineGameHighScores struct {
	Id     *InputBotInlineMessageID `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	UserId *InputUser               `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *TLMessagesGetInlineGameHighScores) Reset()         { *m = TLMessagesGetInlineGameHighScores{} }
func (m *TLMessagesGetInlineGameHighScores) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetInlineGameHighScores) ProtoMessage()    {}
func (*TLMessagesGetInlineGameHighScores) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{142}
}

func (m *TLMessagesGetInlineGameHighScores) GetId() *InputBotInlineMessageID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLMessagesGetInlineGameHighScores) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getCommonChats#d0a48c4 user_id:InputUser max_id:int limit:int = messages.Chats;
type TLMessagesGetCommonChats struct {
	UserId *InputUser `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	MaxId  int32      `protobuf:"varint,2,opt,name=max_id,json=maxId" json:"max_id,omitempty"`
	Limit  int32      `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
}

func (m *TLMessagesGetCommonChats) Reset()                    { *m = TLMessagesGetCommonChats{} }
func (m *TLMessagesGetCommonChats) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetCommonChats) ProtoMessage()               {}
func (*TLMessagesGetCommonChats) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{143} }

func (m *TLMessagesGetCommonChats) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLMessagesGetCommonChats) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *TLMessagesGetCommonChats) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getAllChats#eba80ff0 except_ids:Vector<int> = messages.Chats;
type TLMessagesGetAllChats struct {
	ExceptIds []int32 `protobuf:"varint,1,rep,packed,name=except_ids,json=exceptIds" json:"except_ids,omitempty"`
}

func (m *TLMessagesGetAllChats) Reset()                    { *m = TLMessagesGetAllChats{} }
func (m *TLMessagesGetAllChats) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetAllChats) ProtoMessage()               {}
func (*TLMessagesGetAllChats) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{144} }

func (m *TLMessagesGetAllChats) GetExceptIds() []int32 {
	if m != nil {
		return m.ExceptIds
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getWebPage#32ca8f91 url:string hash:int = WebPage;
type TLMessagesGetWebPage struct {
	Url  string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Hash int32  `protobuf:"varint,2,opt,name=hash" json:"hash,omitempty"`
}

func (m *TLMessagesGetWebPage) Reset()                    { *m = TLMessagesGetWebPage{} }
func (m *TLMessagesGetWebPage) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetWebPage) ProtoMessage()               {}
func (*TLMessagesGetWebPage) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{145} }

func (m *TLMessagesGetWebPage) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *TLMessagesGetWebPage) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.toggleDialogPin#3289be6a flags:# pinned:flags.0?true peer:InputPeer = Bool;
type TLMessagesToggleDialogPin struct {
	Pinned bool       `protobuf:"varint,2,opt,name=pinned" json:"pinned,omitempty"`
	Peer   *InputPeer `protobuf:"bytes,3,opt,name=peer" json:"peer,omitempty"`
}

func (m *TLMessagesToggleDialogPin) Reset()                    { *m = TLMessagesToggleDialogPin{} }
func (m *TLMessagesToggleDialogPin) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesToggleDialogPin) ProtoMessage()               {}
func (*TLMessagesToggleDialogPin) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{146} }

func (m *TLMessagesToggleDialogPin) GetPinned() bool {
	if m != nil {
		return m.Pinned
	}
	return false
}

func (m *TLMessagesToggleDialogPin) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.reorderPinnedDialogs#959ff644 flags:# force:flags.0?true order:Vector<InputPeer> = Bool;
type TLMessagesReorderPinnedDialogs struct {
	Force bool         `protobuf:"varint,2,opt,name=force" json:"force,omitempty"`
	Order []*InputPeer `protobuf:"bytes,3,rep,name=order" json:"order,omitempty"`
}

func (m *TLMessagesReorderPinnedDialogs) Reset()         { *m = TLMessagesReorderPinnedDialogs{} }
func (m *TLMessagesReorderPinnedDialogs) String() string { return proto.CompactTextString(m) }
func (*TLMessagesReorderPinnedDialogs) ProtoMessage()    {}
func (*TLMessagesReorderPinnedDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{147}
}

func (m *TLMessagesReorderPinnedDialogs) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *TLMessagesReorderPinnedDialogs) GetOrder() []*InputPeer {
	if m != nil {
		return m.Order
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getPinnedDialogs#e254d64e = messages.PeerDialogs;
type TLMessagesGetPinnedDialogs struct {
}

func (m *TLMessagesGetPinnedDialogs) Reset()                    { *m = TLMessagesGetPinnedDialogs{} }
func (m *TLMessagesGetPinnedDialogs) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetPinnedDialogs) ProtoMessage()               {}
func (*TLMessagesGetPinnedDialogs) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{148} }

// /////////////////////////////////////////////////////////////////////////////
// messages.setBotShippingResults#e5f672fa flags:# query_id:long error:flags.0?string shipping_options:flags.1?Vector<ShippingOption> = Bool;
type TLMessagesSetBotShippingResults struct {
	QueryId         int64             `protobuf:"varint,2,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	Error           string            `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	ShippingOptions []*ShippingOption `protobuf:"bytes,4,rep,name=shipping_options,json=shippingOptions" json:"shipping_options,omitempty"`
}

func (m *TLMessagesSetBotShippingResults) Reset()         { *m = TLMessagesSetBotShippingResults{} }
func (m *TLMessagesSetBotShippingResults) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSetBotShippingResults) ProtoMessage()    {}
func (*TLMessagesSetBotShippingResults) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{149}
}

func (m *TLMessagesSetBotShippingResults) GetQueryId() int64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *TLMessagesSetBotShippingResults) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *TLMessagesSetBotShippingResults) GetShippingOptions() []*ShippingOption {
	if m != nil {
		return m.ShippingOptions
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.setBotPrecheckoutResults#9c2dd95 flags:# success:flags.1?true query_id:long error:flags.0?string = Bool;
type TLMessagesSetBotPrecheckoutResults struct {
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	QueryId int64  `protobuf:"varint,3,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	Error   string `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (m *TLMessagesSetBotPrecheckoutResults) Reset()         { *m = TLMessagesSetBotPrecheckoutResults{} }
func (m *TLMessagesSetBotPrecheckoutResults) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSetBotPrecheckoutResults) ProtoMessage()    {}
func (*TLMessagesSetBotPrecheckoutResults) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{150}
}

func (m *TLMessagesSetBotPrecheckoutResults) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *TLMessagesSetBotPrecheckoutResults) GetQueryId() int64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *TLMessagesSetBotPrecheckoutResults) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// messages.uploadMedia#519bc2b1 peer:InputPeer media:InputMedia = MessageMedia;
type TLMessagesUploadMedia struct {
	Peer  *InputPeer  `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Media *InputMedia `protobuf:"bytes,2,opt,name=media" json:"media,omitempty"`
}

func (m *TLMessagesUploadMedia) Reset()                    { *m = TLMessagesUploadMedia{} }
func (m *TLMessagesUploadMedia) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesUploadMedia) ProtoMessage()               {}
func (*TLMessagesUploadMedia) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{151} }

func (m *TLMessagesUploadMedia) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesUploadMedia) GetMedia() *InputMedia {
	if m != nil {
		return m.Media
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.sendScreenshotNotification#c97df020 peer:InputPeer reply_to_msg_id:int random_id:long = Updates;
type TLMessagesSendScreenshotNotification struct {
	Peer         *InputPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	ReplyToMsgId int32      `protobuf:"varint,2,opt,name=reply_to_msg_id,json=replyToMsgId" json:"reply_to_msg_id,omitempty"`
	RandomId     int64      `protobuf:"varint,3,opt,name=random_id,json=randomId" json:"random_id,omitempty"`
}

func (m *TLMessagesSendScreenshotNotification) Reset()         { *m = TLMessagesSendScreenshotNotification{} }
func (m *TLMessagesSendScreenshotNotification) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSendScreenshotNotification) ProtoMessage()    {}
func (*TLMessagesSendScreenshotNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{152}
}

func (m *TLMessagesSendScreenshotNotification) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendScreenshotNotification) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *TLMessagesSendScreenshotNotification) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getFavedStickers#21ce0b0e hash:int = messages.FavedStickers;
type TLMessagesGetFavedStickers struct {
	Hash int32 `protobuf:"varint,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *TLMessagesGetFavedStickers) Reset()                    { *m = TLMessagesGetFavedStickers{} }
func (m *TLMessagesGetFavedStickers) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetFavedStickers) ProtoMessage()               {}
func (*TLMessagesGetFavedStickers) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{153} }

func (m *TLMessagesGetFavedStickers) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// messages.faveSticker#b9ffc55b id:InputDocument unfave:Bool = Bool;
type TLMessagesFaveSticker struct {
	Id     *InputDocument `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Unfave *Bool          `protobuf:"bytes,2,opt,name=unfave" json:"unfave,omitempty"`
}

func (m *TLMessagesFaveSticker) Reset()                    { *m = TLMessagesFaveSticker{} }
func (m *TLMessagesFaveSticker) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesFaveSticker) ProtoMessage()               {}
func (*TLMessagesFaveSticker) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{154} }

func (m *TLMessagesFaveSticker) GetId() *InputDocument {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLMessagesFaveSticker) GetUnfave() *Bool {
	if m != nil {
		return m.Unfave
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// messages.getUnreadMentions#46578472 peer:InputPeer offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
type TLMessagesGetUnreadMentions struct {
	Peer      *InputPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	OffsetId  int32      `protobuf:"varint,2,opt,name=offset_id,json=offsetId" json:"offset_id,omitempty"`
	AddOffset int32      `protobuf:"varint,3,opt,name=add_offset,json=addOffset" json:"add_offset,omitempty"`
	Limit     int32      `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	MaxId     int32      `protobuf:"varint,5,opt,name=max_id,json=maxId" json:"max_id,omitempty"`
	MinId     int32      `protobuf:"varint,6,opt,name=min_id,json=minId" json:"min_id,omitempty"`
}

func (m *TLMessagesGetUnreadMentions) Reset()                    { *m = TLMessagesGetUnreadMentions{} }
func (m *TLMessagesGetUnreadMentions) String() string            { return proto.CompactTextString(m) }
func (*TLMessagesGetUnreadMentions) ProtoMessage()               {}
func (*TLMessagesGetUnreadMentions) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{155} }

func (m *TLMessagesGetUnreadMentions) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetUnreadMentions) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *TLMessagesGetUnreadMentions) GetAddOffset() int32 {
	if m != nil {
		return m.AddOffset
	}
	return 0
}

func (m *TLMessagesGetUnreadMentions) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TLMessagesGetUnreadMentions) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *TLMessagesGetUnreadMentions) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// updates.getState#edd4882a = updates.State;
type TLUpdatesGetState struct {
}

func (m *TLUpdatesGetState) Reset()                    { *m = TLUpdatesGetState{} }
func (m *TLUpdatesGetState) String() string            { return proto.CompactTextString(m) }
func (*TLUpdatesGetState) ProtoMessage()               {}
func (*TLUpdatesGetState) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{156} }

// /////////////////////////////////////////////////////////////////////////////
// updates.getDifference#25939651 flags:# pts:int pts_total_limit:flags.0?int date:int qts:int = updates.Difference;
type TLUpdatesGetDifference struct {
	Pts           int32 `protobuf:"varint,2,opt,name=pts" json:"pts,omitempty"`
	PtsTotalLimit int32 `protobuf:"varint,3,opt,name=pts_total_limit,json=ptsTotalLimit" json:"pts_total_limit,omitempty"`
	Date          int32 `protobuf:"varint,4,opt,name=date" json:"date,omitempty"`
	Qts           int32 `protobuf:"varint,5,opt,name=qts" json:"qts,omitempty"`
}

func (m *TLUpdatesGetDifference) Reset()                    { *m = TLUpdatesGetDifference{} }
func (m *TLUpdatesGetDifference) String() string            { return proto.CompactTextString(m) }
func (*TLUpdatesGetDifference) ProtoMessage()               {}
func (*TLUpdatesGetDifference) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{157} }

func (m *TLUpdatesGetDifference) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *TLUpdatesGetDifference) GetPtsTotalLimit() int32 {
	if m != nil {
		return m.PtsTotalLimit
	}
	return 0
}

func (m *TLUpdatesGetDifference) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *TLUpdatesGetDifference) GetQts() int32 {
	if m != nil {
		return m.Qts
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// updates.getChannelDifference#3173d78 flags:# force:flags.0?true channel:InputChannel filter:ChannelMessagesFilter pts:int limit:int = updates.ChannelDifference;
type TLUpdatesGetChannelDifference struct {
	Force   bool                   `protobuf:"varint,2,opt,name=force" json:"force,omitempty"`
	Channel *InputChannel          `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
	Filter  *ChannelMessagesFilter `protobuf:"bytes,4,opt,name=filter" json:"filter,omitempty"`
	Pts     int32                  `protobuf:"varint,5,opt,name=pts" json:"pts,omitempty"`
	Limit   int32                  `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
}

func (m *TLUpdatesGetChannelDifference) Reset()                    { *m = TLUpdatesGetChannelDifference{} }
func (m *TLUpdatesGetChannelDifference) String() string            { return proto.CompactTextString(m) }
func (*TLUpdatesGetChannelDifference) ProtoMessage()               {}
func (*TLUpdatesGetChannelDifference) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{158} }

func (m *TLUpdatesGetChannelDifference) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *TLUpdatesGetChannelDifference) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLUpdatesGetChannelDifference) GetFilter() *ChannelMessagesFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *TLUpdatesGetChannelDifference) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *TLUpdatesGetChannelDifference) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// photos.updateProfilePhoto#f0bb5152 id:InputPhoto = UserProfilePhoto;
type TLPhotosUpdateProfilePhoto struct {
	Id *InputPhoto `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *TLPhotosUpdateProfilePhoto) Reset()                    { *m = TLPhotosUpdateProfilePhoto{} }
func (m *TLPhotosUpdateProfilePhoto) String() string            { return proto.CompactTextString(m) }
func (*TLPhotosUpdateProfilePhoto) ProtoMessage()               {}
func (*TLPhotosUpdateProfilePhoto) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{159} }

func (m *TLPhotosUpdateProfilePhoto) GetId() *InputPhoto {
	if m != nil {
		return m.Id
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// photos.uploadProfilePhoto#4f32c098 file:InputFile = photos.Photo;
type TLPhotosUploadProfilePhoto struct {
	File *InputFile `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
}

func (m *TLPhotosUploadProfilePhoto) Reset()                    { *m = TLPhotosUploadProfilePhoto{} }
func (m *TLPhotosUploadProfilePhoto) String() string            { return proto.CompactTextString(m) }
func (*TLPhotosUploadProfilePhoto) ProtoMessage()               {}
func (*TLPhotosUploadProfilePhoto) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{160} }

func (m *TLPhotosUploadProfilePhoto) GetFile() *InputFile {
	if m != nil {
		return m.File
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// photos.deletePhotos#87cf7f2f id:Vector<InputPhoto> = Vector<long>;
type TLPhotosDeletePhotos struct {
	Id []*InputPhoto `protobuf:"bytes,1,rep,name=id" json:"id,omitempty"`
}

func (m *TLPhotosDeletePhotos) Reset()                    { *m = TLPhotosDeletePhotos{} }
func (m *TLPhotosDeletePhotos) String() string            { return proto.CompactTextString(m) }
func (*TLPhotosDeletePhotos) ProtoMessage()               {}
func (*TLPhotosDeletePhotos) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{161} }

func (m *TLPhotosDeletePhotos) GetId() []*InputPhoto {
	if m != nil {
		return m.Id
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// photos.getUserPhotos#91cd32a8 user_id:InputUser offset:int max_id:long limit:int = photos.Photos;
type TLPhotosGetUserPhotos struct {
	UserId *InputUser `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Offset int32      `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	MaxId  int64      `protobuf:"varint,3,opt,name=max_id,json=maxId" json:"max_id,omitempty"`
	Limit  int32      `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
}

func (m *TLPhotosGetUserPhotos) Reset()                    { *m = TLPhotosGetUserPhotos{} }
func (m *TLPhotosGetUserPhotos) String() string            { return proto.CompactTextString(m) }
func (*TLPhotosGetUserPhotos) ProtoMessage()               {}
func (*TLPhotosGetUserPhotos) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{162} }

func (m *TLPhotosGetUserPhotos) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLPhotosGetUserPhotos) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TLPhotosGetUserPhotos) GetMaxId() int64 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *TLPhotosGetUserPhotos) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// upload.saveFilePart#b304a621 file_id:long file_part:int bytes:bytes = Bool;
type TLUploadSaveFilePart struct {
	FileId   int64  `protobuf:"varint,1,opt,name=file_id,json=fileId" json:"file_id,omitempty"`
	FilePart int32  `protobuf:"varint,2,opt,name=file_part,json=filePart" json:"file_part,omitempty"`
	Bytes    []byte `protobuf:"bytes,3,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *TLUploadSaveFilePart) Reset()                    { *m = TLUploadSaveFilePart{} }
func (m *TLUploadSaveFilePart) String() string            { return proto.CompactTextString(m) }
func (*TLUploadSaveFilePart) ProtoMessage()               {}
func (*TLUploadSaveFilePart) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{163} }

func (m *TLUploadSaveFilePart) GetFileId() int64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

func (m *TLUploadSaveFilePart) GetFilePart() int32 {
	if m != nil {
		return m.FilePart
	}
	return 0
}

func (m *TLUploadSaveFilePart) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// upload.getFile#e3a6cfb5 location:InputFileLocation offset:int limit:int = upload.File;
type TLUploadGetFile struct {
	Location *InputFileLocation `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Offset   int32              `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Limit    int32              `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
}

func (m *TLUploadGetFile) Reset()                    { *m = TLUploadGetFile{} }
func (m *TLUploadGetFile) String() string            { return proto.CompactTextString(m) }
func (*TLUploadGetFile) ProtoMessage()               {}
func (*TLUploadGetFile) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{164} }

func (m *TLUploadGetFile) GetLocation() *InputFileLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *TLUploadGetFile) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TLUploadGetFile) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// upload.saveBigFilePart#de7b673d file_id:long file_part:int file_total_parts:int bytes:bytes = Bool;
type TLUploadSaveBigFilePart struct {
	FileId         int64  `protobuf:"varint,1,opt,name=file_id,json=fileId" json:"file_id,omitempty"`
	FilePart       int32  `protobuf:"varint,2,opt,name=file_part,json=filePart" json:"file_part,omitempty"`
	FileTotalParts int32  `protobuf:"varint,3,opt,name=file_total_parts,json=fileTotalParts" json:"file_total_parts,omitempty"`
	Bytes          []byte `protobuf:"bytes,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *TLUploadSaveBigFilePart) Reset()                    { *m = TLUploadSaveBigFilePart{} }
func (m *TLUploadSaveBigFilePart) String() string            { return proto.CompactTextString(m) }
func (*TLUploadSaveBigFilePart) ProtoMessage()               {}
func (*TLUploadSaveBigFilePart) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{165} }

func (m *TLUploadSaveBigFilePart) GetFileId() int64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

func (m *TLUploadSaveBigFilePart) GetFilePart() int32 {
	if m != nil {
		return m.FilePart
	}
	return 0
}

func (m *TLUploadSaveBigFilePart) GetFileTotalParts() int32 {
	if m != nil {
		return m.FileTotalParts
	}
	return 0
}

func (m *TLUploadSaveBigFilePart) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// upload.getWebFile#24e6818d location:InputWebFileLocation offset:int limit:int = upload.WebFile;
type TLUploadGetWebFile struct {
	Location *InputWebFileLocation `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Offset   int32                 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Limit    int32                 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
}

func (m *TLUploadGetWebFile) Reset()                    { *m = TLUploadGetWebFile{} }
func (m *TLUploadGetWebFile) String() string            { return proto.CompactTextString(m) }
func (*TLUploadGetWebFile) ProtoMessage()               {}
func (*TLUploadGetWebFile) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{166} }

func (m *TLUploadGetWebFile) GetLocation() *InputWebFileLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *TLUploadGetWebFile) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TLUploadGetWebFile) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// upload.getCdnFile#2000bcc3 file_token:bytes offset:int limit:int = upload.CdnFile;
type TLUploadGetCdnFile struct {
	FileToken []byte `protobuf:"bytes,1,opt,name=file_token,json=fileToken,proto3" json:"file_token,omitempty"`
	Offset    int32  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Limit     int32  `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
}

func (m *TLUploadGetCdnFile) Reset()                    { *m = TLUploadGetCdnFile{} }
func (m *TLUploadGetCdnFile) String() string            { return proto.CompactTextString(m) }
func (*TLUploadGetCdnFile) ProtoMessage()               {}
func (*TLUploadGetCdnFile) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{167} }

func (m *TLUploadGetCdnFile) GetFileToken() []byte {
	if m != nil {
		return m.FileToken
	}
	return nil
}

func (m *TLUploadGetCdnFile) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TLUploadGetCdnFile) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// upload.reuploadCdnFile#1af91c09 file_token:bytes request_token:bytes = Vector<CdnFileHash>;
type TLUploadReuploadCdnFile struct {
	FileToken    []byte `protobuf:"bytes,1,opt,name=file_token,json=fileToken,proto3" json:"file_token,omitempty"`
	RequestToken []byte `protobuf:"bytes,2,opt,name=request_token,json=requestToken,proto3" json:"request_token,omitempty"`
}

func (m *TLUploadReuploadCdnFile) Reset()                    { *m = TLUploadReuploadCdnFile{} }
func (m *TLUploadReuploadCdnFile) String() string            { return proto.CompactTextString(m) }
func (*TLUploadReuploadCdnFile) ProtoMessage()               {}
func (*TLUploadReuploadCdnFile) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{168} }

func (m *TLUploadReuploadCdnFile) GetFileToken() []byte {
	if m != nil {
		return m.FileToken
	}
	return nil
}

func (m *TLUploadReuploadCdnFile) GetRequestToken() []byte {
	if m != nil {
		return m.RequestToken
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// upload.getCdnFileHashes#f715c87b file_token:bytes offset:int = Vector<CdnFileHash>;
type TLUploadGetCdnFileHashes struct {
	FileToken []byte `protobuf:"bytes,1,opt,name=file_token,json=fileToken,proto3" json:"file_token,omitempty"`
	Offset    int32  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *TLUploadGetCdnFileHashes) Reset()                    { *m = TLUploadGetCdnFileHashes{} }
func (m *TLUploadGetCdnFileHashes) String() string            { return proto.CompactTextString(m) }
func (*TLUploadGetCdnFileHashes) ProtoMessage()               {}
func (*TLUploadGetCdnFileHashes) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{169} }

func (m *TLUploadGetCdnFileHashes) GetFileToken() []byte {
	if m != nil {
		return m.FileToken
	}
	return nil
}

func (m *TLUploadGetCdnFileHashes) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// help.getConfig#c4f9186b = Config;
type TLHelpGetConfig struct {
}

func (m *TLHelpGetConfig) Reset()                    { *m = TLHelpGetConfig{} }
func (m *TLHelpGetConfig) String() string            { return proto.CompactTextString(m) }
func (*TLHelpGetConfig) ProtoMessage()               {}
func (*TLHelpGetConfig) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{170} }

// /////////////////////////////////////////////////////////////////////////////
// help.getNearestDc#1fb33026 = NearestDc;
type TLHelpGetNearestDc struct {
}

func (m *TLHelpGetNearestDc) Reset()                    { *m = TLHelpGetNearestDc{} }
func (m *TLHelpGetNearestDc) String() string            { return proto.CompactTextString(m) }
func (*TLHelpGetNearestDc) ProtoMessage()               {}
func (*TLHelpGetNearestDc) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{171} }

// /////////////////////////////////////////////////////////////////////////////
// help.getAppUpdate#ae2de196 = help.AppUpdate;
type TLHelpGetAppUpdate struct {
}

func (m *TLHelpGetAppUpdate) Reset()                    { *m = TLHelpGetAppUpdate{} }
func (m *TLHelpGetAppUpdate) String() string            { return proto.CompactTextString(m) }
func (*TLHelpGetAppUpdate) ProtoMessage()               {}
func (*TLHelpGetAppUpdate) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{172} }

// /////////////////////////////////////////////////////////////////////////////
// help.saveAppLog#6f02f748 events:Vector<InputAppEvent> = Bool;
type TLHelpSaveAppLog struct {
	Events []*InputAppEvent `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (m *TLHelpSaveAppLog) Reset()                    { *m = TLHelpSaveAppLog{} }
func (m *TLHelpSaveAppLog) String() string            { return proto.CompactTextString(m) }
func (*TLHelpSaveAppLog) ProtoMessage()               {}
func (*TLHelpSaveAppLog) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{173} }

func (m *TLHelpSaveAppLog) GetEvents() []*InputAppEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// help.getInviteText#4d392343 = help.InviteText;
type TLHelpGetInviteText struct {
}

func (m *TLHelpGetInviteText) Reset()                    { *m = TLHelpGetInviteText{} }
func (m *TLHelpGetInviteText) String() string            { return proto.CompactTextString(m) }
func (*TLHelpGetInviteText) ProtoMessage()               {}
func (*TLHelpGetInviteText) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{174} }

// /////////////////////////////////////////////////////////////////////////////
// help.getSupport#9cdf08cd = help.Support;
type TLHelpGetSupport struct {
}

func (m *TLHelpGetSupport) Reset()                    { *m = TLHelpGetSupport{} }
func (m *TLHelpGetSupport) String() string            { return proto.CompactTextString(m) }
func (*TLHelpGetSupport) ProtoMessage()               {}
func (*TLHelpGetSupport) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{175} }

// /////////////////////////////////////////////////////////////////////////////
// help.getAppChangelog#9010ef6f prev_app_version:string = Updates;
type TLHelpGetAppChangelog struct {
	PrevAppVersion string `protobuf:"bytes,1,opt,name=prev_app_version,json=prevAppVersion" json:"prev_app_version,omitempty"`
}

func (m *TLHelpGetAppChangelog) Reset()                    { *m = TLHelpGetAppChangelog{} }
func (m *TLHelpGetAppChangelog) String() string            { return proto.CompactTextString(m) }
func (*TLHelpGetAppChangelog) ProtoMessage()               {}
func (*TLHelpGetAppChangelog) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{176} }

func (m *TLHelpGetAppChangelog) GetPrevAppVersion() string {
	if m != nil {
		return m.PrevAppVersion
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// help.getTermsOfService#350170f3 = help.TermsOfService;
type TLHelpGetTermsOfService struct {
}

func (m *TLHelpGetTermsOfService) Reset()                    { *m = TLHelpGetTermsOfService{} }
func (m *TLHelpGetTermsOfService) String() string            { return proto.CompactTextString(m) }
func (*TLHelpGetTermsOfService) ProtoMessage()               {}
func (*TLHelpGetTermsOfService) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{177} }

// /////////////////////////////////////////////////////////////////////////////
// help.setBotUpdatesStatus#ec22cfcd pending_updates_count:int message:string = Bool;
type TLHelpSetBotUpdatesStatus struct {
	PendingUpdatesCount int32  `protobuf:"varint,1,opt,name=pending_updates_count,json=pendingUpdatesCount" json:"pending_updates_count,omitempty"`
	Message             string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *TLHelpSetBotUpdatesStatus) Reset()                    { *m = TLHelpSetBotUpdatesStatus{} }
func (m *TLHelpSetBotUpdatesStatus) String() string            { return proto.CompactTextString(m) }
func (*TLHelpSetBotUpdatesStatus) ProtoMessage()               {}
func (*TLHelpSetBotUpdatesStatus) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{178} }

func (m *TLHelpSetBotUpdatesStatus) GetPendingUpdatesCount() int32 {
	if m != nil {
		return m.PendingUpdatesCount
	}
	return 0
}

func (m *TLHelpSetBotUpdatesStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// help.getCdnConfig#52029342 = CdnConfig;
type TLHelpGetCdnConfig struct {
}

func (m *TLHelpGetCdnConfig) Reset()                    { *m = TLHelpGetCdnConfig{} }
func (m *TLHelpGetCdnConfig) String() string            { return proto.CompactTextString(m) }
func (*TLHelpGetCdnConfig) ProtoMessage()               {}
func (*TLHelpGetCdnConfig) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{179} }

// /////////////////////////////////////////////////////////////////////////////
// channels.readHistory#cc104937 channel:InputChannel max_id:int = Bool;
type TLChannelsReadHistory struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	MaxId   int32         `protobuf:"varint,2,opt,name=max_id,json=maxId" json:"max_id,omitempty"`
}

func (m *TLChannelsReadHistory) Reset()                    { *m = TLChannelsReadHistory{} }
func (m *TLChannelsReadHistory) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsReadHistory) ProtoMessage()               {}
func (*TLChannelsReadHistory) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{180} }

func (m *TLChannelsReadHistory) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsReadHistory) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// channels.deleteMessages#84c1fd4e channel:InputChannel id:Vector<int> = messages.AffectedMessages;
type TLChannelsDeleteMessages struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Id      []int32       `protobuf:"varint,2,rep,packed,name=id" json:"id,omitempty"`
}

func (m *TLChannelsDeleteMessages) Reset()                    { *m = TLChannelsDeleteMessages{} }
func (m *TLChannelsDeleteMessages) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsDeleteMessages) ProtoMessage()               {}
func (*TLChannelsDeleteMessages) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{181} }

func (m *TLChannelsDeleteMessages) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsDeleteMessages) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// channels.deleteUserHistory#d10dd71b channel:InputChannel user_id:InputUser = messages.AffectedHistory;
type TLChannelsDeleteUserHistory struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	UserId  *InputUser    `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *TLChannelsDeleteUserHistory) Reset()                    { *m = TLChannelsDeleteUserHistory{} }
func (m *TLChannelsDeleteUserHistory) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsDeleteUserHistory) ProtoMessage()               {}
func (*TLChannelsDeleteUserHistory) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{182} }

func (m *TLChannelsDeleteUserHistory) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsDeleteUserHistory) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// channels.reportSpam#fe087810 channel:InputChannel user_id:InputUser id:Vector<int> = Bool;
type TLChannelsReportSpam struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	UserId  *InputUser    `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Id      []int32       `protobuf:"varint,3,rep,packed,name=id" json:"id,omitempty"`
}

func (m *TLChannelsReportSpam) Reset()                    { *m = TLChannelsReportSpam{} }
func (m *TLChannelsReportSpam) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsReportSpam) ProtoMessage()               {}
func (*TLChannelsReportSpam) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{183} }

func (m *TLChannelsReportSpam) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsReportSpam) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLChannelsReportSpam) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// channels.getMessages#93d7b347 channel:InputChannel id:Vector<int> = messages.Messages;
type TLChannelsGetMessages struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Id      []int32       `protobuf:"varint,2,rep,packed,name=id" json:"id,omitempty"`
}

func (m *TLChannelsGetMessages) Reset()                    { *m = TLChannelsGetMessages{} }
func (m *TLChannelsGetMessages) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsGetMessages) ProtoMessage()               {}
func (*TLChannelsGetMessages) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{184} }

func (m *TLChannelsGetMessages) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsGetMessages) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// channels.getParticipants#24d98f92 channel:InputChannel filter:ChannelParticipantsFilter offset:int limit:int = channels.ChannelParticipants;
type TLChannelsGetParticipants struct {
	Channel *InputChannel              `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Filter  *ChannelParticipantsFilter `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty"`
	Offset  int32                      `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Limit   int32                      `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
}

func (m *TLChannelsGetParticipants) Reset()                    { *m = TLChannelsGetParticipants{} }
func (m *TLChannelsGetParticipants) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsGetParticipants) ProtoMessage()               {}
func (*TLChannelsGetParticipants) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{185} }

func (m *TLChannelsGetParticipants) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsGetParticipants) GetFilter() *ChannelParticipantsFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *TLChannelsGetParticipants) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TLChannelsGetParticipants) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// channels.getParticipant#546dd7a6 channel:InputChannel user_id:InputUser = channels.ChannelParticipant;
type TLChannelsGetParticipant struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	UserId  *InputUser    `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *TLChannelsGetParticipant) Reset()                    { *m = TLChannelsGetParticipant{} }
func (m *TLChannelsGetParticipant) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsGetParticipant) ProtoMessage()               {}
func (*TLChannelsGetParticipant) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{186} }

func (m *TLChannelsGetParticipant) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsGetParticipant) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// channels.getChannels#a7f6bbb id:Vector<InputChannel> = messages.Chats;
type TLChannelsGetChannels struct {
	Id []*InputChannel `protobuf:"bytes,1,rep,name=id" json:"id,omitempty"`
}

func (m *TLChannelsGetChannels) Reset()                    { *m = TLChannelsGetChannels{} }
func (m *TLChannelsGetChannels) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsGetChannels) ProtoMessage()               {}
func (*TLChannelsGetChannels) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{187} }

func (m *TLChannelsGetChannels) GetId() []*InputChannel {
	if m != nil {
		return m.Id
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// channels.getFullChannel#8736a09 channel:InputChannel = messages.ChatFull;
type TLChannelsGetFullChannel struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *TLChannelsGetFullChannel) Reset()                    { *m = TLChannelsGetFullChannel{} }
func (m *TLChannelsGetFullChannel) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsGetFullChannel) ProtoMessage()               {}
func (*TLChannelsGetFullChannel) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{188} }

func (m *TLChannelsGetFullChannel) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// channels.createChannel#f4893d7f flags:# broadcast:flags.0?true megagroup:flags.1?true title:string about:string = Updates;
type TLChannelsCreateChannel struct {
	Broadcast bool   `protobuf:"varint,2,opt,name=broadcast" json:"broadcast,omitempty"`
	Megagroup bool   `protobuf:"varint,3,opt,name=megagroup" json:"megagroup,omitempty"`
	Title     string `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	About     string `protobuf:"bytes,5,opt,name=about" json:"about,omitempty"`
}

func (m *TLChannelsCreateChannel) Reset()                    { *m = TLChannelsCreateChannel{} }
func (m *TLChannelsCreateChannel) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsCreateChannel) ProtoMessage()               {}
func (*TLChannelsCreateChannel) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{189} }

func (m *TLChannelsCreateChannel) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

func (m *TLChannelsCreateChannel) GetMegagroup() bool {
	if m != nil {
		return m.Megagroup
	}
	return false
}

func (m *TLChannelsCreateChannel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TLChannelsCreateChannel) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// channels.editAbout#13e27f1e channel:InputChannel about:string = Bool;
type TLChannelsEditAbout struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	About   string        `protobuf:"bytes,2,opt,name=about" json:"about,omitempty"`
}

func (m *TLChannelsEditAbout) Reset()                    { *m = TLChannelsEditAbout{} }
func (m *TLChannelsEditAbout) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsEditAbout) ProtoMessage()               {}
func (*TLChannelsEditAbout) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{190} }

func (m *TLChannelsEditAbout) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsEditAbout) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// channels.editAdmin#20b88214 channel:InputChannel user_id:InputUser admin_rights:ChannelAdminRights = Updates;
type TLChannelsEditAdmin struct {
	Channel     *InputChannel       `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	UserId      *InputUser          `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AdminRights *ChannelAdminRights `protobuf:"bytes,3,opt,name=admin_rights,json=adminRights" json:"admin_rights,omitempty"`
}

func (m *TLChannelsEditAdmin) Reset()                    { *m = TLChannelsEditAdmin{} }
func (m *TLChannelsEditAdmin) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsEditAdmin) ProtoMessage()               {}
func (*TLChannelsEditAdmin) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{191} }

func (m *TLChannelsEditAdmin) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsEditAdmin) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLChannelsEditAdmin) GetAdminRights() *ChannelAdminRights {
	if m != nil {
		return m.AdminRights
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// channels.editTitle#566decd0 channel:InputChannel title:string = Updates;
type TLChannelsEditTitle struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Title   string        `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *TLChannelsEditTitle) Reset()                    { *m = TLChannelsEditTitle{} }
func (m *TLChannelsEditTitle) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsEditTitle) ProtoMessage()               {}
func (*TLChannelsEditTitle) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{192} }

func (m *TLChannelsEditTitle) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsEditTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// channels.editPhoto#f12e57c9 channel:InputChannel photo:InputChatPhoto = Updates;
type TLChannelsEditPhoto struct {
	Channel *InputChannel   `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Photo   *InputChatPhoto `protobuf:"bytes,2,opt,name=photo" json:"photo,omitempty"`
}

func (m *TLChannelsEditPhoto) Reset()                    { *m = TLChannelsEditPhoto{} }
func (m *TLChannelsEditPhoto) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsEditPhoto) ProtoMessage()               {}
func (*TLChannelsEditPhoto) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{193} }

func (m *TLChannelsEditPhoto) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsEditPhoto) GetPhoto() *InputChatPhoto {
	if m != nil {
		return m.Photo
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// channels.checkUsername#10e6bd2c channel:InputChannel username:string = Bool;
type TLChannelsCheckUsername struct {
	Channel  *InputChannel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Username string        `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
}

func (m *TLChannelsCheckUsername) Reset()                    { *m = TLChannelsCheckUsername{} }
func (m *TLChannelsCheckUsername) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsCheckUsername) ProtoMessage()               {}
func (*TLChannelsCheckUsername) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{194} }

func (m *TLChannelsCheckUsername) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsCheckUsername) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// channels.updateUsername#3514b3de channel:InputChannel username:string = Bool;
type TLChannelsUpdateUsername struct {
	Channel  *InputChannel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Username string        `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
}

func (m *TLChannelsUpdateUsername) Reset()                    { *m = TLChannelsUpdateUsername{} }
func (m *TLChannelsUpdateUsername) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsUpdateUsername) ProtoMessage()               {}
func (*TLChannelsUpdateUsername) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{195} }

func (m *TLChannelsUpdateUsername) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsUpdateUsername) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// channels.joinChannel#24b524c5 channel:InputChannel = Updates;
type TLChannelsJoinChannel struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *TLChannelsJoinChannel) Reset()                    { *m = TLChannelsJoinChannel{} }
func (m *TLChannelsJoinChannel) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsJoinChannel) ProtoMessage()               {}
func (*TLChannelsJoinChannel) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{196} }

func (m *TLChannelsJoinChannel) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// channels.leaveChannel#f836aa95 channel:InputChannel = Updates;
type TLChannelsLeaveChannel struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *TLChannelsLeaveChannel) Reset()                    { *m = TLChannelsLeaveChannel{} }
func (m *TLChannelsLeaveChannel) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsLeaveChannel) ProtoMessage()               {}
func (*TLChannelsLeaveChannel) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{197} }

func (m *TLChannelsLeaveChannel) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// channels.inviteToChannel#199f3a6c channel:InputChannel users:Vector<InputUser> = Updates;
type TLChannelsInviteToChannel struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Users   []*InputUser  `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
}

func (m *TLChannelsInviteToChannel) Reset()                    { *m = TLChannelsInviteToChannel{} }
func (m *TLChannelsInviteToChannel) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsInviteToChannel) ProtoMessage()               {}
func (*TLChannelsInviteToChannel) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{198} }

func (m *TLChannelsInviteToChannel) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsInviteToChannel) GetUsers() []*InputUser {
	if m != nil {
		return m.Users
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// channels.exportInvite#c7560885 channel:InputChannel = ExportedChatInvite;
type TLChannelsExportInvite struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *TLChannelsExportInvite) Reset()                    { *m = TLChannelsExportInvite{} }
func (m *TLChannelsExportInvite) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsExportInvite) ProtoMessage()               {}
func (*TLChannelsExportInvite) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{199} }

func (m *TLChannelsExportInvite) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// channels.deleteChannel#c0111fe3 channel:InputChannel = Updates;
type TLChannelsDeleteChannel struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *TLChannelsDeleteChannel) Reset()                    { *m = TLChannelsDeleteChannel{} }
func (m *TLChannelsDeleteChannel) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsDeleteChannel) ProtoMessage()               {}
func (*TLChannelsDeleteChannel) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{200} }

func (m *TLChannelsDeleteChannel) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// channels.toggleInvites#49609307 channel:InputChannel enabled:Bool = Updates;
type TLChannelsToggleInvites struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Enabled *Bool         `protobuf:"bytes,2,opt,name=enabled" json:"enabled,omitempty"`
}

func (m *TLChannelsToggleInvites) Reset()                    { *m = TLChannelsToggleInvites{} }
func (m *TLChannelsToggleInvites) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsToggleInvites) ProtoMessage()               {}
func (*TLChannelsToggleInvites) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{201} }

func (m *TLChannelsToggleInvites) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsToggleInvites) GetEnabled() *Bool {
	if m != nil {
		return m.Enabled
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// channels.exportMessageLink#c846d22d channel:InputChannel id:int = ExportedMessageLink;
type TLChannelsExportMessageLink struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Id      int32         `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *TLChannelsExportMessageLink) Reset()                    { *m = TLChannelsExportMessageLink{} }
func (m *TLChannelsExportMessageLink) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsExportMessageLink) ProtoMessage()               {}
func (*TLChannelsExportMessageLink) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{202} }

func (m *TLChannelsExportMessageLink) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsExportMessageLink) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// channels.toggleSignatures#1f69b606 channel:InputChannel enabled:Bool = Updates;
type TLChannelsToggleSignatures struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Enabled *Bool         `protobuf:"bytes,2,opt,name=enabled" json:"enabled,omitempty"`
}

func (m *TLChannelsToggleSignatures) Reset()                    { *m = TLChannelsToggleSignatures{} }
func (m *TLChannelsToggleSignatures) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsToggleSignatures) ProtoMessage()               {}
func (*TLChannelsToggleSignatures) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{203} }

func (m *TLChannelsToggleSignatures) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsToggleSignatures) GetEnabled() *Bool {
	if m != nil {
		return m.Enabled
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// channels.updatePinnedMessage#a72ded52 flags:# silent:flags.0?true channel:InputChannel id:int = Updates;
type TLChannelsUpdatePinnedMessage struct {
	Silent  bool          `protobuf:"varint,2,opt,name=silent" json:"silent,omitempty"`
	Channel *InputChannel `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
	Id      int32         `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
}

func (m *TLChannelsUpdatePinnedMessage) Reset()                    { *m = TLChannelsUpdatePinnedMessage{} }
func (m *TLChannelsUpdatePinnedMessage) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsUpdatePinnedMessage) ProtoMessage()               {}
func (*TLChannelsUpdatePinnedMessage) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{204} }

func (m *TLChannelsUpdatePinnedMessage) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *TLChannelsUpdatePinnedMessage) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsUpdatePinnedMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// channels.getAdminedPublicChannels#8d8d82d7 = messages.Chats;
type TLChannelsGetAdminedPublicChannels struct {
}

func (m *TLChannelsGetAdminedPublicChannels) Reset()         { *m = TLChannelsGetAdminedPublicChannels{} }
func (m *TLChannelsGetAdminedPublicChannels) String() string { return proto.CompactTextString(m) }
func (*TLChannelsGetAdminedPublicChannels) ProtoMessage()    {}
func (*TLChannelsGetAdminedPublicChannels) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{205}
}

// /////////////////////////////////////////////////////////////////////////////
// channels.editBanned#bfd915cd channel:InputChannel user_id:InputUser banned_rights:ChannelBannedRights = Updates;
type TLChannelsEditBanned struct {
	Channel      *InputChannel        `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	UserId       *InputUser           `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	BannedRights *ChannelBannedRights `protobuf:"bytes,3,opt,name=banned_rights,json=bannedRights" json:"banned_rights,omitempty"`
}

func (m *TLChannelsEditBanned) Reset()                    { *m = TLChannelsEditBanned{} }
func (m *TLChannelsEditBanned) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsEditBanned) ProtoMessage()               {}
func (*TLChannelsEditBanned) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{206} }

func (m *TLChannelsEditBanned) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsEditBanned) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLChannelsEditBanned) GetBannedRights() *ChannelBannedRights {
	if m != nil {
		return m.BannedRights
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// channels.getAdminLog#33ddf480 flags:# channel:InputChannel q:string events_filter:flags.0?ChannelAdminLogEventsFilter admins:flags.1?Vector<InputUser> max_id:long min_id:long limit:int = channels.AdminLogResults;
type TLChannelsGetAdminLog struct {
	Channel      *InputChannel                `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
	Q            string                       `protobuf:"bytes,3,opt,name=q" json:"q,omitempty"`
	EventsFilter *ChannelAdminLogEventsFilter `protobuf:"bytes,4,opt,name=events_filter,json=eventsFilter" json:"events_filter,omitempty"`
	Admins       []*InputUser                 `protobuf:"bytes,5,rep,name=admins" json:"admins,omitempty"`
	MaxId        int64                        `protobuf:"varint,6,opt,name=max_id,json=maxId" json:"max_id,omitempty"`
	MinId        int64                        `protobuf:"varint,7,opt,name=min_id,json=minId" json:"min_id,omitempty"`
	Limit        int32                        `protobuf:"varint,8,opt,name=limit" json:"limit,omitempty"`
}

func (m *TLChannelsGetAdminLog) Reset()                    { *m = TLChannelsGetAdminLog{} }
func (m *TLChannelsGetAdminLog) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsGetAdminLog) ProtoMessage()               {}
func (*TLChannelsGetAdminLog) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{207} }

func (m *TLChannelsGetAdminLog) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsGetAdminLog) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *TLChannelsGetAdminLog) GetEventsFilter() *ChannelAdminLogEventsFilter {
	if m != nil {
		return m.EventsFilter
	}
	return nil
}

func (m *TLChannelsGetAdminLog) GetAdmins() []*InputUser {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *TLChannelsGetAdminLog) GetMaxId() int64 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *TLChannelsGetAdminLog) GetMinId() int64 {
	if m != nil {
		return m.MinId
	}
	return 0
}

func (m *TLChannelsGetAdminLog) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// channels.setStickers#ea8ca4f9 channel:InputChannel stickerset:InputStickerSet = Bool;
type TLChannelsSetStickers struct {
	Channel    *InputChannel    `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Stickerset *InputStickerSet `protobuf:"bytes,2,opt,name=stickerset" json:"stickerset,omitempty"`
}

func (m *TLChannelsSetStickers) Reset()                    { *m = TLChannelsSetStickers{} }
func (m *TLChannelsSetStickers) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsSetStickers) ProtoMessage()               {}
func (*TLChannelsSetStickers) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{208} }

func (m *TLChannelsSetStickers) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsSetStickers) GetStickerset() *InputStickerSet {
	if m != nil {
		return m.Stickerset
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// channels.readMessageContents#eab5dc38 channel:InputChannel id:Vector<int> = Bool;
type TLChannelsReadMessageContents struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Id      []int32       `protobuf:"varint,2,rep,packed,name=id" json:"id,omitempty"`
}

func (m *TLChannelsReadMessageContents) Reset()                    { *m = TLChannelsReadMessageContents{} }
func (m *TLChannelsReadMessageContents) String() string            { return proto.CompactTextString(m) }
func (*TLChannelsReadMessageContents) ProtoMessage()               {}
func (*TLChannelsReadMessageContents) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{209} }

func (m *TLChannelsReadMessageContents) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsReadMessageContents) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// bots.sendCustomRequest#aa2769ed custom_method:string params:DataJSON = DataJSON;
type TLBotsSendCustomRequest struct {
	CustomMethod string    `protobuf:"bytes,1,opt,name=custom_method,json=customMethod" json:"custom_method,omitempty"`
	Params       *DataJSON `protobuf:"bytes,2,opt,name=params" json:"params,omitempty"`
}

func (m *TLBotsSendCustomRequest) Reset()                    { *m = TLBotsSendCustomRequest{} }
func (m *TLBotsSendCustomRequest) String() string            { return proto.CompactTextString(m) }
func (*TLBotsSendCustomRequest) ProtoMessage()               {}
func (*TLBotsSendCustomRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{210} }

func (m *TLBotsSendCustomRequest) GetCustomMethod() string {
	if m != nil {
		return m.CustomMethod
	}
	return ""
}

func (m *TLBotsSendCustomRequest) GetParams() *DataJSON {
	if m != nil {
		return m.Params
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// bots.answerWebhookJSONQuery#e6213f4d query_id:long data:DataJSON = Bool;
type TLBotsAnswerWebhookJSONQuery struct {
	QueryId int64     `protobuf:"varint,1,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	Data    *DataJSON `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *TLBotsAnswerWebhookJSONQuery) Reset()                    { *m = TLBotsAnswerWebhookJSONQuery{} }
func (m *TLBotsAnswerWebhookJSONQuery) String() string            { return proto.CompactTextString(m) }
func (*TLBotsAnswerWebhookJSONQuery) ProtoMessage()               {}
func (*TLBotsAnswerWebhookJSONQuery) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{211} }

func (m *TLBotsAnswerWebhookJSONQuery) GetQueryId() int64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *TLBotsAnswerWebhookJSONQuery) GetData() *DataJSON {
	if m != nil {
		return m.Data
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// payments.getPaymentForm#99f09745 msg_id:int = payments.PaymentForm;
type TLPaymentsGetPaymentForm struct {
	MsgId int32 `protobuf:"varint,1,opt,name=msg_id,json=msgId" json:"msg_id,omitempty"`
}

func (m *TLPaymentsGetPaymentForm) Reset()                    { *m = TLPaymentsGetPaymentForm{} }
func (m *TLPaymentsGetPaymentForm) String() string            { return proto.CompactTextString(m) }
func (*TLPaymentsGetPaymentForm) ProtoMessage()               {}
func (*TLPaymentsGetPaymentForm) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{212} }

func (m *TLPaymentsGetPaymentForm) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// payments.getPaymentReceipt#a092a980 msg_id:int = payments.PaymentReceipt;
type TLPaymentsGetPaymentReceipt struct {
	MsgId int32 `protobuf:"varint,1,opt,name=msg_id,json=msgId" json:"msg_id,omitempty"`
}

func (m *TLPaymentsGetPaymentReceipt) Reset()                    { *m = TLPaymentsGetPaymentReceipt{} }
func (m *TLPaymentsGetPaymentReceipt) String() string            { return proto.CompactTextString(m) }
func (*TLPaymentsGetPaymentReceipt) ProtoMessage()               {}
func (*TLPaymentsGetPaymentReceipt) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{213} }

func (m *TLPaymentsGetPaymentReceipt) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// payments.validateRequestedInfo#770a8e74 flags:# save:flags.0?true msg_id:int info:PaymentRequestedInfo = payments.ValidatedRequestedInfo;
type TLPaymentsValidateRequestedInfo struct {
	Save  bool                  `protobuf:"varint,2,opt,name=save" json:"save,omitempty"`
	MsgId int32                 `protobuf:"varint,3,opt,name=msg_id,json=msgId" json:"msg_id,omitempty"`
	Info  *PaymentRequestedInfo `protobuf:"bytes,4,opt,name=info" json:"info,omitempty"`
}

func (m *TLPaymentsValidateRequestedInfo) Reset()         { *m = TLPaymentsValidateRequestedInfo{} }
func (m *TLPaymentsValidateRequestedInfo) String() string { return proto.CompactTextString(m) }
func (*TLPaymentsValidateRequestedInfo) ProtoMessage()    {}
func (*TLPaymentsValidateRequestedInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{214}
}

func (m *TLPaymentsValidateRequestedInfo) GetSave() bool {
	if m != nil {
		return m.Save
	}
	return false
}

func (m *TLPaymentsValidateRequestedInfo) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *TLPaymentsValidateRequestedInfo) GetInfo() *PaymentRequestedInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// payments.sendPaymentForm#2b8879b3 flags:# msg_id:int requested_info_id:flags.0?string shipping_option_id:flags.1?string credentials:InputPaymentCredentials = payments.PaymentResult;
type TLPaymentsSendPaymentForm struct {
	MsgId            int32                    `protobuf:"varint,2,opt,name=msg_id,json=msgId" json:"msg_id,omitempty"`
	RequestedInfoId  string                   `protobuf:"bytes,3,opt,name=requested_info_id,json=requestedInfoId" json:"requested_info_id,omitempty"`
	ShippingOptionId string                   `protobuf:"bytes,4,opt,name=shipping_option_id,json=shippingOptionId" json:"shipping_option_id,omitempty"`
	Credentials      *InputPaymentCredentials `protobuf:"bytes,5,opt,name=credentials" json:"credentials,omitempty"`
}

func (m *TLPaymentsSendPaymentForm) Reset()                    { *m = TLPaymentsSendPaymentForm{} }
func (m *TLPaymentsSendPaymentForm) String() string            { return proto.CompactTextString(m) }
func (*TLPaymentsSendPaymentForm) ProtoMessage()               {}
func (*TLPaymentsSendPaymentForm) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{215} }

func (m *TLPaymentsSendPaymentForm) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *TLPaymentsSendPaymentForm) GetRequestedInfoId() string {
	if m != nil {
		return m.RequestedInfoId
	}
	return ""
}

func (m *TLPaymentsSendPaymentForm) GetShippingOptionId() string {
	if m != nil {
		return m.ShippingOptionId
	}
	return ""
}

func (m *TLPaymentsSendPaymentForm) GetCredentials() *InputPaymentCredentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// payments.getSavedInfo#227d824b = payments.SavedInfo;
type TLPaymentsGetSavedInfo struct {
}

func (m *TLPaymentsGetSavedInfo) Reset()                    { *m = TLPaymentsGetSavedInfo{} }
func (m *TLPaymentsGetSavedInfo) String() string            { return proto.CompactTextString(m) }
func (*TLPaymentsGetSavedInfo) ProtoMessage()               {}
func (*TLPaymentsGetSavedInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{216} }

// /////////////////////////////////////////////////////////////////////////////
// payments.clearSavedInfo#d83d70c1 flags:# credentials:flags.0?true info:flags.1?true = Bool;
type TLPaymentsClearSavedInfo struct {
	Credentials bool `protobuf:"varint,2,opt,name=credentials" json:"credentials,omitempty"`
	Info        bool `protobuf:"varint,3,opt,name=info" json:"info,omitempty"`
}

func (m *TLPaymentsClearSavedInfo) Reset()                    { *m = TLPaymentsClearSavedInfo{} }
func (m *TLPaymentsClearSavedInfo) String() string            { return proto.CompactTextString(m) }
func (*TLPaymentsClearSavedInfo) ProtoMessage()               {}
func (*TLPaymentsClearSavedInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{217} }

func (m *TLPaymentsClearSavedInfo) GetCredentials() bool {
	if m != nil {
		return m.Credentials
	}
	return false
}

func (m *TLPaymentsClearSavedInfo) GetInfo() bool {
	if m != nil {
		return m.Info
	}
	return false
}

// /////////////////////////////////////////////////////////////////////////////
// stickers.createStickerSet#9bd86e6a flags:# masks:flags.0?true user_id:InputUser title:string short_name:string stickers:Vector<InputStickerSetItem> = messages.StickerSet;
type TLStickersCreateStickerSet struct {
	Masks     bool                   `protobuf:"varint,2,opt,name=masks" json:"masks,omitempty"`
	UserId    *InputUser             `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Title     string                 `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	ShortName string                 `protobuf:"bytes,5,opt,name=short_name,json=shortName" json:"short_name,omitempty"`
	Stickers  []*InputStickerSetItem `protobuf:"bytes,6,rep,name=stickers" json:"stickers,omitempty"`
}

func (m *TLStickersCreateStickerSet) Reset()                    { *m = TLStickersCreateStickerSet{} }
func (m *TLStickersCreateStickerSet) String() string            { return proto.CompactTextString(m) }
func (*TLStickersCreateStickerSet) ProtoMessage()               {}
func (*TLStickersCreateStickerSet) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{218} }

func (m *TLStickersCreateStickerSet) GetMasks() bool {
	if m != nil {
		return m.Masks
	}
	return false
}

func (m *TLStickersCreateStickerSet) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLStickersCreateStickerSet) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TLStickersCreateStickerSet) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *TLStickersCreateStickerSet) GetStickers() []*InputStickerSetItem {
	if m != nil {
		return m.Stickers
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// stickers.removeStickerFromSet#f7760f51 sticker:InputDocument = messages.StickerSet;
type TLStickersRemoveStickerFromSet struct {
	Sticker *InputDocument `protobuf:"bytes,1,opt,name=sticker" json:"sticker,omitempty"`
}

func (m *TLStickersRemoveStickerFromSet) Reset()         { *m = TLStickersRemoveStickerFromSet{} }
func (m *TLStickersRemoveStickerFromSet) String() string { return proto.CompactTextString(m) }
func (*TLStickersRemoveStickerFromSet) ProtoMessage()    {}
func (*TLStickersRemoveStickerFromSet) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{219}
}

func (m *TLStickersRemoveStickerFromSet) GetSticker() *InputDocument {
	if m != nil {
		return m.Sticker
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// stickers.changeStickerPosition#ffb6d4ca sticker:InputDocument position:int = messages.StickerSet;
type TLStickersChangeStickerPosition struct {
	Sticker  *InputDocument `protobuf:"bytes,1,opt,name=sticker" json:"sticker,omitempty"`
	Position int32          `protobuf:"varint,2,opt,name=position" json:"position,omitempty"`
}

func (m *TLStickersChangeStickerPosition) Reset()         { *m = TLStickersChangeStickerPosition{} }
func (m *TLStickersChangeStickerPosition) String() string { return proto.CompactTextString(m) }
func (*TLStickersChangeStickerPosition) ProtoMessage()    {}
func (*TLStickersChangeStickerPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{220}
}

func (m *TLStickersChangeStickerPosition) GetSticker() *InputDocument {
	if m != nil {
		return m.Sticker
	}
	return nil
}

func (m *TLStickersChangeStickerPosition) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// stickers.addStickerToSet#8653febe stickerset:InputStickerSet sticker:InputStickerSetItem = messages.StickerSet;
type TLStickersAddStickerToSet struct {
	Stickerset *InputStickerSet     `protobuf:"bytes,1,opt,name=stickerset" json:"stickerset,omitempty"`
	Sticker    *InputStickerSetItem `protobuf:"bytes,2,opt,name=sticker" json:"sticker,omitempty"`
}

func (m *TLStickersAddStickerToSet) Reset()                    { *m = TLStickersAddStickerToSet{} }
func (m *TLStickersAddStickerToSet) String() string            { return proto.CompactTextString(m) }
func (*TLStickersAddStickerToSet) ProtoMessage()               {}
func (*TLStickersAddStickerToSet) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{221} }

func (m *TLStickersAddStickerToSet) GetStickerset() *InputStickerSet {
	if m != nil {
		return m.Stickerset
	}
	return nil
}

func (m *TLStickersAddStickerToSet) GetSticker() *InputStickerSetItem {
	if m != nil {
		return m.Sticker
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// phone.getCallConfig#55451fa9 = DataJSON;
type TLPhoneGetCallConfig struct {
}

func (m *TLPhoneGetCallConfig) Reset()                    { *m = TLPhoneGetCallConfig{} }
func (m *TLPhoneGetCallConfig) String() string            { return proto.CompactTextString(m) }
func (*TLPhoneGetCallConfig) ProtoMessage()               {}
func (*TLPhoneGetCallConfig) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{222} }

// /////////////////////////////////////////////////////////////////////////////
// phone.requestCall#5b95b3d4 user_id:InputUser random_id:int g_a_hash:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
type TLPhoneRequestCall struct {
	UserId   *InputUser         `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	RandomId int32              `protobuf:"varint,2,opt,name=random_id,json=randomId" json:"random_id,omitempty"`
	GAHash   []byte             `protobuf:"bytes,3,opt,name=g_a_hash,json=gAHash,proto3" json:"g_a_hash,omitempty"`
	Protocol *PhoneCallProtocol `protobuf:"bytes,4,opt,name=protocol" json:"protocol,omitempty"`
}

func (m *TLPhoneRequestCall) Reset()                    { *m = TLPhoneRequestCall{} }
func (m *TLPhoneRequestCall) String() string            { return proto.CompactTextString(m) }
func (*TLPhoneRequestCall) ProtoMessage()               {}
func (*TLPhoneRequestCall) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{223} }

func (m *TLPhoneRequestCall) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLPhoneRequestCall) GetRandomId() int32 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLPhoneRequestCall) GetGAHash() []byte {
	if m != nil {
		return m.GAHash
	}
	return nil
}

func (m *TLPhoneRequestCall) GetProtocol() *PhoneCallProtocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// phone.acceptCall#3bd2b4a0 peer:InputPhoneCall g_b:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
type TLPhoneAcceptCall struct {
	Peer     *InputPhoneCall    `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	GB       []byte             `protobuf:"bytes,2,opt,name=g_b,json=gB,proto3" json:"g_b,omitempty"`
	Protocol *PhoneCallProtocol `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
}

func (m *TLPhoneAcceptCall) Reset()                    { *m = TLPhoneAcceptCall{} }
func (m *TLPhoneAcceptCall) String() string            { return proto.CompactTextString(m) }
func (*TLPhoneAcceptCall) ProtoMessage()               {}
func (*TLPhoneAcceptCall) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{224} }

func (m *TLPhoneAcceptCall) GetPeer() *InputPhoneCall {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLPhoneAcceptCall) GetGB() []byte {
	if m != nil {
		return m.GB
	}
	return nil
}

func (m *TLPhoneAcceptCall) GetProtocol() *PhoneCallProtocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// phone.confirmCall#2efe1722 peer:InputPhoneCall g_a:bytes key_fingerprint:long protocol:PhoneCallProtocol = phone.PhoneCall;
type TLPhoneConfirmCall struct {
	Peer           *InputPhoneCall    `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	GA             []byte             `protobuf:"bytes,2,opt,name=g_a,json=gA,proto3" json:"g_a,omitempty"`
	KeyFingerprint int64              `protobuf:"varint,3,opt,name=key_fingerprint,json=keyFingerprint" json:"key_fingerprint,omitempty"`
	Protocol       *PhoneCallProtocol `protobuf:"bytes,4,opt,name=protocol" json:"protocol,omitempty"`
}

func (m *TLPhoneConfirmCall) Reset()                    { *m = TLPhoneConfirmCall{} }
func (m *TLPhoneConfirmCall) String() string            { return proto.CompactTextString(m) }
func (*TLPhoneConfirmCall) ProtoMessage()               {}
func (*TLPhoneConfirmCall) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{225} }

func (m *TLPhoneConfirmCall) GetPeer() *InputPhoneCall {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLPhoneConfirmCall) GetGA() []byte {
	if m != nil {
		return m.GA
	}
	return nil
}

func (m *TLPhoneConfirmCall) GetKeyFingerprint() int64 {
	if m != nil {
		return m.KeyFingerprint
	}
	return 0
}

func (m *TLPhoneConfirmCall) GetProtocol() *PhoneCallProtocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// phone.receivedCall#17d54f61 peer:InputPhoneCall = Bool;
type TLPhoneReceivedCall struct {
	Peer *InputPhoneCall `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *TLPhoneReceivedCall) Reset()                    { *m = TLPhoneReceivedCall{} }
func (m *TLPhoneReceivedCall) String() string            { return proto.CompactTextString(m) }
func (*TLPhoneReceivedCall) ProtoMessage()               {}
func (*TLPhoneReceivedCall) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{226} }

func (m *TLPhoneReceivedCall) GetPeer() *InputPhoneCall {
	if m != nil {
		return m.Peer
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// phone.discardCall#78d413a6 peer:InputPhoneCall duration:int reason:PhoneCallDiscardReason connection_id:long = Updates;
type TLPhoneDiscardCall struct {
	Peer         *InputPhoneCall         `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Duration     int32                   `protobuf:"varint,2,opt,name=duration" json:"duration,omitempty"`
	Reason       *PhoneCallDiscardReason `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
	ConnectionId int64                   `protobuf:"varint,4,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
}

func (m *TLPhoneDiscardCall) Reset()                    { *m = TLPhoneDiscardCall{} }
func (m *TLPhoneDiscardCall) String() string            { return proto.CompactTextString(m) }
func (*TLPhoneDiscardCall) ProtoMessage()               {}
func (*TLPhoneDiscardCall) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{227} }

func (m *TLPhoneDiscardCall) GetPeer() *InputPhoneCall {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLPhoneDiscardCall) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *TLPhoneDiscardCall) GetReason() *PhoneCallDiscardReason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (m *TLPhoneDiscardCall) GetConnectionId() int64 {
	if m != nil {
		return m.ConnectionId
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// phone.setCallRating#1c536a34 peer:InputPhoneCall rating:int comment:string = Updates;
type TLPhoneSetCallRating struct {
	Peer    *InputPhoneCall `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Rating  int32           `protobuf:"varint,2,opt,name=rating" json:"rating,omitempty"`
	Comment string          `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
}

func (m *TLPhoneSetCallRating) Reset()                    { *m = TLPhoneSetCallRating{} }
func (m *TLPhoneSetCallRating) String() string            { return proto.CompactTextString(m) }
func (*TLPhoneSetCallRating) ProtoMessage()               {}
func (*TLPhoneSetCallRating) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{228} }

func (m *TLPhoneSetCallRating) GetPeer() *InputPhoneCall {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLPhoneSetCallRating) GetRating() int32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *TLPhoneSetCallRating) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// phone.saveCallDebug#277add7e peer:InputPhoneCall debug:DataJSON = Bool;
type TLPhoneSaveCallDebug struct {
	Peer  *InputPhoneCall `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Debug *DataJSON       `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
}

func (m *TLPhoneSaveCallDebug) Reset()                    { *m = TLPhoneSaveCallDebug{} }
func (m *TLPhoneSaveCallDebug) String() string            { return proto.CompactTextString(m) }
func (*TLPhoneSaveCallDebug) ProtoMessage()               {}
func (*TLPhoneSaveCallDebug) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{229} }

func (m *TLPhoneSaveCallDebug) GetPeer() *InputPhoneCall {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLPhoneSaveCallDebug) GetDebug() *DataJSON {
	if m != nil {
		return m.Debug
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// langpack.getLangPack#9ab5c58e lang_code:string = LangPackDifference;
type TLLangpackGetLangPack struct {
	LangCode string `protobuf:"bytes,1,opt,name=lang_code,json=langCode" json:"lang_code,omitempty"`
}

func (m *TLLangpackGetLangPack) Reset()                    { *m = TLLangpackGetLangPack{} }
func (m *TLLangpackGetLangPack) String() string            { return proto.CompactTextString(m) }
func (*TLLangpackGetLangPack) ProtoMessage()               {}
func (*TLLangpackGetLangPack) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{230} }

func (m *TLLangpackGetLangPack) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

// /////////////////////////////////////////////////////////////////////////////
// langpack.getStrings#2e1ee318 lang_code:string keys:Vector<string> = Vector<LangPackString>;
type TLLangpackGetStrings struct {
	LangCode string   `protobuf:"bytes,1,opt,name=lang_code,json=langCode" json:"lang_code,omitempty"`
	Keys     []string `protobuf:"bytes,2,rep,name=keys" json:"keys,omitempty"`
}

func (m *TLLangpackGetStrings) Reset()                    { *m = TLLangpackGetStrings{} }
func (m *TLLangpackGetStrings) String() string            { return proto.CompactTextString(m) }
func (*TLLangpackGetStrings) ProtoMessage()               {}
func (*TLLangpackGetStrings) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{231} }

func (m *TLLangpackGetStrings) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

func (m *TLLangpackGetStrings) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// langpack.getDifference#b2e4d7d from_version:int = LangPackDifference;
type TLLangpackGetDifference struct {
	FromVersion int32 `protobuf:"varint,1,opt,name=from_version,json=fromVersion" json:"from_version,omitempty"`
}

func (m *TLLangpackGetDifference) Reset()                    { *m = TLLangpackGetDifference{} }
func (m *TLLangpackGetDifference) String() string            { return proto.CompactTextString(m) }
func (*TLLangpackGetDifference) ProtoMessage()               {}
func (*TLLangpackGetDifference) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{232} }

func (m *TLLangpackGetDifference) GetFromVersion() int32 {
	if m != nil {
		return m.FromVersion
	}
	return 0
}

// /////////////////////////////////////////////////////////////////////////////
// langpack.getLanguages#800fd57d = Vector<LangPackLanguage>;
type TLLangpackGetLanguages struct {
}

func (m *TLLangpackGetLanguages) Reset()                    { *m = TLLangpackGetLanguages{} }
func (m *TLLangpackGetLanguages) String() string            { return proto.CompactTextString(m) }
func (*TLLangpackGetLanguages) ProtoMessage()               {}
func (*TLLangpackGetLanguages) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{233} }

// /////////////////////////////////////////////////////////////////////////////
// Vector api result type
type Vector_WallPaper struct {
	Datas []*WallPaper `protobuf:"bytes,1,rep,name=datas" json:"datas,omitempty"`
}

func (m *Vector_WallPaper) Reset()                    { *m = Vector_WallPaper{} }
func (m *Vector_WallPaper) String() string            { return proto.CompactTextString(m) }
func (*Vector_WallPaper) ProtoMessage()               {}
func (*Vector_WallPaper) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{234} }

func (m *Vector_WallPaper) GetDatas() []*WallPaper {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_User struct {
	Datas []*User `protobuf:"bytes,1,rep,name=datas" json:"datas,omitempty"`
}

func (m *Vector_User) Reset()                    { *m = Vector_User{} }
func (m *Vector_User) String() string            { return proto.CompactTextString(m) }
func (*Vector_User) ProtoMessage()               {}
func (*Vector_User) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{235} }

func (m *Vector_User) GetDatas() []*User {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_ContactStatus struct {
	Datas []*ContactStatus `protobuf:"bytes,1,rep,name=datas" json:"datas,omitempty"`
}

func (m *Vector_ContactStatus) Reset()                    { *m = Vector_ContactStatus{} }
func (m *Vector_ContactStatus) String() string            { return proto.CompactTextString(m) }
func (*Vector_ContactStatus) ProtoMessage()               {}
func (*Vector_ContactStatus) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{236} }

func (m *Vector_ContactStatus) GetDatas() []*ContactStatus {
	if m != nil {
		return m.Datas
	}
	return nil
}

type VectorInt struct {
	Datas []int32 `protobuf:"varint,1,rep,packed,name=datas" json:"datas,omitempty"`
}

func (m *VectorInt) Reset()                    { *m = VectorInt{} }
func (m *VectorInt) String() string            { return proto.CompactTextString(m) }
func (*VectorInt) ProtoMessage()               {}
func (*VectorInt) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{237} }

func (m *VectorInt) GetDatas() []int32 {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_ReceivedNotifyMessage struct {
	Datas []*ReceivedNotifyMessage `protobuf:"bytes,1,rep,name=datas" json:"datas,omitempty"`
}

func (m *Vector_ReceivedNotifyMessage) Reset()                    { *m = Vector_ReceivedNotifyMessage{} }
func (m *Vector_ReceivedNotifyMessage) String() string            { return proto.CompactTextString(m) }
func (*Vector_ReceivedNotifyMessage) ProtoMessage()               {}
func (*Vector_ReceivedNotifyMessage) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{238} }

func (m *Vector_ReceivedNotifyMessage) GetDatas() []*ReceivedNotifyMessage {
	if m != nil {
		return m.Datas
	}
	return nil
}

type VectorLong struct {
	Datas []int64 `protobuf:"varint,1,rep,packed,name=datas" json:"datas,omitempty"`
}

func (m *VectorLong) Reset()                    { *m = VectorLong{} }
func (m *VectorLong) String() string            { return proto.CompactTextString(m) }
func (*VectorLong) ProtoMessage()               {}
func (*VectorLong) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{239} }

func (m *VectorLong) GetDatas() []int64 {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_StickerSetCovered struct {
	Datas []*StickerSetCovered `protobuf:"bytes,1,rep,name=datas" json:"datas,omitempty"`
}

func (m *Vector_StickerSetCovered) Reset()                    { *m = Vector_StickerSetCovered{} }
func (m *Vector_StickerSetCovered) String() string            { return proto.CompactTextString(m) }
func (*Vector_StickerSetCovered) ProtoMessage()               {}
func (*Vector_StickerSetCovered) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{240} }

func (m *Vector_StickerSetCovered) GetDatas() []*StickerSetCovered {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_CdnFileHash struct {
	Datas []*CdnFileHash `protobuf:"bytes,1,rep,name=datas" json:"datas,omitempty"`
}

func (m *Vector_CdnFileHash) Reset()                    { *m = Vector_CdnFileHash{} }
func (m *Vector_CdnFileHash) String() string            { return proto.CompactTextString(m) }
func (*Vector_CdnFileHash) ProtoMessage()               {}
func (*Vector_CdnFileHash) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{241} }

func (m *Vector_CdnFileHash) GetDatas() []*CdnFileHash {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_LangPackString struct {
	Datas []*LangPackString `protobuf:"bytes,1,rep,name=datas" json:"datas,omitempty"`
}

func (m *Vector_LangPackString) Reset()                    { *m = Vector_LangPackString{} }
func (m *Vector_LangPackString) String() string            { return proto.CompactTextString(m) }
func (*Vector_LangPackString) ProtoMessage()               {}
func (*Vector_LangPackString) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{242} }

func (m *Vector_LangPackString) GetDatas() []*LangPackString {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_LangPackLanguage struct {
	Datas []*LangPackLanguage `protobuf:"bytes,1,rep,name=datas" json:"datas,omitempty"`
}

func (m *Vector_LangPackLanguage) Reset()                    { *m = Vector_LangPackLanguage{} }
func (m *Vector_LangPackLanguage) String() string            { return proto.CompactTextString(m) }
func (*Vector_LangPackLanguage) ProtoMessage()               {}
func (*Vector_LangPackLanguage) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{243} }

func (m *Vector_LangPackLanguage) GetDatas() []*LangPackLanguage {
	if m != nil {
		return m.Datas
	}
	return nil
}

func init() {
	proto.RegisterType((*TLInvokeAfterMsg)(nil), "mtproto.TL_invokeAfterMsg")
	proto.RegisterType((*TLInvokeAfterMsgs)(nil), "mtproto.TL_invokeAfterMsgs")
	proto.RegisterType((*TLInitConnection)(nil), "mtproto.TL_initConnection")
	proto.RegisterType((*TLInvokeWithLayer)(nil), "mtproto.TL_invokeWithLayer")
	proto.RegisterType((*TLInvokeWithoutUpdates)(nil), "mtproto.TL_invokeWithoutUpdates")
	proto.RegisterType((*TLAuthCheckPhone)(nil), "mtproto.TL_auth_checkPhone")
	proto.RegisterType((*TLAuthSendCode)(nil), "mtproto.TL_auth_sendCode")
	proto.RegisterType((*TLAuthSignUp)(nil), "mtproto.TL_auth_signUp")
	proto.RegisterType((*TLAuthSignIn)(nil), "mtproto.TL_auth_signIn")
	proto.RegisterType((*TLAuthLogOut)(nil), "mtproto.TL_auth_logOut")
	proto.RegisterType((*TLAuthResetAuthorizations)(nil), "mtproto.TL_auth_resetAuthorizations")
	proto.RegisterType((*TLAuthSendInvites)(nil), "mtproto.TL_auth_sendInvites")
	proto.RegisterType((*TLAuthExportAuthorization)(nil), "mtproto.TL_auth_exportAuthorization")
	proto.RegisterType((*TLAuthImportAuthorization)(nil), "mtproto.TL_auth_importAuthorization")
	proto.RegisterType((*TLAuthBindTempAuthKey)(nil), "mtproto.TL_auth_bindTempAuthKey")
	proto.RegisterType((*TLAuthImportBotAuthorization)(nil), "mtproto.TL_auth_importBotAuthorization")
	proto.RegisterType((*TLAuthCheckPassword)(nil), "mtproto.TL_auth_checkPassword")
	proto.RegisterType((*TLAuthRequestPasswordRecovery)(nil), "mtproto.TL_auth_requestPasswordRecovery")
	proto.RegisterType((*TLAuthRecoverPassword)(nil), "mtproto.TL_auth_recoverPassword")
	proto.RegisterType((*TLAuthResendCode)(nil), "mtproto.TL_auth_resendCode")
	proto.RegisterType((*TLAuthCancelCode)(nil), "mtproto.TL_auth_cancelCode")
	proto.RegisterType((*TLAuthDropTempAuthKeys)(nil), "mtproto.TL_auth_dropTempAuthKeys")
	proto.RegisterType((*TLAccountRegisterDevice)(nil), "mtproto.TL_account_registerDevice")
	proto.RegisterType((*TLAccountUnregisterDevice)(nil), "mtproto.TL_account_unregisterDevice")
	proto.RegisterType((*TLAccountUpdateNotifySettings)(nil), "mtproto.TL_account_updateNotifySettings")
	proto.RegisterType((*TLAccountGetNotifySettings)(nil), "mtproto.TL_account_getNotifySettings")
	proto.RegisterType((*TLAccountResetNotifySettings)(nil), "mtproto.TL_account_resetNotifySettings")
	proto.RegisterType((*TLAccountUpdateProfile)(nil), "mtproto.TL_account_updateProfile")
	proto.RegisterType((*TLAccountUpdateStatus)(nil), "mtproto.TL_account_updateStatus")
	proto.RegisterType((*TLAccountGetWallPapers)(nil), "mtproto.TL_account_getWallPapers")
	proto.RegisterType((*TLAccountReportPeer)(nil), "mtproto.TL_account_reportPeer")
	proto.RegisterType((*TLAccountCheckUsername)(nil), "mtproto.TL_account_checkUsername")
	proto.RegisterType((*TLAccountUpdateUsername)(nil), "mtproto.TL_account_updateUsername")
	proto.RegisterType((*TLAccountGetPrivacy)(nil), "mtproto.TL_account_getPrivacy")
	proto.RegisterType((*TLAccountSetPrivacy)(nil), "mtproto.TL_account_setPrivacy")
	proto.RegisterType((*TLAccountDeleteAccount)(nil), "mtproto.TL_account_deleteAccount")
	proto.RegisterType((*TLAccountGetAccountTTL)(nil), "mtproto.TL_account_getAccountTTL")
	proto.RegisterType((*TLAccountSetAccountTTL)(nil), "mtproto.TL_account_setAccountTTL")
	proto.RegisterType((*TLAccountSendChangePhoneCode)(nil), "mtproto.TL_account_sendChangePhoneCode")
	proto.RegisterType((*TLAccountChangePhone)(nil), "mtproto.TL_account_changePhone")
	proto.RegisterType((*TLAccountUpdateDeviceLocked)(nil), "mtproto.TL_account_updateDeviceLocked")
	proto.RegisterType((*TLAccountGetAuthorizations)(nil), "mtproto.TL_account_getAuthorizations")
	proto.RegisterType((*TLAccountResetAuthorization)(nil), "mtproto.TL_account_resetAuthorization")
	proto.RegisterType((*TLAccountGetPassword)(nil), "mtproto.TL_account_getPassword")
	proto.RegisterType((*TLAccountGetPasswordSettings)(nil), "mtproto.TL_account_getPasswordSettings")
	proto.RegisterType((*TLAccountUpdatePasswordSettings)(nil), "mtproto.TL_account_updatePasswordSettings")
	proto.RegisterType((*TLAccountSendConfirmPhoneCode)(nil), "mtproto.TL_account_sendConfirmPhoneCode")
	proto.RegisterType((*TLAccountConfirmPhone)(nil), "mtproto.TL_account_confirmPhone")
	proto.RegisterType((*TLAccountGetTmpPassword)(nil), "mtproto.TL_account_getTmpPassword")
	proto.RegisterType((*TLUsersGetUsers)(nil), "mtproto.TL_users_getUsers")
	proto.RegisterType((*TLUsersGetFullUser)(nil), "mtproto.TL_users_getFullUser")
	proto.RegisterType((*TLContactsGetStatuses)(nil), "mtproto.TL_contacts_getStatuses")
	proto.RegisterType((*TLContactsGetContacts)(nil), "mtproto.TL_contacts_getContacts")
	proto.RegisterType((*TLContactsImportContacts)(nil), "mtproto.TL_contacts_importContacts")
	proto.RegisterType((*TLContactsDeleteContact)(nil), "mtproto.TL_contacts_deleteContact")
	proto.RegisterType((*TLContactsDeleteContacts)(nil), "mtproto.TL_contacts_deleteContacts")
	proto.RegisterType((*TLContactsBlock)(nil), "mtproto.TL_contacts_block")
	proto.RegisterType((*TLContactsUnblock)(nil), "mtproto.TL_contacts_unblock")
	proto.RegisterType((*TLContactsGetBlocked)(nil), "mtproto.TL_contacts_getBlocked")
	proto.RegisterType((*TLContactsExportCard)(nil), "mtproto.TL_contacts_exportCard")
	proto.RegisterType((*TLContactsImportCard)(nil), "mtproto.TL_contacts_importCard")
	proto.RegisterType((*TLContactsSearch)(nil), "mtproto.TL_contacts_search")
	proto.RegisterType((*TLContactsResolveUsername)(nil), "mtproto.TL_contacts_resolveUsername")
	proto.RegisterType((*TLContactsGetTopPeers)(nil), "mtproto.TL_contacts_getTopPeers")
	proto.RegisterType((*TLContactsResetTopPeerRating)(nil), "mtproto.TL_contacts_resetTopPeerRating")
	proto.RegisterType((*TLContactsResetSaved)(nil), "mtproto.TL_contacts_resetSaved")
	proto.RegisterType((*TLMessagesGetMessages)(nil), "mtproto.TL_messages_getMessages")
	proto.RegisterType((*TLMessagesGetDialogs)(nil), "mtproto.TL_messages_getDialogs")
	proto.RegisterType((*TLMessagesGetHistory)(nil), "mtproto.TL_messages_getHistory")
	proto.RegisterType((*TLMessagesSearch)(nil), "mtproto.TL_messages_search")
	proto.RegisterType((*TLMessagesReadHistory)(nil), "mtproto.TL_messages_readHistory")
	proto.RegisterType((*TLMessagesDeleteHistory)(nil), "mtproto.TL_messages_deleteHistory")
	proto.RegisterType((*TLMessagesDeleteMessages)(nil), "mtproto.TL_messages_deleteMessages")
	proto.RegisterType((*TLMessagesReceivedMessages)(nil), "mtproto.TL_messages_receivedMessages")
	proto.RegisterType((*TLMessagesSetTyping)(nil), "mtproto.TL_messages_setTyping")
	proto.RegisterType((*TLMessagesSendMessage)(nil), "mtproto.TL_messages_sendMessage")
	proto.RegisterType((*TLMessagesSendMedia)(nil), "mtproto.TL_messages_sendMedia")
	proto.RegisterType((*TLMessagesForwardMessages)(nil), "mtproto.TL_messages_forwardMessages")
	proto.RegisterType((*TLMessagesReportSpam)(nil), "mtproto.TL_messages_reportSpam")
	proto.RegisterType((*TLMessagesHideReportSpam)(nil), "mtproto.TL_messages_hideReportSpam")
	proto.RegisterType((*TLMessagesGetPeerSettings)(nil), "mtproto.TL_messages_getPeerSettings")
	proto.RegisterType((*TLMessagesGetChats)(nil), "mtproto.TL_messages_getChats")
	proto.RegisterType((*TLMessagesGetFullChat)(nil), "mtproto.TL_messages_getFullChat")
	proto.RegisterType((*TLMessagesEditChatTitle)(nil), "mtproto.TL_messages_editChatTitle")
	proto.RegisterType((*TLMessagesEditChatPhoto)(nil), "mtproto.TL_messages_editChatPhoto")
	proto.RegisterType((*TLMessagesAddChatUser)(nil), "mtproto.TL_messages_addChatUser")
	proto.RegisterType((*TLMessagesDeleteChatUser)(nil), "mtproto.TL_messages_deleteChatUser")
	proto.RegisterType((*TLMessagesCreateChat)(nil), "mtproto.TL_messages_createChat")
	proto.RegisterType((*TLMessagesForwardMessage)(nil), "mtproto.TL_messages_forwardMessage")
	proto.RegisterType((*TLMessagesGetDhConfig)(nil), "mtproto.TL_messages_getDhConfig")
	proto.RegisterType((*TLMessagesRequestEncryption)(nil), "mtproto.TL_messages_requestEncryption")
	proto.RegisterType((*TLMessagesAcceptEncryption)(nil), "mtproto.TL_messages_acceptEncryption")
	proto.RegisterType((*TLMessagesDiscardEncryption)(nil), "mtproto.TL_messages_discardEncryption")
	proto.RegisterType((*TLMessagesSetEncryptedTyping)(nil), "mtproto.TL_messages_setEncryptedTyping")
	proto.RegisterType((*TLMessagesReadEncryptedHistory)(nil), "mtproto.TL_messages_readEncryptedHistory")
	proto.RegisterType((*TLMessagesSendEncrypted)(nil), "mtproto.TL_messages_sendEncrypted")
	proto.RegisterType((*TLMessagesSendEncryptedFile)(nil), "mtproto.TL_messages_sendEncryptedFile")
	proto.RegisterType((*TLMessagesSendEncryptedService)(nil), "mtproto.TL_messages_sendEncryptedService")
	proto.RegisterType((*TLMessagesReceivedQueue)(nil), "mtproto.TL_messages_receivedQueue")
	proto.RegisterType((*TLMessagesReportEncryptedSpam)(nil), "mtproto.TL_messages_reportEncryptedSpam")
	proto.RegisterType((*TLMessagesReadMessageContents)(nil), "mtproto.TL_messages_readMessageContents")
	proto.RegisterType((*TLMessagesGetAllStickers)(nil), "mtproto.TL_messages_getAllStickers")
	proto.RegisterType((*TLMessagesGetWebPagePreview)(nil), "mtproto.TL_messages_getWebPagePreview")
	proto.RegisterType((*TLMessagesExportChatInvite)(nil), "mtproto.TL_messages_exportChatInvite")
	proto.RegisterType((*TLMessagesCheckChatInvite)(nil), "mtproto.TL_messages_checkChatInvite")
	proto.RegisterType((*TLMessagesImportChatInvite)(nil), "mtproto.TL_messages_importChatInvite")
	proto.RegisterType((*TLMessagesGetStickerSet)(nil), "mtproto.TL_messages_getStickerSet")
	proto.RegisterType((*TLMessagesInstallStickerSet)(nil), "mtproto.TL_messages_installStickerSet")
	proto.RegisterType((*TLMessagesUninstallStickerSet)(nil), "mtproto.TL_messages_uninstallStickerSet")
	proto.RegisterType((*TLMessagesStartBot)(nil), "mtproto.TL_messages_startBot")
	proto.RegisterType((*TLMessagesGetMessagesViews)(nil), "mtproto.TL_messages_getMessagesViews")
	proto.RegisterType((*TLMessagesToggleChatAdmins)(nil), "mtproto.TL_messages_toggleChatAdmins")
	proto.RegisterType((*TLMessagesEditChatAdmin)(nil), "mtproto.TL_messages_editChatAdmin")
	proto.RegisterType((*TLMessagesMigrateChat)(nil), "mtproto.TL_messages_migrateChat")
	proto.RegisterType((*TLMessagesSearchGlobal)(nil), "mtproto.TL_messages_searchGlobal")
	proto.RegisterType((*TLMessagesReorderStickerSets)(nil), "mtproto.TL_messages_reorderStickerSets")
	proto.RegisterType((*TLMessagesGetDocumentByHash)(nil), "mtproto.TL_messages_getDocumentByHash")
	proto.RegisterType((*TLMessagesSearchGifs)(nil), "mtproto.TL_messages_searchGifs")
	proto.RegisterType((*TLMessagesGetSavedGifs)(nil), "mtproto.TL_messages_getSavedGifs")
	proto.RegisterType((*TLMessagesSaveGif)(nil), "mtproto.TL_messages_saveGif")
	proto.RegisterType((*TLMessagesGetInlineBotResults)(nil), "mtproto.TL_messages_getInlineBotResults")
	proto.RegisterType((*TLMessagesSetInlineBotResults)(nil), "mtproto.TL_messages_setInlineBotResults")
	proto.RegisterType((*TLMessagesSendInlineBotResult)(nil), "mtproto.TL_messages_sendInlineBotResult")
	proto.RegisterType((*TLMessagesGetMessageEditData)(nil), "mtproto.TL_messages_getMessageEditData")
	proto.RegisterType((*TLMessagesEditMessage)(nil), "mtproto.TL_messages_editMessage")
	proto.RegisterType((*TLMessagesEditInlineBotMessage)(nil), "mtproto.TL_messages_editInlineBotMessage")
	proto.RegisterType((*TLMessagesGetBotCallbackAnswer)(nil), "mtproto.TL_messages_getBotCallbackAnswer")
	proto.RegisterType((*TLMessagesSetBotCallbackAnswer)(nil), "mtproto.TL_messages_setBotCallbackAnswer")
	proto.RegisterType((*TLMessagesGetPeerDialogs)(nil), "mtproto.TL_messages_getPeerDialogs")
	proto.RegisterType((*TLMessagesSaveDraft)(nil), "mtproto.TL_messages_saveDraft")
	proto.RegisterType((*TLMessagesGetAllDrafts)(nil), "mtproto.TL_messages_getAllDrafts")
	proto.RegisterType((*TLMessagesGetFeaturedStickers)(nil), "mtproto.TL_messages_getFeaturedStickers")
	proto.RegisterType((*TLMessagesReadFeaturedStickers)(nil), "mtproto.TL_messages_readFeaturedStickers")
	proto.RegisterType((*TLMessagesGetRecentStickers)(nil), "mtproto.TL_messages_getRecentStickers")
	proto.RegisterType((*TLMessagesSaveRecentSticker)(nil), "mtproto.TL_messages_saveRecentSticker")
	proto.RegisterType((*TLMessagesClearRecentStickers)(nil), "mtproto.TL_messages_clearRecentStickers")
	proto.RegisterType((*TLMessagesGetArchivedStickers)(nil), "mtproto.TL_messages_getArchivedStickers")
	proto.RegisterType((*TLMessagesGetMaskStickers)(nil), "mtproto.TL_messages_getMaskStickers")
	proto.RegisterType((*TLMessagesGetAttachedStickers)(nil), "mtproto.TL_messages_getAttachedStickers")
	proto.RegisterType((*TLMessagesSetGameScore)(nil), "mtproto.TL_messages_setGameScore")
	proto.RegisterType((*TLMessagesSetInlineGameScore)(nil), "mtproto.TL_messages_setInlineGameScore")
	proto.RegisterType((*TLMessagesGetGameHighScores)(nil), "mtproto.TL_messages_getGameHighScores")
	proto.RegisterType((*TLMessagesGetInlineGameHighScores)(nil), "mtproto.TL_messages_getInlineGameHighScores")
	proto.RegisterType((*TLMessagesGetCommonChats)(nil), "mtproto.TL_messages_getCommonChats")
	proto.RegisterType((*TLMessagesGetAllChats)(nil), "mtproto.TL_messages_getAllChats")
	proto.RegisterType((*TLMessagesGetWebPage)(nil), "mtproto.TL_messages_getWebPage")
	proto.RegisterType((*TLMessagesToggleDialogPin)(nil), "mtproto.TL_messages_toggleDialogPin")
	proto.RegisterType((*TLMessagesReorderPinnedDialogs)(nil), "mtproto.TL_messages_reorderPinnedDialogs")
	proto.RegisterType((*TLMessagesGetPinnedDialogs)(nil), "mtproto.TL_messages_getPinnedDialogs")
	proto.RegisterType((*TLMessagesSetBotShippingResults)(nil), "mtproto.TL_messages_setBotShippingResults")
	proto.RegisterType((*TLMessagesSetBotPrecheckoutResults)(nil), "mtproto.TL_messages_setBotPrecheckoutResults")
	proto.RegisterType((*TLMessagesUploadMedia)(nil), "mtproto.TL_messages_uploadMedia")
	proto.RegisterType((*TLMessagesSendScreenshotNotification)(nil), "mtproto.TL_messages_sendScreenshotNotification")
	proto.RegisterType((*TLMessagesGetFavedStickers)(nil), "mtproto.TL_messages_getFavedStickers")
	proto.RegisterType((*TLMessagesFaveSticker)(nil), "mtproto.TL_messages_faveSticker")
	proto.RegisterType((*TLMessagesGetUnreadMentions)(nil), "mtproto.TL_messages_getUnreadMentions")
	proto.RegisterType((*TLUpdatesGetState)(nil), "mtproto.TL_updates_getState")
	proto.RegisterType((*TLUpdatesGetDifference)(nil), "mtproto.TL_updates_getDifference")
	proto.RegisterType((*TLUpdatesGetChannelDifference)(nil), "mtproto.TL_updates_getChannelDifference")
	proto.RegisterType((*TLPhotosUpdateProfilePhoto)(nil), "mtproto.TL_photos_updateProfilePhoto")
	proto.RegisterType((*TLPhotosUploadProfilePhoto)(nil), "mtproto.TL_photos_uploadProfilePhoto")
	proto.RegisterType((*TLPhotosDeletePhotos)(nil), "mtproto.TL_photos_deletePhotos")
	proto.RegisterType((*TLPhotosGetUserPhotos)(nil), "mtproto.TL_photos_getUserPhotos")
	proto.RegisterType((*TLUploadSaveFilePart)(nil), "mtproto.TL_upload_saveFilePart")
	proto.RegisterType((*TLUploadGetFile)(nil), "mtproto.TL_upload_getFile")
	proto.RegisterType((*TLUploadSaveBigFilePart)(nil), "mtproto.TL_upload_saveBigFilePart")
	proto.RegisterType((*TLUploadGetWebFile)(nil), "mtproto.TL_upload_getWebFile")
	proto.RegisterType((*TLUploadGetCdnFile)(nil), "mtproto.TL_upload_getCdnFile")
	proto.RegisterType((*TLUploadReuploadCdnFile)(nil), "mtproto.TL_upload_reuploadCdnFile")
	proto.RegisterType((*TLUploadGetCdnFileHashes)(nil), "mtproto.TL_upload_getCdnFileHashes")
	proto.RegisterType((*TLHelpGetConfig)(nil), "mtproto.TL_help_getConfig")
	proto.RegisterType((*TLHelpGetNearestDc)(nil), "mtproto.TL_help_getNearestDc")
	proto.RegisterType((*TLHelpGetAppUpdate)(nil), "mtproto.TL_help_getAppUpdate")
	proto.RegisterType((*TLHelpSaveAppLog)(nil), "mtproto.TL_help_saveAppLog")
	proto.RegisterType((*TLHelpGetInviteText)(nil), "mtproto.TL_help_getInviteText")
	proto.RegisterType((*TLHelpGetSupport)(nil), "mtproto.TL_help_getSupport")
	proto.RegisterType((*TLHelpGetAppChangelog)(nil), "mtproto.TL_help_getAppChangelog")
	proto.RegisterType((*TLHelpGetTermsOfService)(nil), "mtproto.TL_help_getTermsOfService")
	proto.RegisterType((*TLHelpSetBotUpdatesStatus)(nil), "mtproto.TL_help_setBotUpdatesStatus")
	proto.RegisterType((*TLHelpGetCdnConfig)(nil), "mtproto.TL_help_getCdnConfig")
	proto.RegisterType((*TLChannelsReadHistory)(nil), "mtproto.TL_channels_readHistory")
	proto.RegisterType((*TLChannelsDeleteMessages)(nil), "mtproto.TL_channels_deleteMessages")
	proto.RegisterType((*TLChannelsDeleteUserHistory)(nil), "mtproto.TL_channels_deleteUserHistory")
	proto.RegisterType((*TLChannelsReportSpam)(nil), "mtproto.TL_channels_reportSpam")
	proto.RegisterType((*TLChannelsGetMessages)(nil), "mtproto.TL_channels_getMessages")
	proto.RegisterType((*TLChannelsGetParticipants)(nil), "mtproto.TL_channels_getParticipants")
	proto.RegisterType((*TLChannelsGetParticipant)(nil), "mtproto.TL_channels_getParticipant")
	proto.RegisterType((*TLChannelsGetChannels)(nil), "mtproto.TL_channels_getChannels")
	proto.RegisterType((*TLChannelsGetFullChannel)(nil), "mtproto.TL_channels_getFullChannel")
	proto.RegisterType((*TLChannelsCreateChannel)(nil), "mtproto.TL_channels_createChannel")
	proto.RegisterType((*TLChannelsEditAbout)(nil), "mtproto.TL_channels_editAbout")
	proto.RegisterType((*TLChannelsEditAdmin)(nil), "mtproto.TL_channels_editAdmin")
	proto.RegisterType((*TLChannelsEditTitle)(nil), "mtproto.TL_channels_editTitle")
	proto.RegisterType((*TLChannelsEditPhoto)(nil), "mtproto.TL_channels_editPhoto")
	proto.RegisterType((*TLChannelsCheckUsername)(nil), "mtproto.TL_channels_checkUsername")
	proto.RegisterType((*TLChannelsUpdateUsername)(nil), "mtproto.TL_channels_updateUsername")
	proto.RegisterType((*TLChannelsJoinChannel)(nil), "mtproto.TL_channels_joinChannel")
	proto.RegisterType((*TLChannelsLeaveChannel)(nil), "mtproto.TL_channels_leaveChannel")
	proto.RegisterType((*TLChannelsInviteToChannel)(nil), "mtproto.TL_channels_inviteToChannel")
	proto.RegisterType((*TLChannelsExportInvite)(nil), "mtproto.TL_channels_exportInvite")
	proto.RegisterType((*TLChannelsDeleteChannel)(nil), "mtproto.TL_channels_deleteChannel")
	proto.RegisterType((*TLChannelsToggleInvites)(nil), "mtproto.TL_channels_toggleInvites")
	proto.RegisterType((*TLChannelsExportMessageLink)(nil), "mtproto.TL_channels_exportMessageLink")
	proto.RegisterType((*TLChannelsToggleSignatures)(nil), "mtproto.TL_channels_toggleSignatures")
	proto.RegisterType((*TLChannelsUpdatePinnedMessage)(nil), "mtproto.TL_channels_updatePinnedMessage")
	proto.RegisterType((*TLChannelsGetAdminedPublicChannels)(nil), "mtproto.TL_channels_getAdminedPublicChannels")
	proto.RegisterType((*TLChannelsEditBanned)(nil), "mtproto.TL_channels_editBanned")
	proto.RegisterType((*TLChannelsGetAdminLog)(nil), "mtproto.TL_channels_getAdminLog")
	proto.RegisterType((*TLChannelsSetStickers)(nil), "mtproto.TL_channels_setStickers")
	proto.RegisterType((*TLChannelsReadMessageContents)(nil), "mtproto.TL_channels_readMessageContents")
	proto.RegisterType((*TLBotsSendCustomRequest)(nil), "mtproto.TL_bots_sendCustomRequest")
	proto.RegisterType((*TLBotsAnswerWebhookJSONQuery)(nil), "mtproto.TL_bots_answerWebhookJSONQuery")
	proto.RegisterType((*TLPaymentsGetPaymentForm)(nil), "mtproto.TL_payments_getPaymentForm")
	proto.RegisterType((*TLPaymentsGetPaymentReceipt)(nil), "mtproto.TL_payments_getPaymentReceipt")
	proto.RegisterType((*TLPaymentsValidateRequestedInfo)(nil), "mtproto.TL_payments_validateRequestedInfo")
	proto.RegisterType((*TLPaymentsSendPaymentForm)(nil), "mtproto.TL_payments_sendPaymentForm")
	proto.RegisterType((*TLPaymentsGetSavedInfo)(nil), "mtproto.TL_payments_getSavedInfo")
	proto.RegisterType((*TLPaymentsClearSavedInfo)(nil), "mtproto.TL_payments_clearSavedInfo")
	proto.RegisterType((*TLStickersCreateStickerSet)(nil), "mtproto.TL_stickers_createStickerSet")
	proto.RegisterType((*TLStickersRemoveStickerFromSet)(nil), "mtproto.TL_stickers_removeStickerFromSet")
	proto.RegisterType((*TLStickersChangeStickerPosition)(nil), "mtproto.TL_stickers_changeStickerPosition")
	proto.RegisterType((*TLStickersAddStickerToSet)(nil), "mtproto.TL_stickers_addStickerToSet")
	proto.RegisterType((*TLPhoneGetCallConfig)(nil), "mtproto.TL_phone_getCallConfig")
	proto.RegisterType((*TLPhoneRequestCall)(nil), "mtproto.TL_phone_requestCall")
	proto.RegisterType((*TLPhoneAcceptCall)(nil), "mtproto.TL_phone_acceptCall")
	proto.RegisterType((*TLPhoneConfirmCall)(nil), "mtproto.TL_phone_confirmCall")
	proto.RegisterType((*TLPhoneReceivedCall)(nil), "mtproto.TL_phone_receivedCall")
	proto.RegisterType((*TLPhoneDiscardCall)(nil), "mtproto.TL_phone_discardCall")
	proto.RegisterType((*TLPhoneSetCallRating)(nil), "mtproto.TL_phone_setCallRating")
	proto.RegisterType((*TLPhoneSaveCallDebug)(nil), "mtproto.TL_phone_saveCallDebug")
	proto.RegisterType((*TLLangpackGetLangPack)(nil), "mtproto.TL_langpack_getLangPack")
	proto.RegisterType((*TLLangpackGetStrings)(nil), "mtproto.TL_langpack_getStrings")
	proto.RegisterType((*TLLangpackGetDifference)(nil), "mtproto.TL_langpack_getDifference")
	proto.RegisterType((*TLLangpackGetLanguages)(nil), "mtproto.TL_langpack_getLanguages")
	proto.RegisterType((*Vector_WallPaper)(nil), "mtproto.Vector_WallPaper")
	proto.RegisterType((*Vector_User)(nil), "mtproto.Vector_User")
	proto.RegisterType((*Vector_ContactStatus)(nil), "mtproto.Vector_ContactStatus")
	proto.RegisterType((*VectorInt)(nil), "mtproto.Vector_int")
	proto.RegisterType((*Vector_ReceivedNotifyMessage)(nil), "mtproto.Vector_ReceivedNotifyMessage")
	proto.RegisterType((*VectorLong)(nil), "mtproto.Vector_long")
	proto.RegisterType((*Vector_StickerSetCovered)(nil), "mtproto.Vector_StickerSetCovered")
	proto.RegisterType((*Vector_CdnFileHash)(nil), "mtproto.Vector_CdnFileHash")
	proto.RegisterType((*Vector_LangPackString)(nil), "mtproto.Vector_LangPackString")
	proto.RegisterType((*Vector_LangPackLanguage)(nil), "mtproto.Vector_LangPackLanguage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RPCstickers service

type RPCstickersClient interface {
	// stickers.createStickerSet#9bd86e6a flags:# masks:flags.0?true user_id:InputUser title:string short_name:string stickers:Vector<InputStickerSetItem> = messages.StickerSet;
	StickersCreateStickerSet(ctx context.Context, in *TLStickersCreateStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	// stickers.removeStickerFromSet#f7760f51 sticker:InputDocument = messages.StickerSet;
	StickersRemoveStickerFromSet(ctx context.Context, in *TLStickersRemoveStickerFromSet, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	// stickers.changeStickerPosition#ffb6d4ca sticker:InputDocument position:int = messages.StickerSet;
	StickersChangeStickerPosition(ctx context.Context, in *TLStickersChangeStickerPosition, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	// stickers.addStickerToSet#8653febe stickerset:InputStickerSet sticker:InputStickerSetItem = messages.StickerSet;
	StickersAddStickerToSet(ctx context.Context, in *TLStickersAddStickerToSet, opts ...grpc.CallOption) (*Messages_StickerSet, error)
}

type rPCstickersClient struct {
	cc *grpc.ClientConn
}

func NewRPCstickersClient(cc *grpc.ClientConn) RPCstickersClient {
	return &rPCstickersClient{cc}
}

func (c *rPCstickersClient) StickersCreateStickerSet(ctx context.Context, in *TLStickersCreateStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	out := new(Messages_StickerSet)
	err := grpc.Invoke(ctx, "/mtproto.RPCstickers/stickers_createStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCstickersClient) StickersRemoveStickerFromSet(ctx context.Context, in *TLStickersRemoveStickerFromSet, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	out := new(Messages_StickerSet)
	err := grpc.Invoke(ctx, "/mtproto.RPCstickers/stickers_removeStickerFromSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCstickersClient) StickersChangeStickerPosition(ctx context.Context, in *TLStickersChangeStickerPosition, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	out := new(Messages_StickerSet)
	err := grpc.Invoke(ctx, "/mtproto.RPCstickers/stickers_changeStickerPosition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCstickersClient) StickersAddStickerToSet(ctx context.Context, in *TLStickersAddStickerToSet, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	out := new(Messages_StickerSet)
	err := grpc.Invoke(ctx, "/mtproto.RPCstickers/stickers_addStickerToSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCstickers service

type RPCstickersServer interface {
	// stickers.createStickerSet#9bd86e6a flags:# masks:flags.0?true user_id:InputUser title:string short_name:string stickers:Vector<InputStickerSetItem> = messages.StickerSet;
	StickersCreateStickerSet(context.Context, *TLStickersCreateStickerSet) (*Messages_StickerSet, error)
	// stickers.removeStickerFromSet#f7760f51 sticker:InputDocument = messages.StickerSet;
	StickersRemoveStickerFromSet(context.Context, *TLStickersRemoveStickerFromSet) (*Messages_StickerSet, error)
	// stickers.changeStickerPosition#ffb6d4ca sticker:InputDocument position:int = messages.StickerSet;
	StickersChangeStickerPosition(context.Context, *TLStickersChangeStickerPosition) (*Messages_StickerSet, error)
	// stickers.addStickerToSet#8653febe stickerset:InputStickerSet sticker:InputStickerSetItem = messages.StickerSet;
	StickersAddStickerToSet(context.Context, *TLStickersAddStickerToSet) (*Messages_StickerSet, error)
}

func RegisterRPCstickersServer(s *grpc.Server, srv RPCstickersServer) {
	s.RegisterService(&_RPCstickers_serviceDesc, srv)
}

func _RPCstickers_StickersCreateStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersCreateStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCstickersServer).StickersCreateStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCstickers/StickersCreateStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCstickersServer).StickersCreateStickerSet(ctx, req.(*TLStickersCreateStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCstickers_StickersRemoveStickerFromSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersRemoveStickerFromSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCstickersServer).StickersRemoveStickerFromSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCstickers/StickersRemoveStickerFromSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCstickersServer).StickersRemoveStickerFromSet(ctx, req.(*TLStickersRemoveStickerFromSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCstickers_StickersChangeStickerPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersChangeStickerPosition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCstickersServer).StickersChangeStickerPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCstickers/StickersChangeStickerPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCstickersServer).StickersChangeStickerPosition(ctx, req.(*TLStickersChangeStickerPosition))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCstickers_StickersAddStickerToSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersAddStickerToSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCstickersServer).StickersAddStickerToSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCstickers/StickersAddStickerToSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCstickersServer).StickersAddStickerToSet(ctx, req.(*TLStickersAddStickerToSet))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCstickers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCstickers",
	HandlerType: (*RPCstickersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "stickers_createStickerSet",
			Handler:    _RPCstickers_StickersCreateStickerSet_Handler,
		},
		{
			MethodName: "stickers_removeStickerFromSet",
			Handler:    _RPCstickers_StickersRemoveStickerFromSet_Handler,
		},
		{
			MethodName: "stickers_changeStickerPosition",
			Handler:    _RPCstickers_StickersChangeStickerPosition_Handler,
		},
		{
			MethodName: "stickers_addStickerToSet",
			Handler:    _RPCstickers_StickersAddStickerToSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// Client API for RPClangpack service

type RPClangpackClient interface {
	// langpack.getLangPack#9ab5c58e lang_code:string = LangPackDifference;
	LangpackGetLangPack(ctx context.Context, in *TLLangpackGetLangPack, opts ...grpc.CallOption) (*LangPackDifference, error)
	// langpack.getStrings#2e1ee318 lang_code:string keys:Vector<string> = Vector<LangPackString>;
	LangpackGetStrings(ctx context.Context, in *TLLangpackGetStrings, opts ...grpc.CallOption) (*Vector_LangPackString, error)
	// langpack.getDifference#b2e4d7d from_version:int = LangPackDifference;
	LangpackGetDifference(ctx context.Context, in *TLLangpackGetDifference, opts ...grpc.CallOption) (*LangPackDifference, error)
	// langpack.getLanguages#800fd57d = Vector<LangPackLanguage>;
	LangpackGetLanguages(ctx context.Context, in *TLLangpackGetLanguages, opts ...grpc.CallOption) (*Vector_LangPackLanguage, error)
}

type rPClangpackClient struct {
	cc *grpc.ClientConn
}

func NewRPClangpackClient(cc *grpc.ClientConn) RPClangpackClient {
	return &rPClangpackClient{cc}
}

func (c *rPClangpackClient) LangpackGetLangPack(ctx context.Context, in *TLLangpackGetLangPack, opts ...grpc.CallOption) (*LangPackDifference, error) {
	out := new(LangPackDifference)
	err := grpc.Invoke(ctx, "/mtproto.RPClangpack/langpack_getLangPack", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPClangpackClient) LangpackGetStrings(ctx context.Context, in *TLLangpackGetStrings, opts ...grpc.CallOption) (*Vector_LangPackString, error) {
	out := new(Vector_LangPackString)
	err := grpc.Invoke(ctx, "/mtproto.RPClangpack/langpack_getStrings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPClangpackClient) LangpackGetDifference(ctx context.Context, in *TLLangpackGetDifference, opts ...grpc.CallOption) (*LangPackDifference, error) {
	out := new(LangPackDifference)
	err := grpc.Invoke(ctx, "/mtproto.RPClangpack/langpack_getDifference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPClangpackClient) LangpackGetLanguages(ctx context.Context, in *TLLangpackGetLanguages, opts ...grpc.CallOption) (*Vector_LangPackLanguage, error) {
	out := new(Vector_LangPackLanguage)
	err := grpc.Invoke(ctx, "/mtproto.RPClangpack/langpack_getLanguages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPClangpack service

type RPClangpackServer interface {
	// langpack.getLangPack#9ab5c58e lang_code:string = LangPackDifference;
	LangpackGetLangPack(context.Context, *TLLangpackGetLangPack) (*LangPackDifference, error)
	// langpack.getStrings#2e1ee318 lang_code:string keys:Vector<string> = Vector<LangPackString>;
	LangpackGetStrings(context.Context, *TLLangpackGetStrings) (*Vector_LangPackString, error)
	// langpack.getDifference#b2e4d7d from_version:int = LangPackDifference;
	LangpackGetDifference(context.Context, *TLLangpackGetDifference) (*LangPackDifference, error)
	// langpack.getLanguages#800fd57d = Vector<LangPackLanguage>;
	LangpackGetLanguages(context.Context, *TLLangpackGetLanguages) (*Vector_LangPackLanguage, error)
}

func RegisterRPClangpackServer(s *grpc.Server, srv RPClangpackServer) {
	s.RegisterService(&_RPClangpack_serviceDesc, srv)
}

func _RPClangpack_LangpackGetLangPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetLangPack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPClangpackServer).LangpackGetLangPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPClangpack/LangpackGetLangPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPClangpackServer).LangpackGetLangPack(ctx, req.(*TLLangpackGetLangPack))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPClangpack_LangpackGetStrings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetStrings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPClangpackServer).LangpackGetStrings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPClangpack/LangpackGetStrings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPClangpackServer).LangpackGetStrings(ctx, req.(*TLLangpackGetStrings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPClangpack_LangpackGetDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPClangpackServer).LangpackGetDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPClangpack/LangpackGetDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPClangpackServer).LangpackGetDifference(ctx, req.(*TLLangpackGetDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPClangpack_LangpackGetLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetLanguages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPClangpackServer).LangpackGetLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPClangpack/LangpackGetLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPClangpackServer).LangpackGetLanguages(ctx, req.(*TLLangpackGetLanguages))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPClangpack_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPClangpack",
	HandlerType: (*RPClangpackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "langpack_getLangPack",
			Handler:    _RPClangpack_LangpackGetLangPack_Handler,
		},
		{
			MethodName: "langpack_getStrings",
			Handler:    _RPClangpack_LangpackGetStrings_Handler,
		},
		{
			MethodName: "langpack_getDifference",
			Handler:    _RPClangpack_LangpackGetDifference_Handler,
		},
		{
			MethodName: "langpack_getLanguages",
			Handler:    _RPClangpack_LangpackGetLanguages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// Client API for RPCauth service

type RPCauthClient interface {
	// auth.checkPhone#6fe51dfb phone_number:string = auth.CheckedPhone;
	AuthCheckPhone(ctx context.Context, in *TLAuthCheckPhone, opts ...grpc.CallOption) (*Auth_CheckedPhone, error)
	// auth.sendCode#86aef0ec flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool api_id:int api_hash:string = auth.SentCode;
	AuthSendCode(ctx context.Context, in *TLAuthSendCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	// auth.signUp#1b067634 phone_number:string phone_code_hash:string phone_code:string first_name:string last_name:string = auth.Authorization;
	AuthSignUp(ctx context.Context, in *TLAuthSignUp, opts ...grpc.CallOption) (*Auth_Authorization, error)
	// auth.signIn#bcd51581 phone_number:string phone_code_hash:string phone_code:string = auth.Authorization;
	AuthSignIn(ctx context.Context, in *TLAuthSignIn, opts ...grpc.CallOption) (*Auth_Authorization, error)
	// auth.logOut#5717da40 = Bool;
	AuthLogOut(ctx context.Context, in *TLAuthLogOut, opts ...grpc.CallOption) (*Bool, error)
	// auth.resetAuthorizations#9fab0d1a = Bool;
	AuthResetAuthorizations(ctx context.Context, in *TLAuthResetAuthorizations, opts ...grpc.CallOption) (*Bool, error)
	// auth.sendInvites#771c1d97 phone_numbers:Vector<string> message:string = Bool;
	AuthSendInvites(ctx context.Context, in *TLAuthSendInvites, opts ...grpc.CallOption) (*Bool, error)
	// auth.exportAuthorization#e5bfffcd dc_id:int = auth.ExportedAuthorization;
	AuthExportAuthorization(ctx context.Context, in *TLAuthExportAuthorization, opts ...grpc.CallOption) (*Auth_ExportedAuthorization, error)
	// auth.importAuthorization#e3ef9613 id:int bytes:bytes = auth.Authorization;
	AuthImportAuthorization(ctx context.Context, in *TLAuthImportAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error)
	// auth.bindTempAuthKey#cdd42a05 perm_auth_key_id:long nonce:long expires_at:int encrypted_message:bytes = Bool;
	AuthBindTempAuthKey(ctx context.Context, in *TLAuthBindTempAuthKey, opts ...grpc.CallOption) (*Bool, error)
	// auth.importBotAuthorization#67a3ff2c flags:int api_id:int api_hash:string bot_auth_token:string = auth.Authorization;
	AuthImportBotAuthorization(ctx context.Context, in *TLAuthImportBotAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error)
	// auth.checkPassword#a63011e password_hash:bytes = auth.Authorization;
	AuthCheckPassword(ctx context.Context, in *TLAuthCheckPassword, opts ...grpc.CallOption) (*Auth_Authorization, error)
	// auth.requestPasswordRecovery#d897bc66 = auth.PasswordRecovery;
	AuthRequestPasswordRecovery(ctx context.Context, in *TLAuthRequestPasswordRecovery, opts ...grpc.CallOption) (*Auth_PasswordRecovery, error)
	// auth.recoverPassword#4ea56e92 code:string = auth.Authorization;
	AuthRecoverPassword(ctx context.Context, in *TLAuthRecoverPassword, opts ...grpc.CallOption) (*Auth_Authorization, error)
	// auth.resendCode#3ef1a9bf phone_number:string phone_code_hash:string = auth.SentCode;
	AuthResendCode(ctx context.Context, in *TLAuthResendCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	// auth.cancelCode#1f040578 phone_number:string phone_code_hash:string = Bool;
	AuthCancelCode(ctx context.Context, in *TLAuthCancelCode, opts ...grpc.CallOption) (*Bool, error)
	// auth.dropTempAuthKeys#8e48a188 except_auth_keys:Vector<long> = Bool;
	AuthDropTempAuthKeys(ctx context.Context, in *TLAuthDropTempAuthKeys, opts ...grpc.CallOption) (*Bool, error)
}

type rPCauthClient struct {
	cc *grpc.ClientConn
}

func NewRPCauthClient(cc *grpc.ClientConn) RPCauthClient {
	return &rPCauthClient{cc}
}

func (c *rPCauthClient) AuthCheckPhone(ctx context.Context, in *TLAuthCheckPhone, opts ...grpc.CallOption) (*Auth_CheckedPhone, error) {
	out := new(Auth_CheckedPhone)
	err := grpc.Invoke(ctx, "/mtproto.RPCauth/auth_checkPhone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCauthClient) AuthSendCode(ctx context.Context, in *TLAuthSendCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	out := new(Auth_SentCode)
	err := grpc.Invoke(ctx, "/mtproto.RPCauth/auth_sendCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCauthClient) AuthSignUp(ctx context.Context, in *TLAuthSignUp, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	out := new(Auth_Authorization)
	err := grpc.Invoke(ctx, "/mtproto.RPCauth/auth_signUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCauthClient) AuthSignIn(ctx context.Context, in *TLAuthSignIn, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	out := new(Auth_Authorization)
	err := grpc.Invoke(ctx, "/mtproto.RPCauth/auth_signIn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCauthClient) AuthLogOut(ctx context.Context, in *TLAuthLogOut, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCauth/auth_logOut", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCauthClient) AuthResetAuthorizations(ctx context.Context, in *TLAuthResetAuthorizations, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCauth/auth_resetAuthorizations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCauthClient) AuthSendInvites(ctx context.Context, in *TLAuthSendInvites, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCauth/auth_sendInvites", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCauthClient) AuthExportAuthorization(ctx context.Context, in *TLAuthExportAuthorization, opts ...grpc.CallOption) (*Auth_ExportedAuthorization, error) {
	out := new(Auth_ExportedAuthorization)
	err := grpc.Invoke(ctx, "/mtproto.RPCauth/auth_exportAuthorization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCauthClient) AuthImportAuthorization(ctx context.Context, in *TLAuthImportAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	out := new(Auth_Authorization)
	err := grpc.Invoke(ctx, "/mtproto.RPCauth/auth_importAuthorization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCauthClient) AuthBindTempAuthKey(ctx context.Context, in *TLAuthBindTempAuthKey, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCauth/auth_bindTempAuthKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCauthClient) AuthImportBotAuthorization(ctx context.Context, in *TLAuthImportBotAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	out := new(Auth_Authorization)
	err := grpc.Invoke(ctx, "/mtproto.RPCauth/auth_importBotAuthorization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCauthClient) AuthCheckPassword(ctx context.Context, in *TLAuthCheckPassword, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	out := new(Auth_Authorization)
	err := grpc.Invoke(ctx, "/mtproto.RPCauth/auth_checkPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCauthClient) AuthRequestPasswordRecovery(ctx context.Context, in *TLAuthRequestPasswordRecovery, opts ...grpc.CallOption) (*Auth_PasswordRecovery, error) {
	out := new(Auth_PasswordRecovery)
	err := grpc.Invoke(ctx, "/mtproto.RPCauth/auth_requestPasswordRecovery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCauthClient) AuthRecoverPassword(ctx context.Context, in *TLAuthRecoverPassword, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	out := new(Auth_Authorization)
	err := grpc.Invoke(ctx, "/mtproto.RPCauth/auth_recoverPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCauthClient) AuthResendCode(ctx context.Context, in *TLAuthResendCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	out := new(Auth_SentCode)
	err := grpc.Invoke(ctx, "/mtproto.RPCauth/auth_resendCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCauthClient) AuthCancelCode(ctx context.Context, in *TLAuthCancelCode, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCauth/auth_cancelCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCauthClient) AuthDropTempAuthKeys(ctx context.Context, in *TLAuthDropTempAuthKeys, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCauth/auth_dropTempAuthKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCauth service

type RPCauthServer interface {
	// auth.checkPhone#6fe51dfb phone_number:string = auth.CheckedPhone;
	AuthCheckPhone(context.Context, *TLAuthCheckPhone) (*Auth_CheckedPhone, error)
	// auth.sendCode#86aef0ec flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool api_id:int api_hash:string = auth.SentCode;
	AuthSendCode(context.Context, *TLAuthSendCode) (*Auth_SentCode, error)
	// auth.signUp#1b067634 phone_number:string phone_code_hash:string phone_code:string first_name:string last_name:string = auth.Authorization;
	AuthSignUp(context.Context, *TLAuthSignUp) (*Auth_Authorization, error)
	// auth.signIn#bcd51581 phone_number:string phone_code_hash:string phone_code:string = auth.Authorization;
	AuthSignIn(context.Context, *TLAuthSignIn) (*Auth_Authorization, error)
	// auth.logOut#5717da40 = Bool;
	AuthLogOut(context.Context, *TLAuthLogOut) (*Bool, error)
	// auth.resetAuthorizations#9fab0d1a = Bool;
	AuthResetAuthorizations(context.Context, *TLAuthResetAuthorizations) (*Bool, error)
	// auth.sendInvites#771c1d97 phone_numbers:Vector<string> message:string = Bool;
	AuthSendInvites(context.Context, *TLAuthSendInvites) (*Bool, error)
	// auth.exportAuthorization#e5bfffcd dc_id:int = auth.ExportedAuthorization;
	AuthExportAuthorization(context.Context, *TLAuthExportAuthorization) (*Auth_ExportedAuthorization, error)
	// auth.importAuthorization#e3ef9613 id:int bytes:bytes = auth.Authorization;
	AuthImportAuthorization(context.Context, *TLAuthImportAuthorization) (*Auth_Authorization, error)
	// auth.bindTempAuthKey#cdd42a05 perm_auth_key_id:long nonce:long expires_at:int encrypted_message:bytes = Bool;
	AuthBindTempAuthKey(context.Context, *TLAuthBindTempAuthKey) (*Bool, error)
	// auth.importBotAuthorization#67a3ff2c flags:int api_id:int api_hash:string bot_auth_token:string = auth.Authorization;
	AuthImportBotAuthorization(context.Context, *TLAuthImportBotAuthorization) (*Auth_Authorization, error)
	// auth.checkPassword#a63011e password_hash:bytes = auth.Authorization;
	AuthCheckPassword(context.Context, *TLAuthCheckPassword) (*Auth_Authorization, error)
	// auth.requestPasswordRecovery#d897bc66 = auth.PasswordRecovery;
	AuthRequestPasswordRecovery(context.Context, *TLAuthRequestPasswordRecovery) (*Auth_PasswordRecovery, error)
	// auth.recoverPassword#4ea56e92 code:string = auth.Authorization;
	AuthRecoverPassword(context.Context, *TLAuthRecoverPassword) (*Auth_Authorization, error)
	// auth.resendCode#3ef1a9bf phone_number:string phone_code_hash:string = auth.SentCode;
	AuthResendCode(context.Context, *TLAuthResendCode) (*Auth_SentCode, error)
	// auth.cancelCode#1f040578 phone_number:string phone_code_hash:string = Bool;
	AuthCancelCode(context.Context, *TLAuthCancelCode) (*Bool, error)
	// auth.dropTempAuthKeys#8e48a188 except_auth_keys:Vector<long> = Bool;
	AuthDropTempAuthKeys(context.Context, *TLAuthDropTempAuthKeys) (*Bool, error)
}

func RegisterRPCauthServer(s *grpc.Server, srv RPCauthServer) {
	s.RegisterService(&_RPCauth_serviceDesc, srv)
}

func _RPCauth_AuthCheckPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthCheckPhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCauthServer).AuthCheckPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCauth/AuthCheckPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCauthServer).AuthCheckPhone(ctx, req.(*TLAuthCheckPhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCauth_AuthSendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSendCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCauthServer).AuthSendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCauth/AuthSendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCauthServer).AuthSendCode(ctx, req.(*TLAuthSendCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCauth_AuthSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCauthServer).AuthSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCauth/AuthSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCauthServer).AuthSignUp(ctx, req.(*TLAuthSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCauth_AuthSignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSignIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCauthServer).AuthSignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCauth/AuthSignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCauthServer).AuthSignIn(ctx, req.(*TLAuthSignIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCauth_AuthLogOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthLogOut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCauthServer).AuthLogOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCauth/AuthLogOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCauthServer).AuthLogOut(ctx, req.(*TLAuthLogOut))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCauth_AuthResetAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthResetAuthorizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCauthServer).AuthResetAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCauth/AuthResetAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCauthServer).AuthResetAuthorizations(ctx, req.(*TLAuthResetAuthorizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCauth_AuthSendInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSendInvites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCauthServer).AuthSendInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCauth/AuthSendInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCauthServer).AuthSendInvites(ctx, req.(*TLAuthSendInvites))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCauth_AuthExportAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthExportAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCauthServer).AuthExportAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCauth/AuthExportAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCauthServer).AuthExportAuthorization(ctx, req.(*TLAuthExportAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCauth_AuthImportAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthImportAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCauthServer).AuthImportAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCauth/AuthImportAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCauthServer).AuthImportAuthorization(ctx, req.(*TLAuthImportAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCauth_AuthBindTempAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthBindTempAuthKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCauthServer).AuthBindTempAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCauth/AuthBindTempAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCauthServer).AuthBindTempAuthKey(ctx, req.(*TLAuthBindTempAuthKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCauth_AuthImportBotAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthImportBotAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCauthServer).AuthImportBotAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCauth/AuthImportBotAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCauthServer).AuthImportBotAuthorization(ctx, req.(*TLAuthImportBotAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCauth_AuthCheckPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthCheckPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCauthServer).AuthCheckPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCauth/AuthCheckPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCauthServer).AuthCheckPassword(ctx, req.(*TLAuthCheckPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCauth_AuthRequestPasswordRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthRequestPasswordRecovery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCauthServer).AuthRequestPasswordRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCauth/AuthRequestPasswordRecovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCauthServer).AuthRequestPasswordRecovery(ctx, req.(*TLAuthRequestPasswordRecovery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCauth_AuthRecoverPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthRecoverPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCauthServer).AuthRecoverPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCauth/AuthRecoverPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCauthServer).AuthRecoverPassword(ctx, req.(*TLAuthRecoverPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCauth_AuthResendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthResendCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCauthServer).AuthResendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCauth/AuthResendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCauthServer).AuthResendCode(ctx, req.(*TLAuthResendCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCauth_AuthCancelCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthCancelCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCauthServer).AuthCancelCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCauth/AuthCancelCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCauthServer).AuthCancelCode(ctx, req.(*TLAuthCancelCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCauth_AuthDropTempAuthKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthDropTempAuthKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCauthServer).AuthDropTempAuthKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCauth/AuthDropTempAuthKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCauthServer).AuthDropTempAuthKeys(ctx, req.(*TLAuthDropTempAuthKeys))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCauth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCauth",
	HandlerType: (*RPCauthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "auth_checkPhone",
			Handler:    _RPCauth_AuthCheckPhone_Handler,
		},
		{
			MethodName: "auth_sendCode",
			Handler:    _RPCauth_AuthSendCode_Handler,
		},
		{
			MethodName: "auth_signUp",
			Handler:    _RPCauth_AuthSignUp_Handler,
		},
		{
			MethodName: "auth_signIn",
			Handler:    _RPCauth_AuthSignIn_Handler,
		},
		{
			MethodName: "auth_logOut",
			Handler:    _RPCauth_AuthLogOut_Handler,
		},
		{
			MethodName: "auth_resetAuthorizations",
			Handler:    _RPCauth_AuthResetAuthorizations_Handler,
		},
		{
			MethodName: "auth_sendInvites",
			Handler:    _RPCauth_AuthSendInvites_Handler,
		},
		{
			MethodName: "auth_exportAuthorization",
			Handler:    _RPCauth_AuthExportAuthorization_Handler,
		},
		{
			MethodName: "auth_importAuthorization",
			Handler:    _RPCauth_AuthImportAuthorization_Handler,
		},
		{
			MethodName: "auth_bindTempAuthKey",
			Handler:    _RPCauth_AuthBindTempAuthKey_Handler,
		},
		{
			MethodName: "auth_importBotAuthorization",
			Handler:    _RPCauth_AuthImportBotAuthorization_Handler,
		},
		{
			MethodName: "auth_checkPassword",
			Handler:    _RPCauth_AuthCheckPassword_Handler,
		},
		{
			MethodName: "auth_requestPasswordRecovery",
			Handler:    _RPCauth_AuthRequestPasswordRecovery_Handler,
		},
		{
			MethodName: "auth_recoverPassword",
			Handler:    _RPCauth_AuthRecoverPassword_Handler,
		},
		{
			MethodName: "auth_resendCode",
			Handler:    _RPCauth_AuthResendCode_Handler,
		},
		{
			MethodName: "auth_cancelCode",
			Handler:    _RPCauth_AuthCancelCode_Handler,
		},
		{
			MethodName: "auth_dropTempAuthKeys",
			Handler:    _RPCauth_AuthDropTempAuthKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// Client API for RPCphotos service

type RPCphotosClient interface {
	// photos.updateProfilePhoto#f0bb5152 id:InputPhoto = UserProfilePhoto;
	PhotosUpdateProfilePhoto(ctx context.Context, in *TLPhotosUpdateProfilePhoto, opts ...grpc.CallOption) (*UserProfilePhoto, error)
	// photos.uploadProfilePhoto#4f32c098 file:InputFile = photos.Photo;
	PhotosUploadProfilePhoto(ctx context.Context, in *TLPhotosUploadProfilePhoto, opts ...grpc.CallOption) (*Photos_Photo, error)
	// photos.deletePhotos#87cf7f2f id:Vector<InputPhoto> = Vector<long>;
	PhotosDeletePhotos(ctx context.Context, in *TLPhotosDeletePhotos, opts ...grpc.CallOption) (*VectorLong, error)
	// photos.getUserPhotos#91cd32a8 user_id:InputUser offset:int max_id:long limit:int = photos.Photos;
	PhotosGetUserPhotos(ctx context.Context, in *TLPhotosGetUserPhotos, opts ...grpc.CallOption) (*Photos_Photos, error)
}

type rPCphotosClient struct {
	cc *grpc.ClientConn
}

func NewRPCphotosClient(cc *grpc.ClientConn) RPCphotosClient {
	return &rPCphotosClient{cc}
}

func (c *rPCphotosClient) PhotosUpdateProfilePhoto(ctx context.Context, in *TLPhotosUpdateProfilePhoto, opts ...grpc.CallOption) (*UserProfilePhoto, error) {
	out := new(UserProfilePhoto)
	err := grpc.Invoke(ctx, "/mtproto.RPCphotos/photos_updateProfilePhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCphotosClient) PhotosUploadProfilePhoto(ctx context.Context, in *TLPhotosUploadProfilePhoto, opts ...grpc.CallOption) (*Photos_Photo, error) {
	out := new(Photos_Photo)
	err := grpc.Invoke(ctx, "/mtproto.RPCphotos/photos_uploadProfilePhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCphotosClient) PhotosDeletePhotos(ctx context.Context, in *TLPhotosDeletePhotos, opts ...grpc.CallOption) (*VectorLong, error) {
	out := new(VectorLong)
	err := grpc.Invoke(ctx, "/mtproto.RPCphotos/photos_deletePhotos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCphotosClient) PhotosGetUserPhotos(ctx context.Context, in *TLPhotosGetUserPhotos, opts ...grpc.CallOption) (*Photos_Photos, error) {
	out := new(Photos_Photos)
	err := grpc.Invoke(ctx, "/mtproto.RPCphotos/photos_getUserPhotos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCphotos service

type RPCphotosServer interface {
	// photos.updateProfilePhoto#f0bb5152 id:InputPhoto = UserProfilePhoto;
	PhotosUpdateProfilePhoto(context.Context, *TLPhotosUpdateProfilePhoto) (*UserProfilePhoto, error)
	// photos.uploadProfilePhoto#4f32c098 file:InputFile = photos.Photo;
	PhotosUploadProfilePhoto(context.Context, *TLPhotosUploadProfilePhoto) (*Photos_Photo, error)
	// photos.deletePhotos#87cf7f2f id:Vector<InputPhoto> = Vector<long>;
	PhotosDeletePhotos(context.Context, *TLPhotosDeletePhotos) (*VectorLong, error)
	// photos.getUserPhotos#91cd32a8 user_id:InputUser offset:int max_id:long limit:int = photos.Photos;
	PhotosGetUserPhotos(context.Context, *TLPhotosGetUserPhotos) (*Photos_Photos, error)
}

func RegisterRPCphotosServer(s *grpc.Server, srv RPCphotosServer) {
	s.RegisterService(&_RPCphotos_serviceDesc, srv)
}

func _RPCphotos_PhotosUpdateProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosUpdateProfilePhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCphotosServer).PhotosUpdateProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCphotos/PhotosUpdateProfilePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCphotosServer).PhotosUpdateProfilePhoto(ctx, req.(*TLPhotosUpdateProfilePhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCphotos_PhotosUploadProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosUploadProfilePhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCphotosServer).PhotosUploadProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCphotos/PhotosUploadProfilePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCphotosServer).PhotosUploadProfilePhoto(ctx, req.(*TLPhotosUploadProfilePhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCphotos_PhotosDeletePhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosDeletePhotos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCphotosServer).PhotosDeletePhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCphotos/PhotosDeletePhotos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCphotosServer).PhotosDeletePhotos(ctx, req.(*TLPhotosDeletePhotos))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCphotos_PhotosGetUserPhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosGetUserPhotos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCphotosServer).PhotosGetUserPhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCphotos/PhotosGetUserPhotos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCphotosServer).PhotosGetUserPhotos(ctx, req.(*TLPhotosGetUserPhotos))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCphotos_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCphotos",
	HandlerType: (*RPCphotosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "photos_updateProfilePhoto",
			Handler:    _RPCphotos_PhotosUpdateProfilePhoto_Handler,
		},
		{
			MethodName: "photos_uploadProfilePhoto",
			Handler:    _RPCphotos_PhotosUploadProfilePhoto_Handler,
		},
		{
			MethodName: "photos_deletePhotos",
			Handler:    _RPCphotos_PhotosDeletePhotos_Handler,
		},
		{
			MethodName: "photos_getUserPhotos",
			Handler:    _RPCphotos_PhotosGetUserPhotos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// Client API for RPChelp service

type RPChelpClient interface {
	// help.getConfig#c4f9186b = Config;
	HelpGetConfig(ctx context.Context, in *TLHelpGetConfig, opts ...grpc.CallOption) (*Config, error)
	// help.getNearestDc#1fb33026 = NearestDc;
	HelpGetNearestDc(ctx context.Context, in *TLHelpGetNearestDc, opts ...grpc.CallOption) (*NearestDc, error)
	// help.getAppUpdate#ae2de196 = help.AppUpdate;
	HelpGetAppUpdate(ctx context.Context, in *TLHelpGetAppUpdate, opts ...grpc.CallOption) (*Help_AppUpdate, error)
	// help.saveAppLog#6f02f748 events:Vector<InputAppEvent> = Bool;
	HelpSaveAppLog(ctx context.Context, in *TLHelpSaveAppLog, opts ...grpc.CallOption) (*Bool, error)
	// help.getInviteText#4d392343 = help.InviteText;
	HelpGetInviteText(ctx context.Context, in *TLHelpGetInviteText, opts ...grpc.CallOption) (*Help_InviteText, error)
	// help.getSupport#9cdf08cd = help.Support;
	HelpGetSupport(ctx context.Context, in *TLHelpGetSupport, opts ...grpc.CallOption) (*Help_Support, error)
	// help.getAppChangelog#9010ef6f prev_app_version:string = Updates;
	HelpGetAppChangelog(ctx context.Context, in *TLHelpGetAppChangelog, opts ...grpc.CallOption) (*Updates, error)
	// help.getTermsOfService#350170f3 = help.TermsOfService;
	HelpGetTermsOfService(ctx context.Context, in *TLHelpGetTermsOfService, opts ...grpc.CallOption) (*Help_TermsOfService, error)
	// help.setBotUpdatesStatus#ec22cfcd pending_updates_count:int message:string = Bool;
	HelpSetBotUpdatesStatus(ctx context.Context, in *TLHelpSetBotUpdatesStatus, opts ...grpc.CallOption) (*Bool, error)
	// help.getCdnConfig#52029342 = CdnConfig;
	HelpGetCdnConfig(ctx context.Context, in *TLHelpGetCdnConfig, opts ...grpc.CallOption) (*CdnConfig, error)
}

type rPChelpClient struct {
	cc *grpc.ClientConn
}

func NewRPChelpClient(cc *grpc.ClientConn) RPChelpClient {
	return &rPChelpClient{cc}
}

func (c *rPChelpClient) HelpGetConfig(ctx context.Context, in *TLHelpGetConfig, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := grpc.Invoke(ctx, "/mtproto.RPChelp/help_getConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPChelpClient) HelpGetNearestDc(ctx context.Context, in *TLHelpGetNearestDc, opts ...grpc.CallOption) (*NearestDc, error) {
	out := new(NearestDc)
	err := grpc.Invoke(ctx, "/mtproto.RPChelp/help_getNearestDc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPChelpClient) HelpGetAppUpdate(ctx context.Context, in *TLHelpGetAppUpdate, opts ...grpc.CallOption) (*Help_AppUpdate, error) {
	out := new(Help_AppUpdate)
	err := grpc.Invoke(ctx, "/mtproto.RPChelp/help_getAppUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPChelpClient) HelpSaveAppLog(ctx context.Context, in *TLHelpSaveAppLog, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPChelp/help_saveAppLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPChelpClient) HelpGetInviteText(ctx context.Context, in *TLHelpGetInviteText, opts ...grpc.CallOption) (*Help_InviteText, error) {
	out := new(Help_InviteText)
	err := grpc.Invoke(ctx, "/mtproto.RPChelp/help_getInviteText", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPChelpClient) HelpGetSupport(ctx context.Context, in *TLHelpGetSupport, opts ...grpc.CallOption) (*Help_Support, error) {
	out := new(Help_Support)
	err := grpc.Invoke(ctx, "/mtproto.RPChelp/help_getSupport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPChelpClient) HelpGetAppChangelog(ctx context.Context, in *TLHelpGetAppChangelog, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPChelp/help_getAppChangelog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPChelpClient) HelpGetTermsOfService(ctx context.Context, in *TLHelpGetTermsOfService, opts ...grpc.CallOption) (*Help_TermsOfService, error) {
	out := new(Help_TermsOfService)
	err := grpc.Invoke(ctx, "/mtproto.RPChelp/help_getTermsOfService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPChelpClient) HelpSetBotUpdatesStatus(ctx context.Context, in *TLHelpSetBotUpdatesStatus, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPChelp/help_setBotUpdatesStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPChelpClient) HelpGetCdnConfig(ctx context.Context, in *TLHelpGetCdnConfig, opts ...grpc.CallOption) (*CdnConfig, error) {
	out := new(CdnConfig)
	err := grpc.Invoke(ctx, "/mtproto.RPChelp/help_getCdnConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPChelp service

type RPChelpServer interface {
	// help.getConfig#c4f9186b = Config;
	HelpGetConfig(context.Context, *TLHelpGetConfig) (*Config, error)
	// help.getNearestDc#1fb33026 = NearestDc;
	HelpGetNearestDc(context.Context, *TLHelpGetNearestDc) (*NearestDc, error)
	// help.getAppUpdate#ae2de196 = help.AppUpdate;
	HelpGetAppUpdate(context.Context, *TLHelpGetAppUpdate) (*Help_AppUpdate, error)
	// help.saveAppLog#6f02f748 events:Vector<InputAppEvent> = Bool;
	HelpSaveAppLog(context.Context, *TLHelpSaveAppLog) (*Bool, error)
	// help.getInviteText#4d392343 = help.InviteText;
	HelpGetInviteText(context.Context, *TLHelpGetInviteText) (*Help_InviteText, error)
	// help.getSupport#9cdf08cd = help.Support;
	HelpGetSupport(context.Context, *TLHelpGetSupport) (*Help_Support, error)
	// help.getAppChangelog#9010ef6f prev_app_version:string = Updates;
	HelpGetAppChangelog(context.Context, *TLHelpGetAppChangelog) (*Updates, error)
	// help.getTermsOfService#350170f3 = help.TermsOfService;
	HelpGetTermsOfService(context.Context, *TLHelpGetTermsOfService) (*Help_TermsOfService, error)
	// help.setBotUpdatesStatus#ec22cfcd pending_updates_count:int message:string = Bool;
	HelpSetBotUpdatesStatus(context.Context, *TLHelpSetBotUpdatesStatus) (*Bool, error)
	// help.getCdnConfig#52029342 = CdnConfig;
	HelpGetCdnConfig(context.Context, *TLHelpGetCdnConfig) (*CdnConfig, error)
}

func RegisterRPChelpServer(s *grpc.Server, srv RPChelpServer) {
	s.RegisterService(&_RPChelp_serviceDesc, srv)
}

func _RPChelp_HelpGetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPChelpServer).HelpGetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPChelp/HelpGetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPChelpServer).HelpGetConfig(ctx, req.(*TLHelpGetConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPChelp_HelpGetNearestDc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetNearestDc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPChelpServer).HelpGetNearestDc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPChelp/HelpGetNearestDc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPChelpServer).HelpGetNearestDc(ctx, req.(*TLHelpGetNearestDc))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPChelp_HelpGetAppUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetAppUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPChelpServer).HelpGetAppUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPChelp/HelpGetAppUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPChelpServer).HelpGetAppUpdate(ctx, req.(*TLHelpGetAppUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPChelp_HelpSaveAppLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpSaveAppLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPChelpServer).HelpSaveAppLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPChelp/HelpSaveAppLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPChelpServer).HelpSaveAppLog(ctx, req.(*TLHelpSaveAppLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPChelp_HelpGetInviteText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetInviteText)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPChelpServer).HelpGetInviteText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPChelp/HelpGetInviteText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPChelpServer).HelpGetInviteText(ctx, req.(*TLHelpGetInviteText))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPChelp_HelpGetSupport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetSupport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPChelpServer).HelpGetSupport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPChelp/HelpGetSupport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPChelpServer).HelpGetSupport(ctx, req.(*TLHelpGetSupport))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPChelp_HelpGetAppChangelog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetAppChangelog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPChelpServer).HelpGetAppChangelog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPChelp/HelpGetAppChangelog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPChelpServer).HelpGetAppChangelog(ctx, req.(*TLHelpGetAppChangelog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPChelp_HelpGetTermsOfService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetTermsOfService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPChelpServer).HelpGetTermsOfService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPChelp/HelpGetTermsOfService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPChelpServer).HelpGetTermsOfService(ctx, req.(*TLHelpGetTermsOfService))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPChelp_HelpSetBotUpdatesStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpSetBotUpdatesStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPChelpServer).HelpSetBotUpdatesStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPChelp/HelpSetBotUpdatesStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPChelpServer).HelpSetBotUpdatesStatus(ctx, req.(*TLHelpSetBotUpdatesStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPChelp_HelpGetCdnConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetCdnConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPChelpServer).HelpGetCdnConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPChelp/HelpGetCdnConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPChelpServer).HelpGetCdnConfig(ctx, req.(*TLHelpGetCdnConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPChelp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPChelp",
	HandlerType: (*RPChelpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "help_getConfig",
			Handler:    _RPChelp_HelpGetConfig_Handler,
		},
		{
			MethodName: "help_getNearestDc",
			Handler:    _RPChelp_HelpGetNearestDc_Handler,
		},
		{
			MethodName: "help_getAppUpdate",
			Handler:    _RPChelp_HelpGetAppUpdate_Handler,
		},
		{
			MethodName: "help_saveAppLog",
			Handler:    _RPChelp_HelpSaveAppLog_Handler,
		},
		{
			MethodName: "help_getInviteText",
			Handler:    _RPChelp_HelpGetInviteText_Handler,
		},
		{
			MethodName: "help_getSupport",
			Handler:    _RPChelp_HelpGetSupport_Handler,
		},
		{
			MethodName: "help_getAppChangelog",
			Handler:    _RPChelp_HelpGetAppChangelog_Handler,
		},
		{
			MethodName: "help_getTermsOfService",
			Handler:    _RPChelp_HelpGetTermsOfService_Handler,
		},
		{
			MethodName: "help_setBotUpdatesStatus",
			Handler:    _RPChelp_HelpSetBotUpdatesStatus_Handler,
		},
		{
			MethodName: "help_getCdnConfig",
			Handler:    _RPChelp_HelpGetCdnConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// Client API for RPCchannels service

type RPCchannelsClient interface {
	// channels.readHistory#cc104937 channel:InputChannel max_id:int = Bool;
	ChannelsReadHistory(ctx context.Context, in *TLChannelsReadHistory, opts ...grpc.CallOption) (*Bool, error)
	// channels.deleteMessages#84c1fd4e channel:InputChannel id:Vector<int> = messages.AffectedMessages;
	ChannelsDeleteMessages(ctx context.Context, in *TLChannelsDeleteMessages, opts ...grpc.CallOption) (*Messages_AffectedMessages, error)
	// channels.deleteUserHistory#d10dd71b channel:InputChannel user_id:InputUser = messages.AffectedHistory;
	ChannelsDeleteUserHistory(ctx context.Context, in *TLChannelsDeleteUserHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error)
	// channels.reportSpam#fe087810 channel:InputChannel user_id:InputUser id:Vector<int> = Bool;
	ChannelsReportSpam(ctx context.Context, in *TLChannelsReportSpam, opts ...grpc.CallOption) (*Bool, error)
	// channels.getMessages#93d7b347 channel:InputChannel id:Vector<int> = messages.Messages;
	ChannelsGetMessages(ctx context.Context, in *TLChannelsGetMessages, opts ...grpc.CallOption) (*Messages_Messages, error)
	// channels.getParticipants#24d98f92 channel:InputChannel filter:ChannelParticipantsFilter offset:int limit:int = channels.ChannelParticipants;
	ChannelsGetParticipants(ctx context.Context, in *TLChannelsGetParticipants, opts ...grpc.CallOption) (*Channels_ChannelParticipants, error)
	// channels.getParticipant#546dd7a6 channel:InputChannel user_id:InputUser = channels.ChannelParticipant;
	ChannelsGetParticipant(ctx context.Context, in *TLChannelsGetParticipant, opts ...grpc.CallOption) (*Channels_ChannelParticipant, error)
	// channels.getChannels#a7f6bbb id:Vector<InputChannel> = messages.Chats;
	ChannelsGetChannels(ctx context.Context, in *TLChannelsGetChannels, opts ...grpc.CallOption) (*Messages_Chats, error)
	// channels.getFullChannel#8736a09 channel:InputChannel = messages.ChatFull;
	ChannelsGetFullChannel(ctx context.Context, in *TLChannelsGetFullChannel, opts ...grpc.CallOption) (*Messages_ChatFull, error)
	// channels.createChannel#f4893d7f flags:# broadcast:flags.0?true megagroup:flags.1?true title:string about:string = Updates;
	ChannelsCreateChannel(ctx context.Context, in *TLChannelsCreateChannel, opts ...grpc.CallOption) (*Updates, error)
	// channels.editAbout#13e27f1e channel:InputChannel about:string = Bool;
	ChannelsEditAbout(ctx context.Context, in *TLChannelsEditAbout, opts ...grpc.CallOption) (*Bool, error)
	// channels.editAdmin#20b88214 channel:InputChannel user_id:InputUser admin_rights:ChannelAdminRights = Updates;
	ChannelsEditAdmin(ctx context.Context, in *TLChannelsEditAdmin, opts ...grpc.CallOption) (*Updates, error)
	// channels.editTitle#566decd0 channel:InputChannel title:string = Updates;
	ChannelsEditTitle(ctx context.Context, in *TLChannelsEditTitle, opts ...grpc.CallOption) (*Updates, error)
	// channels.editPhoto#f12e57c9 channel:InputChannel photo:InputChatPhoto = Updates;
	ChannelsEditPhoto(ctx context.Context, in *TLChannelsEditPhoto, opts ...grpc.CallOption) (*Updates, error)
	// channels.checkUsername#10e6bd2c channel:InputChannel username:string = Bool;
	ChannelsCheckUsername(ctx context.Context, in *TLChannelsCheckUsername, opts ...grpc.CallOption) (*Bool, error)
	// channels.updateUsername#3514b3de channel:InputChannel username:string = Bool;
	ChannelsUpdateUsername(ctx context.Context, in *TLChannelsUpdateUsername, opts ...grpc.CallOption) (*Bool, error)
	// channels.joinChannel#24b524c5 channel:InputChannel = Updates;
	ChannelsJoinChannel(ctx context.Context, in *TLChannelsJoinChannel, opts ...grpc.CallOption) (*Updates, error)
	// channels.leaveChannel#f836aa95 channel:InputChannel = Updates;
	ChannelsLeaveChannel(ctx context.Context, in *TLChannelsLeaveChannel, opts ...grpc.CallOption) (*Updates, error)
	// channels.inviteToChannel#199f3a6c channel:InputChannel users:Vector<InputUser> = Updates;
	ChannelsInviteToChannel(ctx context.Context, in *TLChannelsInviteToChannel, opts ...grpc.CallOption) (*Updates, error)
	// channels.exportInvite#c7560885 channel:InputChannel = ExportedChatInvite;
	ChannelsExportInvite(ctx context.Context, in *TLChannelsExportInvite, opts ...grpc.CallOption) (*ExportedChatInvite, error)
	// channels.deleteChannel#c0111fe3 channel:InputChannel = Updates;
	ChannelsDeleteChannel(ctx context.Context, in *TLChannelsDeleteChannel, opts ...grpc.CallOption) (*Updates, error)
	// channels.toggleInvites#49609307 channel:InputChannel enabled:Bool = Updates;
	ChannelsToggleInvites(ctx context.Context, in *TLChannelsToggleInvites, opts ...grpc.CallOption) (*Updates, error)
	// channels.exportMessageLink#c846d22d channel:InputChannel id:int = ExportedMessageLink;
	ChannelsExportMessageLink(ctx context.Context, in *TLChannelsExportMessageLink, opts ...grpc.CallOption) (*ExportedMessageLink, error)
	// channels.toggleSignatures#1f69b606 channel:InputChannel enabled:Bool = Updates;
	ChannelsToggleSignatures(ctx context.Context, in *TLChannelsToggleSignatures, opts ...grpc.CallOption) (*Updates, error)
	// channels.updatePinnedMessage#a72ded52 flags:# silent:flags.0?true channel:InputChannel id:int = Updates;
	ChannelsUpdatePinnedMessage(ctx context.Context, in *TLChannelsUpdatePinnedMessage, opts ...grpc.CallOption) (*Updates, error)
	// channels.getAdminedPublicChannels#8d8d82d7 = messages.Chats;
	ChannelsGetAdminedPublicChannels(ctx context.Context, in *TLChannelsGetAdminedPublicChannels, opts ...grpc.CallOption) (*Messages_Chats, error)
	// channels.editBanned#bfd915cd channel:InputChannel user_id:InputUser banned_rights:ChannelBannedRights = Updates;
	ChannelsEditBanned(ctx context.Context, in *TLChannelsEditBanned, opts ...grpc.CallOption) (*Updates, error)
	// channels.getAdminLog#33ddf480 flags:# channel:InputChannel q:string events_filter:flags.0?ChannelAdminLogEventsFilter admins:flags.1?Vector<InputUser> max_id:long min_id:long limit:int = channels.AdminLogResults;
	ChannelsGetAdminLog(ctx context.Context, in *TLChannelsGetAdminLog, opts ...grpc.CallOption) (*Channels_AdminLogResults, error)
	// channels.setStickers#ea8ca4f9 channel:InputChannel stickerset:InputStickerSet = Bool;
	ChannelsSetStickers(ctx context.Context, in *TLChannelsSetStickers, opts ...grpc.CallOption) (*Bool, error)
	// channels.readMessageContents#eab5dc38 channel:InputChannel id:Vector<int> = Bool;
	ChannelsReadMessageContents(ctx context.Context, in *TLChannelsReadMessageContents, opts ...grpc.CallOption) (*Bool, error)
}

type rPCchannelsClient struct {
	cc *grpc.ClientConn
}

func NewRPCchannelsClient(cc *grpc.ClientConn) RPCchannelsClient {
	return &rPCchannelsClient{cc}
}

func (c *rPCchannelsClient) ChannelsReadHistory(ctx context.Context, in *TLChannelsReadHistory, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_readHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsDeleteMessages(ctx context.Context, in *TLChannelsDeleteMessages, opts ...grpc.CallOption) (*Messages_AffectedMessages, error) {
	out := new(Messages_AffectedMessages)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_deleteMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsDeleteUserHistory(ctx context.Context, in *TLChannelsDeleteUserHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error) {
	out := new(Messages_AffectedHistory)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_deleteUserHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsReportSpam(ctx context.Context, in *TLChannelsReportSpam, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_reportSpam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsGetMessages(ctx context.Context, in *TLChannelsGetMessages, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_getMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsGetParticipants(ctx context.Context, in *TLChannelsGetParticipants, opts ...grpc.CallOption) (*Channels_ChannelParticipants, error) {
	out := new(Channels_ChannelParticipants)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_getParticipants", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsGetParticipant(ctx context.Context, in *TLChannelsGetParticipant, opts ...grpc.CallOption) (*Channels_ChannelParticipant, error) {
	out := new(Channels_ChannelParticipant)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_getParticipant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsGetChannels(ctx context.Context, in *TLChannelsGetChannels, opts ...grpc.CallOption) (*Messages_Chats, error) {
	out := new(Messages_Chats)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_getChannels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsGetFullChannel(ctx context.Context, in *TLChannelsGetFullChannel, opts ...grpc.CallOption) (*Messages_ChatFull, error) {
	out := new(Messages_ChatFull)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_getFullChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsCreateChannel(ctx context.Context, in *TLChannelsCreateChannel, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_createChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsEditAbout(ctx context.Context, in *TLChannelsEditAbout, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_editAbout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsEditAdmin(ctx context.Context, in *TLChannelsEditAdmin, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_editAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsEditTitle(ctx context.Context, in *TLChannelsEditTitle, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_editTitle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsEditPhoto(ctx context.Context, in *TLChannelsEditPhoto, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_editPhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsCheckUsername(ctx context.Context, in *TLChannelsCheckUsername, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_checkUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsUpdateUsername(ctx context.Context, in *TLChannelsUpdateUsername, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_updateUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsJoinChannel(ctx context.Context, in *TLChannelsJoinChannel, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_joinChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsLeaveChannel(ctx context.Context, in *TLChannelsLeaveChannel, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_leaveChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsInviteToChannel(ctx context.Context, in *TLChannelsInviteToChannel, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_inviteToChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsExportInvite(ctx context.Context, in *TLChannelsExportInvite, opts ...grpc.CallOption) (*ExportedChatInvite, error) {
	out := new(ExportedChatInvite)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_exportInvite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsDeleteChannel(ctx context.Context, in *TLChannelsDeleteChannel, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_deleteChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsToggleInvites(ctx context.Context, in *TLChannelsToggleInvites, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_toggleInvites", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsExportMessageLink(ctx context.Context, in *TLChannelsExportMessageLink, opts ...grpc.CallOption) (*ExportedMessageLink, error) {
	out := new(ExportedMessageLink)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_exportMessageLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsToggleSignatures(ctx context.Context, in *TLChannelsToggleSignatures, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_toggleSignatures", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsUpdatePinnedMessage(ctx context.Context, in *TLChannelsUpdatePinnedMessage, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_updatePinnedMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsGetAdminedPublicChannels(ctx context.Context, in *TLChannelsGetAdminedPublicChannels, opts ...grpc.CallOption) (*Messages_Chats, error) {
	out := new(Messages_Chats)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_getAdminedPublicChannels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsEditBanned(ctx context.Context, in *TLChannelsEditBanned, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_editBanned", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsGetAdminLog(ctx context.Context, in *TLChannelsGetAdminLog, opts ...grpc.CallOption) (*Channels_AdminLogResults, error) {
	out := new(Channels_AdminLogResults)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_getAdminLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsSetStickers(ctx context.Context, in *TLChannelsSetStickers, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_setStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCchannelsClient) ChannelsReadMessageContents(ctx context.Context, in *TLChannelsReadMessageContents, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCchannels/channels_readMessageContents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCchannels service

type RPCchannelsServer interface {
	// channels.readHistory#cc104937 channel:InputChannel max_id:int = Bool;
	ChannelsReadHistory(context.Context, *TLChannelsReadHistory) (*Bool, error)
	// channels.deleteMessages#84c1fd4e channel:InputChannel id:Vector<int> = messages.AffectedMessages;
	ChannelsDeleteMessages(context.Context, *TLChannelsDeleteMessages) (*Messages_AffectedMessages, error)
	// channels.deleteUserHistory#d10dd71b channel:InputChannel user_id:InputUser = messages.AffectedHistory;
	ChannelsDeleteUserHistory(context.Context, *TLChannelsDeleteUserHistory) (*Messages_AffectedHistory, error)
	// channels.reportSpam#fe087810 channel:InputChannel user_id:InputUser id:Vector<int> = Bool;
	ChannelsReportSpam(context.Context, *TLChannelsReportSpam) (*Bool, error)
	// channels.getMessages#93d7b347 channel:InputChannel id:Vector<int> = messages.Messages;
	ChannelsGetMessages(context.Context, *TLChannelsGetMessages) (*Messages_Messages, error)
	// channels.getParticipants#24d98f92 channel:InputChannel filter:ChannelParticipantsFilter offset:int limit:int = channels.ChannelParticipants;
	ChannelsGetParticipants(context.Context, *TLChannelsGetParticipants) (*Channels_ChannelParticipants, error)
	// channels.getParticipant#546dd7a6 channel:InputChannel user_id:InputUser = channels.ChannelParticipant;
	ChannelsGetParticipant(context.Context, *TLChannelsGetParticipant) (*Channels_ChannelParticipant, error)
	// channels.getChannels#a7f6bbb id:Vector<InputChannel> = messages.Chats;
	ChannelsGetChannels(context.Context, *TLChannelsGetChannels) (*Messages_Chats, error)
	// channels.getFullChannel#8736a09 channel:InputChannel = messages.ChatFull;
	ChannelsGetFullChannel(context.Context, *TLChannelsGetFullChannel) (*Messages_ChatFull, error)
	// channels.createChannel#f4893d7f flags:# broadcast:flags.0?true megagroup:flags.1?true title:string about:string = Updates;
	ChannelsCreateChannel(context.Context, *TLChannelsCreateChannel) (*Updates, error)
	// channels.editAbout#13e27f1e channel:InputChannel about:string = Bool;
	ChannelsEditAbout(context.Context, *TLChannelsEditAbout) (*Bool, error)
	// channels.editAdmin#20b88214 channel:InputChannel user_id:InputUser admin_rights:ChannelAdminRights = Updates;
	ChannelsEditAdmin(context.Context, *TLChannelsEditAdmin) (*Updates, error)
	// channels.editTitle#566decd0 channel:InputChannel title:string = Updates;
	ChannelsEditTitle(context.Context, *TLChannelsEditTitle) (*Updates, error)
	// channels.editPhoto#f12e57c9 channel:InputChannel photo:InputChatPhoto = Updates;
	ChannelsEditPhoto(context.Context, *TLChannelsEditPhoto) (*Updates, error)
	// channels.checkUsername#10e6bd2c channel:InputChannel username:string = Bool;
	ChannelsCheckUsername(context.Context, *TLChannelsCheckUsername) (*Bool, error)
	// channels.updateUsername#3514b3de channel:InputChannel username:string = Bool;
	ChannelsUpdateUsername(context.Context, *TLChannelsUpdateUsername) (*Bool, error)
	// channels.joinChannel#24b524c5 channel:InputChannel = Updates;
	ChannelsJoinChannel(context.Context, *TLChannelsJoinChannel) (*Updates, error)
	// channels.leaveChannel#f836aa95 channel:InputChannel = Updates;
	ChannelsLeaveChannel(context.Context, *TLChannelsLeaveChannel) (*Updates, error)
	// channels.inviteToChannel#199f3a6c channel:InputChannel users:Vector<InputUser> = Updates;
	ChannelsInviteToChannel(context.Context, *TLChannelsInviteToChannel) (*Updates, error)
	// channels.exportInvite#c7560885 channel:InputChannel = ExportedChatInvite;
	ChannelsExportInvite(context.Context, *TLChannelsExportInvite) (*ExportedChatInvite, error)
	// channels.deleteChannel#c0111fe3 channel:InputChannel = Updates;
	ChannelsDeleteChannel(context.Context, *TLChannelsDeleteChannel) (*Updates, error)
	// channels.toggleInvites#49609307 channel:InputChannel enabled:Bool = Updates;
	ChannelsToggleInvites(context.Context, *TLChannelsToggleInvites) (*Updates, error)
	// channels.exportMessageLink#c846d22d channel:InputChannel id:int = ExportedMessageLink;
	ChannelsExportMessageLink(context.Context, *TLChannelsExportMessageLink) (*ExportedMessageLink, error)
	// channels.toggleSignatures#1f69b606 channel:InputChannel enabled:Bool = Updates;
	ChannelsToggleSignatures(context.Context, *TLChannelsToggleSignatures) (*Updates, error)
	// channels.updatePinnedMessage#a72ded52 flags:# silent:flags.0?true channel:InputChannel id:int = Updates;
	ChannelsUpdatePinnedMessage(context.Context, *TLChannelsUpdatePinnedMessage) (*Updates, error)
	// channels.getAdminedPublicChannels#8d8d82d7 = messages.Chats;
	ChannelsGetAdminedPublicChannels(context.Context, *TLChannelsGetAdminedPublicChannels) (*Messages_Chats, error)
	// channels.editBanned#bfd915cd channel:InputChannel user_id:InputUser banned_rights:ChannelBannedRights = Updates;
	ChannelsEditBanned(context.Context, *TLChannelsEditBanned) (*Updates, error)
	// channels.getAdminLog#33ddf480 flags:# channel:InputChannel q:string events_filter:flags.0?ChannelAdminLogEventsFilter admins:flags.1?Vector<InputUser> max_id:long min_id:long limit:int = channels.AdminLogResults;
	ChannelsGetAdminLog(context.Context, *TLChannelsGetAdminLog) (*Channels_AdminLogResults, error)
	// channels.setStickers#ea8ca4f9 channel:InputChannel stickerset:InputStickerSet = Bool;
	ChannelsSetStickers(context.Context, *TLChannelsSetStickers) (*Bool, error)
	// channels.readMessageContents#eab5dc38 channel:InputChannel id:Vector<int> = Bool;
	ChannelsReadMessageContents(context.Context, *TLChannelsReadMessageContents) (*Bool, error)
}

func RegisterRPCchannelsServer(s *grpc.Server, srv RPCchannelsServer) {
	s.RegisterService(&_RPCchannels_serviceDesc, srv)
}

func _RPCchannels_ChannelsReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsReadHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsReadHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsReadHistory(ctx, req.(*TLChannelsReadHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsDeleteMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsDeleteMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsDeleteMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsDeleteMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsDeleteMessages(ctx, req.(*TLChannelsDeleteMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsDeleteUserHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsDeleteUserHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsDeleteUserHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsDeleteUserHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsDeleteUserHistory(ctx, req.(*TLChannelsDeleteUserHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsReportSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsReportSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsReportSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsReportSpam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsReportSpam(ctx, req.(*TLChannelsReportSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsGetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsGetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsGetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsGetMessages(ctx, req.(*TLChannelsGetMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsGetParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetParticipants)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsGetParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsGetParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsGetParticipants(ctx, req.(*TLChannelsGetParticipants))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsGetParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetParticipant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsGetParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsGetParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsGetParticipant(ctx, req.(*TLChannelsGetParticipant))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsGetChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsGetChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsGetChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsGetChannels(ctx, req.(*TLChannelsGetChannels))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsGetFullChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetFullChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsGetFullChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsGetFullChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsGetFullChannel(ctx, req.(*TLChannelsGetFullChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsCreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsCreateChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsCreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsCreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsCreateChannel(ctx, req.(*TLChannelsCreateChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsEditAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsEditAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsEditAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsEditAbout(ctx, req.(*TLChannelsEditAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsEditAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsEditAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsEditAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsEditAdmin(ctx, req.(*TLChannelsEditAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsEditTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsEditTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsEditTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsEditTitle(ctx, req.(*TLChannelsEditTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsEditPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditPhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsEditPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsEditPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsEditPhoto(ctx, req.(*TLChannelsEditPhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsCheckUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsCheckUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsCheckUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsCheckUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsCheckUsername(ctx, req.(*TLChannelsCheckUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsUpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsUpdateUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsUpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsUpdateUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsUpdateUsername(ctx, req.(*TLChannelsUpdateUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsJoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsJoinChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsJoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsJoinChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsJoinChannel(ctx, req.(*TLChannelsJoinChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsLeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsLeaveChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsLeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsLeaveChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsLeaveChannel(ctx, req.(*TLChannelsLeaveChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsInviteToChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsInviteToChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsInviteToChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsInviteToChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsInviteToChannel(ctx, req.(*TLChannelsInviteToChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsExportInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsExportInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsExportInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsExportInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsExportInvite(ctx, req.(*TLChannelsExportInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsDeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsDeleteChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsDeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsDeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsDeleteChannel(ctx, req.(*TLChannelsDeleteChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsToggleInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsToggleInvites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsToggleInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsToggleInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsToggleInvites(ctx, req.(*TLChannelsToggleInvites))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsExportMessageLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsExportMessageLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsExportMessageLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsExportMessageLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsExportMessageLink(ctx, req.(*TLChannelsExportMessageLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsToggleSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsToggleSignatures)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsToggleSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsToggleSignatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsToggleSignatures(ctx, req.(*TLChannelsToggleSignatures))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsUpdatePinnedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsUpdatePinnedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsUpdatePinnedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsUpdatePinnedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsUpdatePinnedMessage(ctx, req.(*TLChannelsUpdatePinnedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsGetAdminedPublicChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetAdminedPublicChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsGetAdminedPublicChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsGetAdminedPublicChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsGetAdminedPublicChannels(ctx, req.(*TLChannelsGetAdminedPublicChannels))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsEditBanned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditBanned)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsEditBanned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsEditBanned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsEditBanned(ctx, req.(*TLChannelsEditBanned))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsGetAdminLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetAdminLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsGetAdminLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsGetAdminLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsGetAdminLog(ctx, req.(*TLChannelsGetAdminLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsSetStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsSetStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsSetStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsSetStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsSetStickers(ctx, req.(*TLChannelsSetStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCchannels_ChannelsReadMessageContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsReadMessageContents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCchannelsServer).ChannelsReadMessageContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCchannels/ChannelsReadMessageContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCchannelsServer).ChannelsReadMessageContents(ctx, req.(*TLChannelsReadMessageContents))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCchannels_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCchannels",
	HandlerType: (*RPCchannelsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "channels_readHistory",
			Handler:    _RPCchannels_ChannelsReadHistory_Handler,
		},
		{
			MethodName: "channels_deleteMessages",
			Handler:    _RPCchannels_ChannelsDeleteMessages_Handler,
		},
		{
			MethodName: "channels_deleteUserHistory",
			Handler:    _RPCchannels_ChannelsDeleteUserHistory_Handler,
		},
		{
			MethodName: "channels_reportSpam",
			Handler:    _RPCchannels_ChannelsReportSpam_Handler,
		},
		{
			MethodName: "channels_getMessages",
			Handler:    _RPCchannels_ChannelsGetMessages_Handler,
		},
		{
			MethodName: "channels_getParticipants",
			Handler:    _RPCchannels_ChannelsGetParticipants_Handler,
		},
		{
			MethodName: "channels_getParticipant",
			Handler:    _RPCchannels_ChannelsGetParticipant_Handler,
		},
		{
			MethodName: "channels_getChannels",
			Handler:    _RPCchannels_ChannelsGetChannels_Handler,
		},
		{
			MethodName: "channels_getFullChannel",
			Handler:    _RPCchannels_ChannelsGetFullChannel_Handler,
		},
		{
			MethodName: "channels_createChannel",
			Handler:    _RPCchannels_ChannelsCreateChannel_Handler,
		},
		{
			MethodName: "channels_editAbout",
			Handler:    _RPCchannels_ChannelsEditAbout_Handler,
		},
		{
			MethodName: "channels_editAdmin",
			Handler:    _RPCchannels_ChannelsEditAdmin_Handler,
		},
		{
			MethodName: "channels_editTitle",
			Handler:    _RPCchannels_ChannelsEditTitle_Handler,
		},
		{
			MethodName: "channels_editPhoto",
			Handler:    _RPCchannels_ChannelsEditPhoto_Handler,
		},
		{
			MethodName: "channels_checkUsername",
			Handler:    _RPCchannels_ChannelsCheckUsername_Handler,
		},
		{
			MethodName: "channels_updateUsername",
			Handler:    _RPCchannels_ChannelsUpdateUsername_Handler,
		},
		{
			MethodName: "channels_joinChannel",
			Handler:    _RPCchannels_ChannelsJoinChannel_Handler,
		},
		{
			MethodName: "channels_leaveChannel",
			Handler:    _RPCchannels_ChannelsLeaveChannel_Handler,
		},
		{
			MethodName: "channels_inviteToChannel",
			Handler:    _RPCchannels_ChannelsInviteToChannel_Handler,
		},
		{
			MethodName: "channels_exportInvite",
			Handler:    _RPCchannels_ChannelsExportInvite_Handler,
		},
		{
			MethodName: "channels_deleteChannel",
			Handler:    _RPCchannels_ChannelsDeleteChannel_Handler,
		},
		{
			MethodName: "channels_toggleInvites",
			Handler:    _RPCchannels_ChannelsToggleInvites_Handler,
		},
		{
			MethodName: "channels_exportMessageLink",
			Handler:    _RPCchannels_ChannelsExportMessageLink_Handler,
		},
		{
			MethodName: "channels_toggleSignatures",
			Handler:    _RPCchannels_ChannelsToggleSignatures_Handler,
		},
		{
			MethodName: "channels_updatePinnedMessage",
			Handler:    _RPCchannels_ChannelsUpdatePinnedMessage_Handler,
		},
		{
			MethodName: "channels_getAdminedPublicChannels",
			Handler:    _RPCchannels_ChannelsGetAdminedPublicChannels_Handler,
		},
		{
			MethodName: "channels_editBanned",
			Handler:    _RPCchannels_ChannelsEditBanned_Handler,
		},
		{
			MethodName: "channels_getAdminLog",
			Handler:    _RPCchannels_ChannelsGetAdminLog_Handler,
		},
		{
			MethodName: "channels_setStickers",
			Handler:    _RPCchannels_ChannelsSetStickers_Handler,
		},
		{
			MethodName: "channels_readMessageContents",
			Handler:    _RPCchannels_ChannelsReadMessageContents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// Client API for RPCbots service

type RPCbotsClient interface {
	// bots.sendCustomRequest#aa2769ed custom_method:string params:DataJSON = DataJSON;
	BotsSendCustomRequest(ctx context.Context, in *TLBotsSendCustomRequest, opts ...grpc.CallOption) (*DataJSON, error)
	// bots.answerWebhookJSONQuery#e6213f4d query_id:long data:DataJSON = Bool;
	BotsAnswerWebhookJSONQuery(ctx context.Context, in *TLBotsAnswerWebhookJSONQuery, opts ...grpc.CallOption) (*Bool, error)
}

type rPCbotsClient struct {
	cc *grpc.ClientConn
}

func NewRPCbotsClient(cc *grpc.ClientConn) RPCbotsClient {
	return &rPCbotsClient{cc}
}

func (c *rPCbotsClient) BotsSendCustomRequest(ctx context.Context, in *TLBotsSendCustomRequest, opts ...grpc.CallOption) (*DataJSON, error) {
	out := new(DataJSON)
	err := grpc.Invoke(ctx, "/mtproto.RPCbots/bots_sendCustomRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCbotsClient) BotsAnswerWebhookJSONQuery(ctx context.Context, in *TLBotsAnswerWebhookJSONQuery, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCbots/bots_answerWebhookJSONQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCbots service

type RPCbotsServer interface {
	// bots.sendCustomRequest#aa2769ed custom_method:string params:DataJSON = DataJSON;
	BotsSendCustomRequest(context.Context, *TLBotsSendCustomRequest) (*DataJSON, error)
	// bots.answerWebhookJSONQuery#e6213f4d query_id:long data:DataJSON = Bool;
	BotsAnswerWebhookJSONQuery(context.Context, *TLBotsAnswerWebhookJSONQuery) (*Bool, error)
}

func RegisterRPCbotsServer(s *grpc.Server, srv RPCbotsServer) {
	s.RegisterService(&_RPCbots_serviceDesc, srv)
}

func _RPCbots_BotsSendCustomRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsSendCustomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCbotsServer).BotsSendCustomRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCbots/BotsSendCustomRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCbotsServer).BotsSendCustomRequest(ctx, req.(*TLBotsSendCustomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCbots_BotsAnswerWebhookJSONQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsAnswerWebhookJSONQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCbotsServer).BotsAnswerWebhookJSONQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCbots/BotsAnswerWebhookJSONQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCbotsServer).BotsAnswerWebhookJSONQuery(ctx, req.(*TLBotsAnswerWebhookJSONQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCbots_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCbots",
	HandlerType: (*RPCbotsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "bots_sendCustomRequest",
			Handler:    _RPCbots_BotsSendCustomRequest_Handler,
		},
		{
			MethodName: "bots_answerWebhookJSONQuery",
			Handler:    _RPCbots_BotsAnswerWebhookJSONQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// Client API for RPCcontacts service

type RPCcontactsClient interface {
	// contacts.getStatuses#c4a353ee = Vector<ContactStatus>;
	ContactsGetStatuses(ctx context.Context, in *TLContactsGetStatuses, opts ...grpc.CallOption) (*Vector_ContactStatus, error)
	// contacts.getContacts#c023849f hash:int = contacts.Contacts;
	ContactsGetContacts(ctx context.Context, in *TLContactsGetContacts, opts ...grpc.CallOption) (*Contacts_Contacts, error)
	// contacts.importContacts#2c800be5 contacts:Vector<InputContact> = contacts.ImportedContacts;
	ContactsImportContacts(ctx context.Context, in *TLContactsImportContacts, opts ...grpc.CallOption) (*Contacts_ImportedContacts, error)
	// contacts.deleteContact#8e953744 id:InputUser = contacts.Link;
	ContactsDeleteContact(ctx context.Context, in *TLContactsDeleteContact, opts ...grpc.CallOption) (*Contacts_Link, error)
	// contacts.deleteContacts#59ab389e id:Vector<InputUser> = Bool;
	ContactsDeleteContacts(ctx context.Context, in *TLContactsDeleteContacts, opts ...grpc.CallOption) (*Bool, error)
	// contacts.block#332b49fc id:InputUser = Bool;
	ContactsBlock(ctx context.Context, in *TLContactsBlock, opts ...grpc.CallOption) (*Bool, error)
	// contacts.unblock#e54100bd id:InputUser = Bool;
	ContactsUnblock(ctx context.Context, in *TLContactsUnblock, opts ...grpc.CallOption) (*Bool, error)
	// contacts.getBlocked#f57c350f offset:int limit:int = contacts.Blocked;
	ContactsGetBlocked(ctx context.Context, in *TLContactsGetBlocked, opts ...grpc.CallOption) (*Contacts_Blocked, error)
	// contacts.exportCard#84e53737 = Vector<int>;
	ContactsExportCard(ctx context.Context, in *TLContactsExportCard, opts ...grpc.CallOption) (*VectorInt, error)
	// contacts.importCard#4fe196fe export_card:Vector<int> = User;
	ContactsImportCard(ctx context.Context, in *TLContactsImportCard, opts ...grpc.CallOption) (*User, error)
	// contacts.search#11f812d8 q:string limit:int = contacts.Found;
	ContactsSearch(ctx context.Context, in *TLContactsSearch, opts ...grpc.CallOption) (*Contacts_Found, error)
	// contacts.resolveUsername#f93ccba3 username:string = contacts.ResolvedPeer;
	ContactsResolveUsername(ctx context.Context, in *TLContactsResolveUsername, opts ...grpc.CallOption) (*Contacts_ResolvedPeer, error)
	// contacts.getTopPeers#d4982db5 flags:# correspondents:flags.0?true bots_pm:flags.1?true bots_inline:flags.2?true phone_calls:flags.3?true groups:flags.10?true channels:flags.15?true offset:int limit:int hash:int = contacts.TopPeers;
	ContactsGetTopPeers(ctx context.Context, in *TLContactsGetTopPeers, opts ...grpc.CallOption) (*Contacts_TopPeers, error)
	// contacts.resetTopPeerRating#1ae373ac category:TopPeerCategory peer:InputPeer = Bool;
	ContactsResetTopPeerRating(ctx context.Context, in *TLContactsResetTopPeerRating, opts ...grpc.CallOption) (*Bool, error)
	// contacts.resetSaved#879537f1 = Bool;
	ContactsResetSaved(ctx context.Context, in *TLContactsResetSaved, opts ...grpc.CallOption) (*Bool, error)
}

type rPCcontactsClient struct {
	cc *grpc.ClientConn
}

func NewRPCcontactsClient(cc *grpc.ClientConn) RPCcontactsClient {
	return &rPCcontactsClient{cc}
}

func (c *rPCcontactsClient) ContactsGetStatuses(ctx context.Context, in *TLContactsGetStatuses, opts ...grpc.CallOption) (*Vector_ContactStatus, error) {
	out := new(Vector_ContactStatus)
	err := grpc.Invoke(ctx, "/mtproto.RPCcontacts/contacts_getStatuses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCcontactsClient) ContactsGetContacts(ctx context.Context, in *TLContactsGetContacts, opts ...grpc.CallOption) (*Contacts_Contacts, error) {
	out := new(Contacts_Contacts)
	err := grpc.Invoke(ctx, "/mtproto.RPCcontacts/contacts_getContacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCcontactsClient) ContactsImportContacts(ctx context.Context, in *TLContactsImportContacts, opts ...grpc.CallOption) (*Contacts_ImportedContacts, error) {
	out := new(Contacts_ImportedContacts)
	err := grpc.Invoke(ctx, "/mtproto.RPCcontacts/contacts_importContacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCcontactsClient) ContactsDeleteContact(ctx context.Context, in *TLContactsDeleteContact, opts ...grpc.CallOption) (*Contacts_Link, error) {
	out := new(Contacts_Link)
	err := grpc.Invoke(ctx, "/mtproto.RPCcontacts/contacts_deleteContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCcontactsClient) ContactsDeleteContacts(ctx context.Context, in *TLContactsDeleteContacts, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCcontacts/contacts_deleteContacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCcontactsClient) ContactsBlock(ctx context.Context, in *TLContactsBlock, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCcontacts/contacts_block", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCcontactsClient) ContactsUnblock(ctx context.Context, in *TLContactsUnblock, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCcontacts/contacts_unblock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCcontactsClient) ContactsGetBlocked(ctx context.Context, in *TLContactsGetBlocked, opts ...grpc.CallOption) (*Contacts_Blocked, error) {
	out := new(Contacts_Blocked)
	err := grpc.Invoke(ctx, "/mtproto.RPCcontacts/contacts_getBlocked", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCcontactsClient) ContactsExportCard(ctx context.Context, in *TLContactsExportCard, opts ...grpc.CallOption) (*VectorInt, error) {
	out := new(VectorInt)
	err := grpc.Invoke(ctx, "/mtproto.RPCcontacts/contacts_exportCard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCcontactsClient) ContactsImportCard(ctx context.Context, in *TLContactsImportCard, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/mtproto.RPCcontacts/contacts_importCard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCcontactsClient) ContactsSearch(ctx context.Context, in *TLContactsSearch, opts ...grpc.CallOption) (*Contacts_Found, error) {
	out := new(Contacts_Found)
	err := grpc.Invoke(ctx, "/mtproto.RPCcontacts/contacts_search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCcontactsClient) ContactsResolveUsername(ctx context.Context, in *TLContactsResolveUsername, opts ...grpc.CallOption) (*Contacts_ResolvedPeer, error) {
	out := new(Contacts_ResolvedPeer)
	err := grpc.Invoke(ctx, "/mtproto.RPCcontacts/contacts_resolveUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCcontactsClient) ContactsGetTopPeers(ctx context.Context, in *TLContactsGetTopPeers, opts ...grpc.CallOption) (*Contacts_TopPeers, error) {
	out := new(Contacts_TopPeers)
	err := grpc.Invoke(ctx, "/mtproto.RPCcontacts/contacts_getTopPeers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCcontactsClient) ContactsResetTopPeerRating(ctx context.Context, in *TLContactsResetTopPeerRating, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCcontacts/contacts_resetTopPeerRating", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCcontactsClient) ContactsResetSaved(ctx context.Context, in *TLContactsResetSaved, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCcontacts/contacts_resetSaved", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCcontacts service

type RPCcontactsServer interface {
	// contacts.getStatuses#c4a353ee = Vector<ContactStatus>;
	ContactsGetStatuses(context.Context, *TLContactsGetStatuses) (*Vector_ContactStatus, error)
	// contacts.getContacts#c023849f hash:int = contacts.Contacts;
	ContactsGetContacts(context.Context, *TLContactsGetContacts) (*Contacts_Contacts, error)
	// contacts.importContacts#2c800be5 contacts:Vector<InputContact> = contacts.ImportedContacts;
	ContactsImportContacts(context.Context, *TLContactsImportContacts) (*Contacts_ImportedContacts, error)
	// contacts.deleteContact#8e953744 id:InputUser = contacts.Link;
	ContactsDeleteContact(context.Context, *TLContactsDeleteContact) (*Contacts_Link, error)
	// contacts.deleteContacts#59ab389e id:Vector<InputUser> = Bool;
	ContactsDeleteContacts(context.Context, *TLContactsDeleteContacts) (*Bool, error)
	// contacts.block#332b49fc id:InputUser = Bool;
	ContactsBlock(context.Context, *TLContactsBlock) (*Bool, error)
	// contacts.unblock#e54100bd id:InputUser = Bool;
	ContactsUnblock(context.Context, *TLContactsUnblock) (*Bool, error)
	// contacts.getBlocked#f57c350f offset:int limit:int = contacts.Blocked;
	ContactsGetBlocked(context.Context, *TLContactsGetBlocked) (*Contacts_Blocked, error)
	// contacts.exportCard#84e53737 = Vector<int>;
	ContactsExportCard(context.Context, *TLContactsExportCard) (*VectorInt, error)
	// contacts.importCard#4fe196fe export_card:Vector<int> = User;
	ContactsImportCard(context.Context, *TLContactsImportCard) (*User, error)
	// contacts.search#11f812d8 q:string limit:int = contacts.Found;
	ContactsSearch(context.Context, *TLContactsSearch) (*Contacts_Found, error)
	// contacts.resolveUsername#f93ccba3 username:string = contacts.ResolvedPeer;
	ContactsResolveUsername(context.Context, *TLContactsResolveUsername) (*Contacts_ResolvedPeer, error)
	// contacts.getTopPeers#d4982db5 flags:# correspondents:flags.0?true bots_pm:flags.1?true bots_inline:flags.2?true phone_calls:flags.3?true groups:flags.10?true channels:flags.15?true offset:int limit:int hash:int = contacts.TopPeers;
	ContactsGetTopPeers(context.Context, *TLContactsGetTopPeers) (*Contacts_TopPeers, error)
	// contacts.resetTopPeerRating#1ae373ac category:TopPeerCategory peer:InputPeer = Bool;
	ContactsResetTopPeerRating(context.Context, *TLContactsResetTopPeerRating) (*Bool, error)
	// contacts.resetSaved#879537f1 = Bool;
	ContactsResetSaved(context.Context, *TLContactsResetSaved) (*Bool, error)
}

func RegisterRPCcontactsServer(s *grpc.Server, srv RPCcontactsServer) {
	s.RegisterService(&_RPCcontacts_serviceDesc, srv)
}

func _RPCcontacts_ContactsGetStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetStatuses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCcontactsServer).ContactsGetStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCcontacts/ContactsGetStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCcontactsServer).ContactsGetStatuses(ctx, req.(*TLContactsGetStatuses))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCcontacts_ContactsGetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCcontactsServer).ContactsGetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCcontacts/ContactsGetContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCcontactsServer).ContactsGetContacts(ctx, req.(*TLContactsGetContacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCcontacts_ContactsImportContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsImportContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCcontactsServer).ContactsImportContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCcontacts/ContactsImportContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCcontactsServer).ContactsImportContacts(ctx, req.(*TLContactsImportContacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCcontacts_ContactsDeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsDeleteContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCcontactsServer).ContactsDeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCcontacts/ContactsDeleteContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCcontactsServer).ContactsDeleteContact(ctx, req.(*TLContactsDeleteContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCcontacts_ContactsDeleteContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsDeleteContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCcontactsServer).ContactsDeleteContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCcontacts/ContactsDeleteContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCcontactsServer).ContactsDeleteContacts(ctx, req.(*TLContactsDeleteContacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCcontacts_ContactsBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCcontactsServer).ContactsBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCcontacts/ContactsBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCcontactsServer).ContactsBlock(ctx, req.(*TLContactsBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCcontacts_ContactsUnblock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsUnblock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCcontactsServer).ContactsUnblock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCcontacts/ContactsUnblock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCcontactsServer).ContactsUnblock(ctx, req.(*TLContactsUnblock))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCcontacts_ContactsGetBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetBlocked)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCcontactsServer).ContactsGetBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCcontacts/ContactsGetBlocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCcontactsServer).ContactsGetBlocked(ctx, req.(*TLContactsGetBlocked))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCcontacts_ContactsExportCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsExportCard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCcontactsServer).ContactsExportCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCcontacts/ContactsExportCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCcontactsServer).ContactsExportCard(ctx, req.(*TLContactsExportCard))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCcontacts_ContactsImportCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsImportCard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCcontactsServer).ContactsImportCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCcontacts/ContactsImportCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCcontactsServer).ContactsImportCard(ctx, req.(*TLContactsImportCard))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCcontacts_ContactsSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCcontactsServer).ContactsSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCcontacts/ContactsSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCcontactsServer).ContactsSearch(ctx, req.(*TLContactsSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCcontacts_ContactsResolveUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsResolveUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCcontactsServer).ContactsResolveUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCcontacts/ContactsResolveUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCcontactsServer).ContactsResolveUsername(ctx, req.(*TLContactsResolveUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCcontacts_ContactsGetTopPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetTopPeers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCcontactsServer).ContactsGetTopPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCcontacts/ContactsGetTopPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCcontactsServer).ContactsGetTopPeers(ctx, req.(*TLContactsGetTopPeers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCcontacts_ContactsResetTopPeerRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsResetTopPeerRating)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCcontactsServer).ContactsResetTopPeerRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCcontacts/ContactsResetTopPeerRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCcontactsServer).ContactsResetTopPeerRating(ctx, req.(*TLContactsResetTopPeerRating))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCcontacts_ContactsResetSaved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsResetSaved)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCcontactsServer).ContactsResetSaved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCcontacts/ContactsResetSaved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCcontactsServer).ContactsResetSaved(ctx, req.(*TLContactsResetSaved))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCcontacts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCcontacts",
	HandlerType: (*RPCcontactsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "contacts_getStatuses",
			Handler:    _RPCcontacts_ContactsGetStatuses_Handler,
		},
		{
			MethodName: "contacts_getContacts",
			Handler:    _RPCcontacts_ContactsGetContacts_Handler,
		},
		{
			MethodName: "contacts_importContacts",
			Handler:    _RPCcontacts_ContactsImportContacts_Handler,
		},
		{
			MethodName: "contacts_deleteContact",
			Handler:    _RPCcontacts_ContactsDeleteContact_Handler,
		},
		{
			MethodName: "contacts_deleteContacts",
			Handler:    _RPCcontacts_ContactsDeleteContacts_Handler,
		},
		{
			MethodName: "contacts_block",
			Handler:    _RPCcontacts_ContactsBlock_Handler,
		},
		{
			MethodName: "contacts_unblock",
			Handler:    _RPCcontacts_ContactsUnblock_Handler,
		},
		{
			MethodName: "contacts_getBlocked",
			Handler:    _RPCcontacts_ContactsGetBlocked_Handler,
		},
		{
			MethodName: "contacts_exportCard",
			Handler:    _RPCcontacts_ContactsExportCard_Handler,
		},
		{
			MethodName: "contacts_importCard",
			Handler:    _RPCcontacts_ContactsImportCard_Handler,
		},
		{
			MethodName: "contacts_search",
			Handler:    _RPCcontacts_ContactsSearch_Handler,
		},
		{
			MethodName: "contacts_resolveUsername",
			Handler:    _RPCcontacts_ContactsResolveUsername_Handler,
		},
		{
			MethodName: "contacts_getTopPeers",
			Handler:    _RPCcontacts_ContactsGetTopPeers_Handler,
		},
		{
			MethodName: "contacts_resetTopPeerRating",
			Handler:    _RPCcontacts_ContactsResetTopPeerRating_Handler,
		},
		{
			MethodName: "contacts_resetSaved",
			Handler:    _RPCcontacts_ContactsResetSaved_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// Client API for RPCupload service

type RPCuploadClient interface {
	// upload.saveFilePart#b304a621 file_id:long file_part:int bytes:bytes = Bool;
	UploadSaveFilePart(ctx context.Context, in *TLUploadSaveFilePart, opts ...grpc.CallOption) (*Bool, error)
	// upload.getFile#e3a6cfb5 location:InputFileLocation offset:int limit:int = upload.File;
	UploadGetFile(ctx context.Context, in *TLUploadGetFile, opts ...grpc.CallOption) (*Upload_File, error)
	// upload.saveBigFilePart#de7b673d file_id:long file_part:int file_total_parts:int bytes:bytes = Bool;
	UploadSaveBigFilePart(ctx context.Context, in *TLUploadSaveBigFilePart, opts ...grpc.CallOption) (*Bool, error)
	// upload.getWebFile#24e6818d location:InputWebFileLocation offset:int limit:int = upload.WebFile;
	UploadGetWebFile(ctx context.Context, in *TLUploadGetWebFile, opts ...grpc.CallOption) (*Upload_WebFile, error)
	// upload.getCdnFile#2000bcc3 file_token:bytes offset:int limit:int = upload.CdnFile;
	UploadGetCdnFile(ctx context.Context, in *TLUploadGetCdnFile, opts ...grpc.CallOption) (*Upload_CdnFile, error)
	// upload.reuploadCdnFile#1af91c09 file_token:bytes request_token:bytes = Vector<CdnFileHash>;
	UploadReuploadCdnFile(ctx context.Context, in *TLUploadReuploadCdnFile, opts ...grpc.CallOption) (*Vector_CdnFileHash, error)
	// upload.getCdnFileHashes#f715c87b file_token:bytes offset:int = Vector<CdnFileHash>;
	UploadGetCdnFileHashes(ctx context.Context, in *TLUploadGetCdnFileHashes, opts ...grpc.CallOption) (*Vector_CdnFileHash, error)
}

type rPCuploadClient struct {
	cc *grpc.ClientConn
}

func NewRPCuploadClient(cc *grpc.ClientConn) RPCuploadClient {
	return &rPCuploadClient{cc}
}

func (c *rPCuploadClient) UploadSaveFilePart(ctx context.Context, in *TLUploadSaveFilePart, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCupload/upload_saveFilePart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCuploadClient) UploadGetFile(ctx context.Context, in *TLUploadGetFile, opts ...grpc.CallOption) (*Upload_File, error) {
	out := new(Upload_File)
	err := grpc.Invoke(ctx, "/mtproto.RPCupload/upload_getFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCuploadClient) UploadSaveBigFilePart(ctx context.Context, in *TLUploadSaveBigFilePart, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCupload/upload_saveBigFilePart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCuploadClient) UploadGetWebFile(ctx context.Context, in *TLUploadGetWebFile, opts ...grpc.CallOption) (*Upload_WebFile, error) {
	out := new(Upload_WebFile)
	err := grpc.Invoke(ctx, "/mtproto.RPCupload/upload_getWebFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCuploadClient) UploadGetCdnFile(ctx context.Context, in *TLUploadGetCdnFile, opts ...grpc.CallOption) (*Upload_CdnFile, error) {
	out := new(Upload_CdnFile)
	err := grpc.Invoke(ctx, "/mtproto.RPCupload/upload_getCdnFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCuploadClient) UploadReuploadCdnFile(ctx context.Context, in *TLUploadReuploadCdnFile, opts ...grpc.CallOption) (*Vector_CdnFileHash, error) {
	out := new(Vector_CdnFileHash)
	err := grpc.Invoke(ctx, "/mtproto.RPCupload/upload_reuploadCdnFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCuploadClient) UploadGetCdnFileHashes(ctx context.Context, in *TLUploadGetCdnFileHashes, opts ...grpc.CallOption) (*Vector_CdnFileHash, error) {
	out := new(Vector_CdnFileHash)
	err := grpc.Invoke(ctx, "/mtproto.RPCupload/upload_getCdnFileHashes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCupload service

type RPCuploadServer interface {
	// upload.saveFilePart#b304a621 file_id:long file_part:int bytes:bytes = Bool;
	UploadSaveFilePart(context.Context, *TLUploadSaveFilePart) (*Bool, error)
	// upload.getFile#e3a6cfb5 location:InputFileLocation offset:int limit:int = upload.File;
	UploadGetFile(context.Context, *TLUploadGetFile) (*Upload_File, error)
	// upload.saveBigFilePart#de7b673d file_id:long file_part:int file_total_parts:int bytes:bytes = Bool;
	UploadSaveBigFilePart(context.Context, *TLUploadSaveBigFilePart) (*Bool, error)
	// upload.getWebFile#24e6818d location:InputWebFileLocation offset:int limit:int = upload.WebFile;
	UploadGetWebFile(context.Context, *TLUploadGetWebFile) (*Upload_WebFile, error)
	// upload.getCdnFile#2000bcc3 file_token:bytes offset:int limit:int = upload.CdnFile;
	UploadGetCdnFile(context.Context, *TLUploadGetCdnFile) (*Upload_CdnFile, error)
	// upload.reuploadCdnFile#1af91c09 file_token:bytes request_token:bytes = Vector<CdnFileHash>;
	UploadReuploadCdnFile(context.Context, *TLUploadReuploadCdnFile) (*Vector_CdnFileHash, error)
	// upload.getCdnFileHashes#f715c87b file_token:bytes offset:int = Vector<CdnFileHash>;
	UploadGetCdnFileHashes(context.Context, *TLUploadGetCdnFileHashes) (*Vector_CdnFileHash, error)
}

func RegisterRPCuploadServer(s *grpc.Server, srv RPCuploadServer) {
	s.RegisterService(&_RPCupload_serviceDesc, srv)
}

func _RPCupload_UploadSaveFilePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadSaveFilePart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCuploadServer).UploadSaveFilePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCupload/UploadSaveFilePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCuploadServer).UploadSaveFilePart(ctx, req.(*TLUploadSaveFilePart))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCupload_UploadGetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCuploadServer).UploadGetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCupload/UploadGetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCuploadServer).UploadGetFile(ctx, req.(*TLUploadGetFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCupload_UploadSaveBigFilePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadSaveBigFilePart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCuploadServer).UploadSaveBigFilePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCupload/UploadSaveBigFilePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCuploadServer).UploadSaveBigFilePart(ctx, req.(*TLUploadSaveBigFilePart))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCupload_UploadGetWebFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetWebFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCuploadServer).UploadGetWebFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCupload/UploadGetWebFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCuploadServer).UploadGetWebFile(ctx, req.(*TLUploadGetWebFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCupload_UploadGetCdnFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetCdnFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCuploadServer).UploadGetCdnFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCupload/UploadGetCdnFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCuploadServer).UploadGetCdnFile(ctx, req.(*TLUploadGetCdnFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCupload_UploadReuploadCdnFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadReuploadCdnFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCuploadServer).UploadReuploadCdnFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCupload/UploadReuploadCdnFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCuploadServer).UploadReuploadCdnFile(ctx, req.(*TLUploadReuploadCdnFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCupload_UploadGetCdnFileHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetCdnFileHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCuploadServer).UploadGetCdnFileHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCupload/UploadGetCdnFileHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCuploadServer).UploadGetCdnFileHashes(ctx, req.(*TLUploadGetCdnFileHashes))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCupload_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCupload",
	HandlerType: (*RPCuploadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "upload_saveFilePart",
			Handler:    _RPCupload_UploadSaveFilePart_Handler,
		},
		{
			MethodName: "upload_getFile",
			Handler:    _RPCupload_UploadGetFile_Handler,
		},
		{
			MethodName: "upload_saveBigFilePart",
			Handler:    _RPCupload_UploadSaveBigFilePart_Handler,
		},
		{
			MethodName: "upload_getWebFile",
			Handler:    _RPCupload_UploadGetWebFile_Handler,
		},
		{
			MethodName: "upload_getCdnFile",
			Handler:    _RPCupload_UploadGetCdnFile_Handler,
		},
		{
			MethodName: "upload_reuploadCdnFile",
			Handler:    _RPCupload_UploadReuploadCdnFile_Handler,
		},
		{
			MethodName: "upload_getCdnFileHashes",
			Handler:    _RPCupload_UploadGetCdnFileHashes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// Client API for RPCphone service

type RPCphoneClient interface {
	// phone.getCallConfig#55451fa9 = DataJSON;
	PhoneGetCallConfig(ctx context.Context, in *TLPhoneGetCallConfig, opts ...grpc.CallOption) (*DataJSON, error)
	// phone.requestCall#5b95b3d4 user_id:InputUser random_id:int g_a_hash:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
	PhoneRequestCall(ctx context.Context, in *TLPhoneRequestCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error)
	// phone.acceptCall#3bd2b4a0 peer:InputPhoneCall g_b:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
	PhoneAcceptCall(ctx context.Context, in *TLPhoneAcceptCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error)
	// phone.confirmCall#2efe1722 peer:InputPhoneCall g_a:bytes key_fingerprint:long protocol:PhoneCallProtocol = phone.PhoneCall;
	PhoneConfirmCall(ctx context.Context, in *TLPhoneConfirmCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error)
	// phone.receivedCall#17d54f61 peer:InputPhoneCall = Bool;
	PhoneReceivedCall(ctx context.Context, in *TLPhoneReceivedCall, opts ...grpc.CallOption) (*Bool, error)
	// phone.discardCall#78d413a6 peer:InputPhoneCall duration:int reason:PhoneCallDiscardReason connection_id:long = Updates;
	PhoneDiscardCall(ctx context.Context, in *TLPhoneDiscardCall, opts ...grpc.CallOption) (*Updates, error)
	// phone.setCallRating#1c536a34 peer:InputPhoneCall rating:int comment:string = Updates;
	PhoneSetCallRating(ctx context.Context, in *TLPhoneSetCallRating, opts ...grpc.CallOption) (*Updates, error)
	// phone.saveCallDebug#277add7e peer:InputPhoneCall debug:DataJSON = Bool;
	PhoneSaveCallDebug(ctx context.Context, in *TLPhoneSaveCallDebug, opts ...grpc.CallOption) (*Bool, error)
}

type rPCphoneClient struct {
	cc *grpc.ClientConn
}

func NewRPCphoneClient(cc *grpc.ClientConn) RPCphoneClient {
	return &rPCphoneClient{cc}
}

func (c *rPCphoneClient) PhoneGetCallConfig(ctx context.Context, in *TLPhoneGetCallConfig, opts ...grpc.CallOption) (*DataJSON, error) {
	out := new(DataJSON)
	err := grpc.Invoke(ctx, "/mtproto.RPCphone/phone_getCallConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCphoneClient) PhoneRequestCall(ctx context.Context, in *TLPhoneRequestCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error) {
	out := new(Phone_PhoneCall)
	err := grpc.Invoke(ctx, "/mtproto.RPCphone/phone_requestCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCphoneClient) PhoneAcceptCall(ctx context.Context, in *TLPhoneAcceptCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error) {
	out := new(Phone_PhoneCall)
	err := grpc.Invoke(ctx, "/mtproto.RPCphone/phone_acceptCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCphoneClient) PhoneConfirmCall(ctx context.Context, in *TLPhoneConfirmCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error) {
	out := new(Phone_PhoneCall)
	err := grpc.Invoke(ctx, "/mtproto.RPCphone/phone_confirmCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCphoneClient) PhoneReceivedCall(ctx context.Context, in *TLPhoneReceivedCall, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCphone/phone_receivedCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCphoneClient) PhoneDiscardCall(ctx context.Context, in *TLPhoneDiscardCall, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCphone/phone_discardCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCphoneClient) PhoneSetCallRating(ctx context.Context, in *TLPhoneSetCallRating, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCphone/phone_setCallRating", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCphoneClient) PhoneSaveCallDebug(ctx context.Context, in *TLPhoneSaveCallDebug, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCphone/phone_saveCallDebug", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCphone service

type RPCphoneServer interface {
	// phone.getCallConfig#55451fa9 = DataJSON;
	PhoneGetCallConfig(context.Context, *TLPhoneGetCallConfig) (*DataJSON, error)
	// phone.requestCall#5b95b3d4 user_id:InputUser random_id:int g_a_hash:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
	PhoneRequestCall(context.Context, *TLPhoneRequestCall) (*Phone_PhoneCall, error)
	// phone.acceptCall#3bd2b4a0 peer:InputPhoneCall g_b:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
	PhoneAcceptCall(context.Context, *TLPhoneAcceptCall) (*Phone_PhoneCall, error)
	// phone.confirmCall#2efe1722 peer:InputPhoneCall g_a:bytes key_fingerprint:long protocol:PhoneCallProtocol = phone.PhoneCall;
	PhoneConfirmCall(context.Context, *TLPhoneConfirmCall) (*Phone_PhoneCall, error)
	// phone.receivedCall#17d54f61 peer:InputPhoneCall = Bool;
	PhoneReceivedCall(context.Context, *TLPhoneReceivedCall) (*Bool, error)
	// phone.discardCall#78d413a6 peer:InputPhoneCall duration:int reason:PhoneCallDiscardReason connection_id:long = Updates;
	PhoneDiscardCall(context.Context, *TLPhoneDiscardCall) (*Updates, error)
	// phone.setCallRating#1c536a34 peer:InputPhoneCall rating:int comment:string = Updates;
	PhoneSetCallRating(context.Context, *TLPhoneSetCallRating) (*Updates, error)
	// phone.saveCallDebug#277add7e peer:InputPhoneCall debug:DataJSON = Bool;
	PhoneSaveCallDebug(context.Context, *TLPhoneSaveCallDebug) (*Bool, error)
}

func RegisterRPCphoneServer(s *grpc.Server, srv RPCphoneServer) {
	s.RegisterService(&_RPCphone_serviceDesc, srv)
}

func _RPCphone_PhoneGetCallConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneGetCallConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCphoneServer).PhoneGetCallConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCphone/PhoneGetCallConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCphoneServer).PhoneGetCallConfig(ctx, req.(*TLPhoneGetCallConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCphone_PhoneRequestCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneRequestCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCphoneServer).PhoneRequestCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCphone/PhoneRequestCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCphoneServer).PhoneRequestCall(ctx, req.(*TLPhoneRequestCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCphone_PhoneAcceptCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneAcceptCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCphoneServer).PhoneAcceptCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCphone/PhoneAcceptCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCphoneServer).PhoneAcceptCall(ctx, req.(*TLPhoneAcceptCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCphone_PhoneConfirmCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneConfirmCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCphoneServer).PhoneConfirmCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCphone/PhoneConfirmCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCphoneServer).PhoneConfirmCall(ctx, req.(*TLPhoneConfirmCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCphone_PhoneReceivedCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneReceivedCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCphoneServer).PhoneReceivedCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCphone/PhoneReceivedCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCphoneServer).PhoneReceivedCall(ctx, req.(*TLPhoneReceivedCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCphone_PhoneDiscardCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneDiscardCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCphoneServer).PhoneDiscardCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCphone/PhoneDiscardCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCphoneServer).PhoneDiscardCall(ctx, req.(*TLPhoneDiscardCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCphone_PhoneSetCallRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneSetCallRating)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCphoneServer).PhoneSetCallRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCphone/PhoneSetCallRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCphoneServer).PhoneSetCallRating(ctx, req.(*TLPhoneSetCallRating))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCphone_PhoneSaveCallDebug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneSaveCallDebug)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCphoneServer).PhoneSaveCallDebug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCphone/PhoneSaveCallDebug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCphoneServer).PhoneSaveCallDebug(ctx, req.(*TLPhoneSaveCallDebug))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCphone_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCphone",
	HandlerType: (*RPCphoneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "phone_getCallConfig",
			Handler:    _RPCphone_PhoneGetCallConfig_Handler,
		},
		{
			MethodName: "phone_requestCall",
			Handler:    _RPCphone_PhoneRequestCall_Handler,
		},
		{
			MethodName: "phone_acceptCall",
			Handler:    _RPCphone_PhoneAcceptCall_Handler,
		},
		{
			MethodName: "phone_confirmCall",
			Handler:    _RPCphone_PhoneConfirmCall_Handler,
		},
		{
			MethodName: "phone_receivedCall",
			Handler:    _RPCphone_PhoneReceivedCall_Handler,
		},
		{
			MethodName: "phone_discardCall",
			Handler:    _RPCphone_PhoneDiscardCall_Handler,
		},
		{
			MethodName: "phone_setCallRating",
			Handler:    _RPCphone_PhoneSetCallRating_Handler,
		},
		{
			MethodName: "phone_saveCallDebug",
			Handler:    _RPCphone_PhoneSaveCallDebug_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// Client API for RPCupdates service

type RPCupdatesClient interface {
	// updates.getState#edd4882a = updates.State;
	UpdatesGetState(ctx context.Context, in *TLUpdatesGetState, opts ...grpc.CallOption) (*Updates_State, error)
	// updates.getDifference#25939651 flags:# pts:int pts_total_limit:flags.0?int date:int qts:int = updates.Difference;
	UpdatesGetDifference(ctx context.Context, in *TLUpdatesGetDifference, opts ...grpc.CallOption) (*Updates_Difference, error)
	// updates.getChannelDifference#3173d78 flags:# force:flags.0?true channel:InputChannel filter:ChannelMessagesFilter pts:int limit:int = updates.ChannelDifference;
	UpdatesGetChannelDifference(ctx context.Context, in *TLUpdatesGetChannelDifference, opts ...grpc.CallOption) (*Updates_ChannelDifference, error)
}

type rPCupdatesClient struct {
	cc *grpc.ClientConn
}

func NewRPCupdatesClient(cc *grpc.ClientConn) RPCupdatesClient {
	return &rPCupdatesClient{cc}
}

func (c *rPCupdatesClient) UpdatesGetState(ctx context.Context, in *TLUpdatesGetState, opts ...grpc.CallOption) (*Updates_State, error) {
	out := new(Updates_State)
	err := grpc.Invoke(ctx, "/mtproto.RPCupdates/updates_getState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCupdatesClient) UpdatesGetDifference(ctx context.Context, in *TLUpdatesGetDifference, opts ...grpc.CallOption) (*Updates_Difference, error) {
	out := new(Updates_Difference)
	err := grpc.Invoke(ctx, "/mtproto.RPCupdates/updates_getDifference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCupdatesClient) UpdatesGetChannelDifference(ctx context.Context, in *TLUpdatesGetChannelDifference, opts ...grpc.CallOption) (*Updates_ChannelDifference, error) {
	out := new(Updates_ChannelDifference)
	err := grpc.Invoke(ctx, "/mtproto.RPCupdates/updates_getChannelDifference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCupdates service

type RPCupdatesServer interface {
	// updates.getState#edd4882a = updates.State;
	UpdatesGetState(context.Context, *TLUpdatesGetState) (*Updates_State, error)
	// updates.getDifference#25939651 flags:# pts:int pts_total_limit:flags.0?int date:int qts:int = updates.Difference;
	UpdatesGetDifference(context.Context, *TLUpdatesGetDifference) (*Updates_Difference, error)
	// updates.getChannelDifference#3173d78 flags:# force:flags.0?true channel:InputChannel filter:ChannelMessagesFilter pts:int limit:int = updates.ChannelDifference;
	UpdatesGetChannelDifference(context.Context, *TLUpdatesGetChannelDifference) (*Updates_ChannelDifference, error)
}

func RegisterRPCupdatesServer(s *grpc.Server, srv RPCupdatesServer) {
	s.RegisterService(&_RPCupdates_serviceDesc, srv)
}

func _RPCupdates_UpdatesGetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUpdatesGetState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCupdatesServer).UpdatesGetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCupdates/UpdatesGetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCupdatesServer).UpdatesGetState(ctx, req.(*TLUpdatesGetState))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCupdates_UpdatesGetDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUpdatesGetDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCupdatesServer).UpdatesGetDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCupdates/UpdatesGetDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCupdatesServer).UpdatesGetDifference(ctx, req.(*TLUpdatesGetDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCupdates_UpdatesGetChannelDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUpdatesGetChannelDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCupdatesServer).UpdatesGetChannelDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCupdates/UpdatesGetChannelDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCupdatesServer).UpdatesGetChannelDifference(ctx, req.(*TLUpdatesGetChannelDifference))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCupdates_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCupdates",
	HandlerType: (*RPCupdatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "updates_getState",
			Handler:    _RPCupdates_UpdatesGetState_Handler,
		},
		{
			MethodName: "updates_getDifference",
			Handler:    _RPCupdates_UpdatesGetDifference_Handler,
		},
		{
			MethodName: "updates_getChannelDifference",
			Handler:    _RPCupdates_UpdatesGetChannelDifference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// Client API for RPCpayments service

type RPCpaymentsClient interface {
	// payments.getPaymentForm#99f09745 msg_id:int = payments.PaymentForm;
	PaymentsGetPaymentForm(ctx context.Context, in *TLPaymentsGetPaymentForm, opts ...grpc.CallOption) (*Payments_PaymentForm, error)
	// payments.getPaymentReceipt#a092a980 msg_id:int = payments.PaymentReceipt;
	PaymentsGetPaymentReceipt(ctx context.Context, in *TLPaymentsGetPaymentReceipt, opts ...grpc.CallOption) (*Payments_PaymentReceipt, error)
	// payments.validateRequestedInfo#770a8e74 flags:# save:flags.0?true msg_id:int info:PaymentRequestedInfo = payments.ValidatedRequestedInfo;
	PaymentsValidateRequestedInfo(ctx context.Context, in *TLPaymentsValidateRequestedInfo, opts ...grpc.CallOption) (*Payments_ValidatedRequestedInfo, error)
	// payments.sendPaymentForm#2b8879b3 flags:# msg_id:int requested_info_id:flags.0?string shipping_option_id:flags.1?string credentials:InputPaymentCredentials = payments.PaymentResult;
	PaymentsSendPaymentForm(ctx context.Context, in *TLPaymentsSendPaymentForm, opts ...grpc.CallOption) (*Payments_PaymentResult, error)
	// payments.getSavedInfo#227d824b = payments.SavedInfo;
	PaymentsGetSavedInfo(ctx context.Context, in *TLPaymentsGetSavedInfo, opts ...grpc.CallOption) (*Payments_SavedInfo, error)
	// payments.clearSavedInfo#d83d70c1 flags:# credentials:flags.0?true info:flags.1?true = Bool;
	PaymentsClearSavedInfo(ctx context.Context, in *TLPaymentsClearSavedInfo, opts ...grpc.CallOption) (*Bool, error)
}

type rPCpaymentsClient struct {
	cc *grpc.ClientConn
}

func NewRPCpaymentsClient(cc *grpc.ClientConn) RPCpaymentsClient {
	return &rPCpaymentsClient{cc}
}

func (c *rPCpaymentsClient) PaymentsGetPaymentForm(ctx context.Context, in *TLPaymentsGetPaymentForm, opts ...grpc.CallOption) (*Payments_PaymentForm, error) {
	out := new(Payments_PaymentForm)
	err := grpc.Invoke(ctx, "/mtproto.RPCpayments/payments_getPaymentForm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCpaymentsClient) PaymentsGetPaymentReceipt(ctx context.Context, in *TLPaymentsGetPaymentReceipt, opts ...grpc.CallOption) (*Payments_PaymentReceipt, error) {
	out := new(Payments_PaymentReceipt)
	err := grpc.Invoke(ctx, "/mtproto.RPCpayments/payments_getPaymentReceipt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCpaymentsClient) PaymentsValidateRequestedInfo(ctx context.Context, in *TLPaymentsValidateRequestedInfo, opts ...grpc.CallOption) (*Payments_ValidatedRequestedInfo, error) {
	out := new(Payments_ValidatedRequestedInfo)
	err := grpc.Invoke(ctx, "/mtproto.RPCpayments/payments_validateRequestedInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCpaymentsClient) PaymentsSendPaymentForm(ctx context.Context, in *TLPaymentsSendPaymentForm, opts ...grpc.CallOption) (*Payments_PaymentResult, error) {
	out := new(Payments_PaymentResult)
	err := grpc.Invoke(ctx, "/mtproto.RPCpayments/payments_sendPaymentForm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCpaymentsClient) PaymentsGetSavedInfo(ctx context.Context, in *TLPaymentsGetSavedInfo, opts ...grpc.CallOption) (*Payments_SavedInfo, error) {
	out := new(Payments_SavedInfo)
	err := grpc.Invoke(ctx, "/mtproto.RPCpayments/payments_getSavedInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCpaymentsClient) PaymentsClearSavedInfo(ctx context.Context, in *TLPaymentsClearSavedInfo, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCpayments/payments_clearSavedInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCpayments service

type RPCpaymentsServer interface {
	// payments.getPaymentForm#99f09745 msg_id:int = payments.PaymentForm;
	PaymentsGetPaymentForm(context.Context, *TLPaymentsGetPaymentForm) (*Payments_PaymentForm, error)
	// payments.getPaymentReceipt#a092a980 msg_id:int = payments.PaymentReceipt;
	PaymentsGetPaymentReceipt(context.Context, *TLPaymentsGetPaymentReceipt) (*Payments_PaymentReceipt, error)
	// payments.validateRequestedInfo#770a8e74 flags:# save:flags.0?true msg_id:int info:PaymentRequestedInfo = payments.ValidatedRequestedInfo;
	PaymentsValidateRequestedInfo(context.Context, *TLPaymentsValidateRequestedInfo) (*Payments_ValidatedRequestedInfo, error)
	// payments.sendPaymentForm#2b8879b3 flags:# msg_id:int requested_info_id:flags.0?string shipping_option_id:flags.1?string credentials:InputPaymentCredentials = payments.PaymentResult;
	PaymentsSendPaymentForm(context.Context, *TLPaymentsSendPaymentForm) (*Payments_PaymentResult, error)
	// payments.getSavedInfo#227d824b = payments.SavedInfo;
	PaymentsGetSavedInfo(context.Context, *TLPaymentsGetSavedInfo) (*Payments_SavedInfo, error)
	// payments.clearSavedInfo#d83d70c1 flags:# credentials:flags.0?true info:flags.1?true = Bool;
	PaymentsClearSavedInfo(context.Context, *TLPaymentsClearSavedInfo) (*Bool, error)
}

func RegisterRPCpaymentsServer(s *grpc.Server, srv RPCpaymentsServer) {
	s.RegisterService(&_RPCpayments_serviceDesc, srv)
}

func _RPCpayments_PaymentsGetPaymentForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetPaymentForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCpaymentsServer).PaymentsGetPaymentForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCpayments/PaymentsGetPaymentForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCpaymentsServer).PaymentsGetPaymentForm(ctx, req.(*TLPaymentsGetPaymentForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCpayments_PaymentsGetPaymentReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetPaymentReceipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCpaymentsServer).PaymentsGetPaymentReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCpayments/PaymentsGetPaymentReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCpaymentsServer).PaymentsGetPaymentReceipt(ctx, req.(*TLPaymentsGetPaymentReceipt))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCpayments_PaymentsValidateRequestedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsValidateRequestedInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCpaymentsServer).PaymentsValidateRequestedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCpayments/PaymentsValidateRequestedInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCpaymentsServer).PaymentsValidateRequestedInfo(ctx, req.(*TLPaymentsValidateRequestedInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCpayments_PaymentsSendPaymentForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsSendPaymentForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCpaymentsServer).PaymentsSendPaymentForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCpayments/PaymentsSendPaymentForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCpaymentsServer).PaymentsSendPaymentForm(ctx, req.(*TLPaymentsSendPaymentForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCpayments_PaymentsGetSavedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetSavedInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCpaymentsServer).PaymentsGetSavedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCpayments/PaymentsGetSavedInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCpaymentsServer).PaymentsGetSavedInfo(ctx, req.(*TLPaymentsGetSavedInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCpayments_PaymentsClearSavedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsClearSavedInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCpaymentsServer).PaymentsClearSavedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCpayments/PaymentsClearSavedInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCpaymentsServer).PaymentsClearSavedInfo(ctx, req.(*TLPaymentsClearSavedInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCpayments_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCpayments",
	HandlerType: (*RPCpaymentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "payments_getPaymentForm",
			Handler:    _RPCpayments_PaymentsGetPaymentForm_Handler,
		},
		{
			MethodName: "payments_getPaymentReceipt",
			Handler:    _RPCpayments_PaymentsGetPaymentReceipt_Handler,
		},
		{
			MethodName: "payments_validateRequestedInfo",
			Handler:    _RPCpayments_PaymentsValidateRequestedInfo_Handler,
		},
		{
			MethodName: "payments_sendPaymentForm",
			Handler:    _RPCpayments_PaymentsSendPaymentForm_Handler,
		},
		{
			MethodName: "payments_getSavedInfo",
			Handler:    _RPCpayments_PaymentsGetSavedInfo_Handler,
		},
		{
			MethodName: "payments_clearSavedInfo",
			Handler:    _RPCpayments_PaymentsClearSavedInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// Client API for RPCaccount service

type RPCaccountClient interface {
	// account.registerDevice#637ea878 token_type:int token:string = Bool;
	AccountRegisterDevice(ctx context.Context, in *TLAccountRegisterDevice, opts ...grpc.CallOption) (*Bool, error)
	// account.unregisterDevice#65c55b40 token_type:int token:string = Bool;
	AccountUnregisterDevice(ctx context.Context, in *TLAccountUnregisterDevice, opts ...grpc.CallOption) (*Bool, error)
	// account.updateNotifySettings#84be5b93 peer:InputNotifyPeer settings:InputPeerNotifySettings = Bool;
	AccountUpdateNotifySettings(ctx context.Context, in *TLAccountUpdateNotifySettings, opts ...grpc.CallOption) (*Bool, error)
	// account.getNotifySettings#12b3ad31 peer:InputNotifyPeer = PeerNotifySettings;
	AccountGetNotifySettings(ctx context.Context, in *TLAccountGetNotifySettings, opts ...grpc.CallOption) (*PeerNotifySettings, error)
	// account.resetNotifySettings#db7e1747 = Bool;
	AccountResetNotifySettings(ctx context.Context, in *TLAccountResetNotifySettings, opts ...grpc.CallOption) (*Bool, error)
	// account.updateProfile#78515775 flags:# first_name:flags.0?string last_name:flags.1?string about:flags.2?string = User;
	AccountUpdateProfile(ctx context.Context, in *TLAccountUpdateProfile, opts ...grpc.CallOption) (*User, error)
	// account.updateStatus#6628562c offline:Bool = Bool;
	AccountUpdateStatus(ctx context.Context, in *TLAccountUpdateStatus, opts ...grpc.CallOption) (*Bool, error)
	// account.getWallPapers#c04cfac2 = Vector<WallPaper>;
	AccountGetWallPapers(ctx context.Context, in *TLAccountGetWallPapers, opts ...grpc.CallOption) (*Vector_WallPaper, error)
	// account.reportPeer#ae189d5f peer:InputPeer reason:ReportReason = Bool;
	AccountReportPeer(ctx context.Context, in *TLAccountReportPeer, opts ...grpc.CallOption) (*Bool, error)
	// account.checkUsername#2714d86c username:string = Bool;
	AccountCheckUsername(ctx context.Context, in *TLAccountCheckUsername, opts ...grpc.CallOption) (*Bool, error)
	// account.updateUsername#3e0bdd7c username:string = User;
	AccountUpdateUsername(ctx context.Context, in *TLAccountUpdateUsername, opts ...grpc.CallOption) (*User, error)
	// account.getPrivacy#dadbc950 key:InputPrivacyKey = account.PrivacyRules;
	AccountGetPrivacy(ctx context.Context, in *TLAccountGetPrivacy, opts ...grpc.CallOption) (*Account_PrivacyRules, error)
	// account.setPrivacy#c9f81ce8 key:InputPrivacyKey rules:Vector<InputPrivacyRule> = account.PrivacyRules;
	AccountSetPrivacy(ctx context.Context, in *TLAccountSetPrivacy, opts ...grpc.CallOption) (*Account_PrivacyRules, error)
	// account.deleteAccount#418d4e0b reason:string = Bool;
	AccountDeleteAccount(ctx context.Context, in *TLAccountDeleteAccount, opts ...grpc.CallOption) (*Bool, error)
	// account.getAccountTTL#8fc711d = AccountDaysTTL;
	AccountGetAccountTTL(ctx context.Context, in *TLAccountGetAccountTTL, opts ...grpc.CallOption) (*AccountDaysTTL, error)
	// account.setAccountTTL#2442485e ttl:AccountDaysTTL = Bool;
	AccountSetAccountTTL(ctx context.Context, in *TLAccountSetAccountTTL, opts ...grpc.CallOption) (*Bool, error)
	// account.sendChangePhoneCode#8e57deb flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool = auth.SentCode;
	AccountSendChangePhoneCode(ctx context.Context, in *TLAccountSendChangePhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	// account.changePhone#70c32edb phone_number:string phone_code_hash:string phone_code:string = User;
	AccountChangePhone(ctx context.Context, in *TLAccountChangePhone, opts ...grpc.CallOption) (*User, error)
	// account.updateDeviceLocked#38df3532 period:int = Bool;
	AccountUpdateDeviceLocked(ctx context.Context, in *TLAccountUpdateDeviceLocked, opts ...grpc.CallOption) (*Bool, error)
	// account.getAuthorizations#e320c158 = account.Authorizations;
	AccountGetAuthorizations(ctx context.Context, in *TLAccountGetAuthorizations, opts ...grpc.CallOption) (*Account_Authorizations, error)
	// account.resetAuthorization#df77f3bc hash:long = Bool;
	AccountResetAuthorization(ctx context.Context, in *TLAccountResetAuthorization, opts ...grpc.CallOption) (*Bool, error)
	// account.getPassword#548a30f5 = account.Password;
	AccountGetPassword(ctx context.Context, in *TLAccountGetPassword, opts ...grpc.CallOption) (*Account_Password, error)
	// account.getPasswordSettings#bc8d11bb current_password_hash:bytes = account.PasswordSettings;
	AccountGetPasswordSettings(ctx context.Context, in *TLAccountGetPasswordSettings, opts ...grpc.CallOption) (*Account_PasswordSettings, error)
	// account.updatePasswordSettings#fa7c4b86 current_password_hash:bytes new_settings:account.PasswordInputSettings = Bool;
	AccountUpdatePasswordSettings(ctx context.Context, in *TLAccountUpdatePasswordSettings, opts ...grpc.CallOption) (*Bool, error)
	// account.sendConfirmPhoneCode#1516d7bd flags:# allow_flashcall:flags.0?true hash:string current_number:flags.0?Bool = auth.SentCode;
	AccountSendConfirmPhoneCode(ctx context.Context, in *TLAccountSendConfirmPhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	// account.confirmPhone#5f2178c3 phone_code_hash:string phone_code:string = Bool;
	AccountConfirmPhone(ctx context.Context, in *TLAccountConfirmPhone, opts ...grpc.CallOption) (*Bool, error)
	// account.getTmpPassword#4a82327e password_hash:bytes period:int = account.TmpPassword;
	AccountGetTmpPassword(ctx context.Context, in *TLAccountGetTmpPassword, opts ...grpc.CallOption) (*Account_TmpPassword, error)
}

type rPCaccountClient struct {
	cc *grpc.ClientConn
}

func NewRPCaccountClient(cc *grpc.ClientConn) RPCaccountClient {
	return &rPCaccountClient{cc}
}

func (c *rPCaccountClient) AccountRegisterDevice(ctx context.Context, in *TLAccountRegisterDevice, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_registerDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountUnregisterDevice(ctx context.Context, in *TLAccountUnregisterDevice, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_unregisterDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountUpdateNotifySettings(ctx context.Context, in *TLAccountUpdateNotifySettings, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_updateNotifySettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountGetNotifySettings(ctx context.Context, in *TLAccountGetNotifySettings, opts ...grpc.CallOption) (*PeerNotifySettings, error) {
	out := new(PeerNotifySettings)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_getNotifySettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountResetNotifySettings(ctx context.Context, in *TLAccountResetNotifySettings, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_resetNotifySettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountUpdateProfile(ctx context.Context, in *TLAccountUpdateProfile, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_updateProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountUpdateStatus(ctx context.Context, in *TLAccountUpdateStatus, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_updateStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountGetWallPapers(ctx context.Context, in *TLAccountGetWallPapers, opts ...grpc.CallOption) (*Vector_WallPaper, error) {
	out := new(Vector_WallPaper)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_getWallPapers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountReportPeer(ctx context.Context, in *TLAccountReportPeer, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_reportPeer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountCheckUsername(ctx context.Context, in *TLAccountCheckUsername, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_checkUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountUpdateUsername(ctx context.Context, in *TLAccountUpdateUsername, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_updateUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountGetPrivacy(ctx context.Context, in *TLAccountGetPrivacy, opts ...grpc.CallOption) (*Account_PrivacyRules, error) {
	out := new(Account_PrivacyRules)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_getPrivacy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountSetPrivacy(ctx context.Context, in *TLAccountSetPrivacy, opts ...grpc.CallOption) (*Account_PrivacyRules, error) {
	out := new(Account_PrivacyRules)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_setPrivacy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountDeleteAccount(ctx context.Context, in *TLAccountDeleteAccount, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_deleteAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountGetAccountTTL(ctx context.Context, in *TLAccountGetAccountTTL, opts ...grpc.CallOption) (*AccountDaysTTL, error) {
	out := new(AccountDaysTTL)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_getAccountTTL", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountSetAccountTTL(ctx context.Context, in *TLAccountSetAccountTTL, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_setAccountTTL", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountSendChangePhoneCode(ctx context.Context, in *TLAccountSendChangePhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	out := new(Auth_SentCode)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_sendChangePhoneCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountChangePhone(ctx context.Context, in *TLAccountChangePhone, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_changePhone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountUpdateDeviceLocked(ctx context.Context, in *TLAccountUpdateDeviceLocked, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_updateDeviceLocked", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountGetAuthorizations(ctx context.Context, in *TLAccountGetAuthorizations, opts ...grpc.CallOption) (*Account_Authorizations, error) {
	out := new(Account_Authorizations)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_getAuthorizations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountResetAuthorization(ctx context.Context, in *TLAccountResetAuthorization, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_resetAuthorization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountGetPassword(ctx context.Context, in *TLAccountGetPassword, opts ...grpc.CallOption) (*Account_Password, error) {
	out := new(Account_Password)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_getPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountGetPasswordSettings(ctx context.Context, in *TLAccountGetPasswordSettings, opts ...grpc.CallOption) (*Account_PasswordSettings, error) {
	out := new(Account_PasswordSettings)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_getPasswordSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountUpdatePasswordSettings(ctx context.Context, in *TLAccountUpdatePasswordSettings, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_updatePasswordSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountSendConfirmPhoneCode(ctx context.Context, in *TLAccountSendConfirmPhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	out := new(Auth_SentCode)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_sendConfirmPhoneCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountConfirmPhone(ctx context.Context, in *TLAccountConfirmPhone, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_confirmPhone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCaccountClient) AccountGetTmpPassword(ctx context.Context, in *TLAccountGetTmpPassword, opts ...grpc.CallOption) (*Account_TmpPassword, error) {
	out := new(Account_TmpPassword)
	err := grpc.Invoke(ctx, "/mtproto.RPCaccount/account_getTmpPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCaccount service

type RPCaccountServer interface {
	// account.registerDevice#637ea878 token_type:int token:string = Bool;
	AccountRegisterDevice(context.Context, *TLAccountRegisterDevice) (*Bool, error)
	// account.unregisterDevice#65c55b40 token_type:int token:string = Bool;
	AccountUnregisterDevice(context.Context, *TLAccountUnregisterDevice) (*Bool, error)
	// account.updateNotifySettings#84be5b93 peer:InputNotifyPeer settings:InputPeerNotifySettings = Bool;
	AccountUpdateNotifySettings(context.Context, *TLAccountUpdateNotifySettings) (*Bool, error)
	// account.getNotifySettings#12b3ad31 peer:InputNotifyPeer = PeerNotifySettings;
	AccountGetNotifySettings(context.Context, *TLAccountGetNotifySettings) (*PeerNotifySettings, error)
	// account.resetNotifySettings#db7e1747 = Bool;
	AccountResetNotifySettings(context.Context, *TLAccountResetNotifySettings) (*Bool, error)
	// account.updateProfile#78515775 flags:# first_name:flags.0?string last_name:flags.1?string about:flags.2?string = User;
	AccountUpdateProfile(context.Context, *TLAccountUpdateProfile) (*User, error)
	// account.updateStatus#6628562c offline:Bool = Bool;
	AccountUpdateStatus(context.Context, *TLAccountUpdateStatus) (*Bool, error)
	// account.getWallPapers#c04cfac2 = Vector<WallPaper>;
	AccountGetWallPapers(context.Context, *TLAccountGetWallPapers) (*Vector_WallPaper, error)
	// account.reportPeer#ae189d5f peer:InputPeer reason:ReportReason = Bool;
	AccountReportPeer(context.Context, *TLAccountReportPeer) (*Bool, error)
	// account.checkUsername#2714d86c username:string = Bool;
	AccountCheckUsername(context.Context, *TLAccountCheckUsername) (*Bool, error)
	// account.updateUsername#3e0bdd7c username:string = User;
	AccountUpdateUsername(context.Context, *TLAccountUpdateUsername) (*User, error)
	// account.getPrivacy#dadbc950 key:InputPrivacyKey = account.PrivacyRules;
	AccountGetPrivacy(context.Context, *TLAccountGetPrivacy) (*Account_PrivacyRules, error)
	// account.setPrivacy#c9f81ce8 key:InputPrivacyKey rules:Vector<InputPrivacyRule> = account.PrivacyRules;
	AccountSetPrivacy(context.Context, *TLAccountSetPrivacy) (*Account_PrivacyRules, error)
	// account.deleteAccount#418d4e0b reason:string = Bool;
	AccountDeleteAccount(context.Context, *TLAccountDeleteAccount) (*Bool, error)
	// account.getAccountTTL#8fc711d = AccountDaysTTL;
	AccountGetAccountTTL(context.Context, *TLAccountGetAccountTTL) (*AccountDaysTTL, error)
	// account.setAccountTTL#2442485e ttl:AccountDaysTTL = Bool;
	AccountSetAccountTTL(context.Context, *TLAccountSetAccountTTL) (*Bool, error)
	// account.sendChangePhoneCode#8e57deb flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool = auth.SentCode;
	AccountSendChangePhoneCode(context.Context, *TLAccountSendChangePhoneCode) (*Auth_SentCode, error)
	// account.changePhone#70c32edb phone_number:string phone_code_hash:string phone_code:string = User;
	AccountChangePhone(context.Context, *TLAccountChangePhone) (*User, error)
	// account.updateDeviceLocked#38df3532 period:int = Bool;
	AccountUpdateDeviceLocked(context.Context, *TLAccountUpdateDeviceLocked) (*Bool, error)
	// account.getAuthorizations#e320c158 = account.Authorizations;
	AccountGetAuthorizations(context.Context, *TLAccountGetAuthorizations) (*Account_Authorizations, error)
	// account.resetAuthorization#df77f3bc hash:long = Bool;
	AccountResetAuthorization(context.Context, *TLAccountResetAuthorization) (*Bool, error)
	// account.getPassword#548a30f5 = account.Password;
	AccountGetPassword(context.Context, *TLAccountGetPassword) (*Account_Password, error)
	// account.getPasswordSettings#bc8d11bb current_password_hash:bytes = account.PasswordSettings;
	AccountGetPasswordSettings(context.Context, *TLAccountGetPasswordSettings) (*Account_PasswordSettings, error)
	// account.updatePasswordSettings#fa7c4b86 current_password_hash:bytes new_settings:account.PasswordInputSettings = Bool;
	AccountUpdatePasswordSettings(context.Context, *TLAccountUpdatePasswordSettings) (*Bool, error)
	// account.sendConfirmPhoneCode#1516d7bd flags:# allow_flashcall:flags.0?true hash:string current_number:flags.0?Bool = auth.SentCode;
	AccountSendConfirmPhoneCode(context.Context, *TLAccountSendConfirmPhoneCode) (*Auth_SentCode, error)
	// account.confirmPhone#5f2178c3 phone_code_hash:string phone_code:string = Bool;
	AccountConfirmPhone(context.Context, *TLAccountConfirmPhone) (*Bool, error)
	// account.getTmpPassword#4a82327e password_hash:bytes period:int = account.TmpPassword;
	AccountGetTmpPassword(context.Context, *TLAccountGetTmpPassword) (*Account_TmpPassword, error)
}

func RegisterRPCaccountServer(s *grpc.Server, srv RPCaccountServer) {
	s.RegisterService(&_RPCaccount_serviceDesc, srv)
}

func _RPCaccount_AccountRegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountRegisterDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountRegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountRegisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountRegisterDevice(ctx, req.(*TLAccountRegisterDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountUnregisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUnregisterDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountUnregisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountUnregisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountUnregisterDevice(ctx, req.(*TLAccountUnregisterDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountUpdateNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountUpdateNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountUpdateNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountUpdateNotifySettings(ctx, req.(*TLAccountUpdateNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountGetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountGetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountGetNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountGetNotifySettings(ctx, req.(*TLAccountGetNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountResetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResetNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountResetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountResetNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountResetNotifySettings(ctx, req.(*TLAccountResetNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountUpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountUpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountUpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountUpdateProfile(ctx, req.(*TLAccountUpdateProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountUpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountUpdateStatus(ctx, req.(*TLAccountUpdateStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountGetWallPapers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetWallPapers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountGetWallPapers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountGetWallPapers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountGetWallPapers(ctx, req.(*TLAccountGetWallPapers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountReportPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountReportPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountReportPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountReportPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountReportPeer(ctx, req.(*TLAccountReportPeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountCheckUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountCheckUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountCheckUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountCheckUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountCheckUsername(ctx, req.(*TLAccountCheckUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountUpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountUpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountUpdateUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountUpdateUsername(ctx, req.(*TLAccountUpdateUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountGetPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountGetPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountGetPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountGetPrivacy(ctx, req.(*TLAccountGetPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountSetPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSetPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountSetPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountSetPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountSetPrivacy(ctx, req.(*TLAccountSetPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountDeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountDeleteAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountDeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountDeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountDeleteAccount(ctx, req.(*TLAccountDeleteAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountGetAccountTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetAccountTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountGetAccountTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountGetAccountTTL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountGetAccountTTL(ctx, req.(*TLAccountGetAccountTTL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountSetAccountTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSetAccountTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountSetAccountTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountSetAccountTTL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountSetAccountTTL(ctx, req.(*TLAccountSetAccountTTL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountSendChangePhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSendChangePhoneCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountSendChangePhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountSendChangePhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountSendChangePhoneCode(ctx, req.(*TLAccountSendChangePhoneCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountChangePhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountChangePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountChangePhone(ctx, req.(*TLAccountChangePhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountUpdateDeviceLocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateDeviceLocked)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountUpdateDeviceLocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountUpdateDeviceLocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountUpdateDeviceLocked(ctx, req.(*TLAccountUpdateDeviceLocked))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountGetAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetAuthorizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountGetAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountGetAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountGetAuthorizations(ctx, req.(*TLAccountGetAuthorizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountResetAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResetAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountResetAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountResetAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountResetAuthorization(ctx, req.(*TLAccountResetAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountGetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountGetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountGetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountGetPassword(ctx, req.(*TLAccountGetPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountGetPasswordSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetPasswordSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountGetPasswordSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountGetPasswordSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountGetPasswordSettings(ctx, req.(*TLAccountGetPasswordSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountUpdatePasswordSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdatePasswordSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountUpdatePasswordSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountUpdatePasswordSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountUpdatePasswordSettings(ctx, req.(*TLAccountUpdatePasswordSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountSendConfirmPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSendConfirmPhoneCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountSendConfirmPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountSendConfirmPhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountSendConfirmPhoneCode(ctx, req.(*TLAccountSendConfirmPhoneCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountConfirmPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountConfirmPhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountConfirmPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountConfirmPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountConfirmPhone(ctx, req.(*TLAccountConfirmPhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCaccount_AccountGetTmpPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetTmpPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCaccountServer).AccountGetTmpPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCaccount/AccountGetTmpPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCaccountServer).AccountGetTmpPassword(ctx, req.(*TLAccountGetTmpPassword))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCaccount_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCaccount",
	HandlerType: (*RPCaccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_registerDevice",
			Handler:    _RPCaccount_AccountRegisterDevice_Handler,
		},
		{
			MethodName: "account_unregisterDevice",
			Handler:    _RPCaccount_AccountUnregisterDevice_Handler,
		},
		{
			MethodName: "account_updateNotifySettings",
			Handler:    _RPCaccount_AccountUpdateNotifySettings_Handler,
		},
		{
			MethodName: "account_getNotifySettings",
			Handler:    _RPCaccount_AccountGetNotifySettings_Handler,
		},
		{
			MethodName: "account_resetNotifySettings",
			Handler:    _RPCaccount_AccountResetNotifySettings_Handler,
		},
		{
			MethodName: "account_updateProfile",
			Handler:    _RPCaccount_AccountUpdateProfile_Handler,
		},
		{
			MethodName: "account_updateStatus",
			Handler:    _RPCaccount_AccountUpdateStatus_Handler,
		},
		{
			MethodName: "account_getWallPapers",
			Handler:    _RPCaccount_AccountGetWallPapers_Handler,
		},
		{
			MethodName: "account_reportPeer",
			Handler:    _RPCaccount_AccountReportPeer_Handler,
		},
		{
			MethodName: "account_checkUsername",
			Handler:    _RPCaccount_AccountCheckUsername_Handler,
		},
		{
			MethodName: "account_updateUsername",
			Handler:    _RPCaccount_AccountUpdateUsername_Handler,
		},
		{
			MethodName: "account_getPrivacy",
			Handler:    _RPCaccount_AccountGetPrivacy_Handler,
		},
		{
			MethodName: "account_setPrivacy",
			Handler:    _RPCaccount_AccountSetPrivacy_Handler,
		},
		{
			MethodName: "account_deleteAccount",
			Handler:    _RPCaccount_AccountDeleteAccount_Handler,
		},
		{
			MethodName: "account_getAccountTTL",
			Handler:    _RPCaccount_AccountGetAccountTTL_Handler,
		},
		{
			MethodName: "account_setAccountTTL",
			Handler:    _RPCaccount_AccountSetAccountTTL_Handler,
		},
		{
			MethodName: "account_sendChangePhoneCode",
			Handler:    _RPCaccount_AccountSendChangePhoneCode_Handler,
		},
		{
			MethodName: "account_changePhone",
			Handler:    _RPCaccount_AccountChangePhone_Handler,
		},
		{
			MethodName: "account_updateDeviceLocked",
			Handler:    _RPCaccount_AccountUpdateDeviceLocked_Handler,
		},
		{
			MethodName: "account_getAuthorizations",
			Handler:    _RPCaccount_AccountGetAuthorizations_Handler,
		},
		{
			MethodName: "account_resetAuthorization",
			Handler:    _RPCaccount_AccountResetAuthorization_Handler,
		},
		{
			MethodName: "account_getPassword",
			Handler:    _RPCaccount_AccountGetPassword_Handler,
		},
		{
			MethodName: "account_getPasswordSettings",
			Handler:    _RPCaccount_AccountGetPasswordSettings_Handler,
		},
		{
			MethodName: "account_updatePasswordSettings",
			Handler:    _RPCaccount_AccountUpdatePasswordSettings_Handler,
		},
		{
			MethodName: "account_sendConfirmPhoneCode",
			Handler:    _RPCaccount_AccountSendConfirmPhoneCode_Handler,
		},
		{
			MethodName: "account_confirmPhone",
			Handler:    _RPCaccount_AccountConfirmPhone_Handler,
		},
		{
			MethodName: "account_getTmpPassword",
			Handler:    _RPCaccount_AccountGetTmpPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// Client API for RPCusers service

type RPCusersClient interface {
	// users.getUsers#d91a548 id:Vector<InputUser> = Vector<User>;
	UsersGetUsers(ctx context.Context, in *TLUsersGetUsers, opts ...grpc.CallOption) (*Vector_User, error)
	// users.getFullUser#ca30a5b1 id:InputUser = UserFull;
	UsersGetFullUser(ctx context.Context, in *TLUsersGetFullUser, opts ...grpc.CallOption) (*UserFull, error)
}

type rPCusersClient struct {
	cc *grpc.ClientConn
}

func NewRPCusersClient(cc *grpc.ClientConn) RPCusersClient {
	return &rPCusersClient{cc}
}

func (c *rPCusersClient) UsersGetUsers(ctx context.Context, in *TLUsersGetUsers, opts ...grpc.CallOption) (*Vector_User, error) {
	out := new(Vector_User)
	err := grpc.Invoke(ctx, "/mtproto.RPCusers/users_getUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCusersClient) UsersGetFullUser(ctx context.Context, in *TLUsersGetFullUser, opts ...grpc.CallOption) (*UserFull, error) {
	out := new(UserFull)
	err := grpc.Invoke(ctx, "/mtproto.RPCusers/users_getFullUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCusers service

type RPCusersServer interface {
	// users.getUsers#d91a548 id:Vector<InputUser> = Vector<User>;
	UsersGetUsers(context.Context, *TLUsersGetUsers) (*Vector_User, error)
	// users.getFullUser#ca30a5b1 id:InputUser = UserFull;
	UsersGetFullUser(context.Context, *TLUsersGetFullUser) (*UserFull, error)
}

func RegisterRPCusersServer(s *grpc.Server, srv RPCusersServer) {
	s.RegisterService(&_RPCusers_serviceDesc, srv)
}

func _RPCusers_UsersGetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersGetUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCusersServer).UsersGetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCusers/UsersGetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCusersServer).UsersGetUsers(ctx, req.(*TLUsersGetUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCusers_UsersGetFullUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersGetFullUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCusersServer).UsersGetFullUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCusers/UsersGetFullUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCusersServer).UsersGetFullUser(ctx, req.(*TLUsersGetFullUser))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCusers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCusers",
	HandlerType: (*RPCusersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "users_getUsers",
			Handler:    _RPCusers_UsersGetUsers_Handler,
		},
		{
			MethodName: "users_getFullUser",
			Handler:    _RPCusers_UsersGetFullUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// Client API for RPCmessages service

type RPCmessagesClient interface {
	// messages.getMessages#4222fa74 id:Vector<int> = messages.Messages;
	MessagesGetMessages(ctx context.Context, in *TLMessagesGetMessages, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.getDialogs#191ba9c5 flags:# exclude_pinned:flags.0?true offset_date:int offset_id:int offset_peer:InputPeer limit:int = messages.Dialogs;
	MessagesGetDialogs(ctx context.Context, in *TLMessagesGetDialogs, opts ...grpc.CallOption) (*Messages_Dialogs, error)
	// messages.getHistory#afa92846 peer:InputPeer offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	MessagesGetHistory(ctx context.Context, in *TLMessagesGetHistory, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.search#39e9ea0 flags:# peer:InputPeer q:string from_id:flags.0?InputUser filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	MessagesSearch(ctx context.Context, in *TLMessagesSearch, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.readHistory#e306d3a peer:InputPeer max_id:int = messages.AffectedMessages;
	MessagesReadHistory(ctx context.Context, in *TLMessagesReadHistory, opts ...grpc.CallOption) (*Messages_AffectedMessages, error)
	// messages.deleteHistory#1c015b09 flags:# just_clear:flags.0?true peer:InputPeer max_id:int = messages.AffectedHistory;
	MessagesDeleteHistory(ctx context.Context, in *TLMessagesDeleteHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error)
	// messages.deleteMessages#e58e95d2 flags:# revoke:flags.0?true id:Vector<int> = messages.AffectedMessages;
	MessagesDeleteMessages(ctx context.Context, in *TLMessagesDeleteMessages, opts ...grpc.CallOption) (*Messages_AffectedMessages, error)
	// messages.receivedMessages#5a954c0 max_id:int = Vector<ReceivedNotifyMessage>;
	MessagesReceivedMessages(ctx context.Context, in *TLMessagesReceivedMessages, opts ...grpc.CallOption) (*Vector_ReceivedNotifyMessage, error)
	// messages.setTyping#a3825e50 peer:InputPeer action:SendMessageAction = Bool;
	MessagesSetTyping(ctx context.Context, in *TLMessagesSetTyping, opts ...grpc.CallOption) (*Bool, error)
	// messages.sendMessage#fa88427a flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	MessagesSendMessage(ctx context.Context, in *TLMessagesSendMessage, opts ...grpc.CallOption) (*Updates, error)
	// messages.sendMedia#c8f16791 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int media:InputMedia random_id:long reply_markup:flags.2?ReplyMarkup = Updates;
	MessagesSendMedia(ctx context.Context, in *TLMessagesSendMedia, opts ...grpc.CallOption) (*Updates, error)
	// messages.forwardMessages#708e0195 flags:# silent:flags.5?true background:flags.6?true with_my_score:flags.8?true from_peer:InputPeer id:Vector<int> random_id:Vector<long> to_peer:InputPeer = Updates;
	MessagesForwardMessages(ctx context.Context, in *TLMessagesForwardMessages, opts ...grpc.CallOption) (*Updates, error)
	// messages.reportSpam#cf1592db peer:InputPeer = Bool;
	MessagesReportSpam(ctx context.Context, in *TLMessagesReportSpam, opts ...grpc.CallOption) (*Bool, error)
	// messages.hideReportSpam#a8f1709b peer:InputPeer = Bool;
	MessagesHideReportSpam(ctx context.Context, in *TLMessagesHideReportSpam, opts ...grpc.CallOption) (*Bool, error)
	// messages.getPeerSettings#3672e09c peer:InputPeer = PeerSettings;
	MessagesGetPeerSettings(ctx context.Context, in *TLMessagesGetPeerSettings, opts ...grpc.CallOption) (*PeerSettings, error)
	// messages.getChats#3c6aa187 id:Vector<int> = messages.Chats;
	MessagesGetChats(ctx context.Context, in *TLMessagesGetChats, opts ...grpc.CallOption) (*Messages_Chats, error)
	// messages.getFullChat#3b831c66 chat_id:int = messages.ChatFull;
	MessagesGetFullChat(ctx context.Context, in *TLMessagesGetFullChat, opts ...grpc.CallOption) (*Messages_ChatFull, error)
	// messages.editChatTitle#dc452855 chat_id:int title:string = Updates;
	MessagesEditChatTitle(ctx context.Context, in *TLMessagesEditChatTitle, opts ...grpc.CallOption) (*Updates, error)
	// messages.editChatPhoto#ca4c79d8 chat_id:int photo:InputChatPhoto = Updates;
	MessagesEditChatPhoto(ctx context.Context, in *TLMessagesEditChatPhoto, opts ...grpc.CallOption) (*Updates, error)
	// messages.addChatUser#f9a0aa09 chat_id:int user_id:InputUser fwd_limit:int = Updates;
	MessagesAddChatUser(ctx context.Context, in *TLMessagesAddChatUser, opts ...grpc.CallOption) (*Updates, error)
	// messages.deleteChatUser#e0611f16 chat_id:int user_id:InputUser = Updates;
	MessagesDeleteChatUser(ctx context.Context, in *TLMessagesDeleteChatUser, opts ...grpc.CallOption) (*Updates, error)
	// messages.createChat#9cb126e users:Vector<InputUser> title:string = Updates;
	MessagesCreateChat(ctx context.Context, in *TLMessagesCreateChat, opts ...grpc.CallOption) (*Updates, error)
	// messages.forwardMessage#33963bf9 peer:InputPeer id:int random_id:long = Updates;
	MessagesForwardMessage(ctx context.Context, in *TLMessagesForwardMessage, opts ...grpc.CallOption) (*Updates, error)
	// messages.getDhConfig#26cf8950 version:int random_length:int = messages.DhConfig;
	MessagesGetDhConfig(ctx context.Context, in *TLMessagesGetDhConfig, opts ...grpc.CallOption) (*Messages_DhConfig, error)
	// messages.requestEncryption#f64daf43 user_id:InputUser random_id:int g_a:bytes = EncryptedChat;
	MessagesRequestEncryption(ctx context.Context, in *TLMessagesRequestEncryption, opts ...grpc.CallOption) (*EncryptedChat, error)
	// messages.acceptEncryption#3dbc0415 peer:InputEncryptedChat g_b:bytes key_fingerprint:long = EncryptedChat;
	MessagesAcceptEncryption(ctx context.Context, in *TLMessagesAcceptEncryption, opts ...grpc.CallOption) (*EncryptedChat, error)
	// messages.discardEncryption#edd923c5 chat_id:int = Bool;
	MessagesDiscardEncryption(ctx context.Context, in *TLMessagesDiscardEncryption, opts ...grpc.CallOption) (*Bool, error)
	// messages.setEncryptedTyping#791451ed peer:InputEncryptedChat typing:Bool = Bool;
	MessagesSetEncryptedTyping(ctx context.Context, in *TLMessagesSetEncryptedTyping, opts ...grpc.CallOption) (*Bool, error)
	// messages.readEncryptedHistory#7f4b690a peer:InputEncryptedChat max_date:int = Bool;
	MessagesReadEncryptedHistory(ctx context.Context, in *TLMessagesReadEncryptedHistory, opts ...grpc.CallOption) (*Bool, error)
	// messages.sendEncrypted#a9776773 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
	MessagesSendEncrypted(ctx context.Context, in *TLMessagesSendEncrypted, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error)
	// messages.sendEncryptedFile#9a901b66 peer:InputEncryptedChat random_id:long data:bytes file:InputEncryptedFile = messages.SentEncryptedMessage;
	MessagesSendEncryptedFile(ctx context.Context, in *TLMessagesSendEncryptedFile, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error)
	// messages.sendEncryptedService#32d439a4 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
	MessagesSendEncryptedService(ctx context.Context, in *TLMessagesSendEncryptedService, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error)
	// messages.receivedQueue#55a5bb66 max_qts:int = Vector<long>;
	MessagesReceivedQueue(ctx context.Context, in *TLMessagesReceivedQueue, opts ...grpc.CallOption) (*VectorLong, error)
	// messages.reportEncryptedSpam#4b0c8c0f peer:InputEncryptedChat = Bool;
	MessagesReportEncryptedSpam(ctx context.Context, in *TLMessagesReportEncryptedSpam, opts ...grpc.CallOption) (*Bool, error)
	// messages.readMessageContents#36a73f77 id:Vector<int> = messages.AffectedMessages;
	MessagesReadMessageContents(ctx context.Context, in *TLMessagesReadMessageContents, opts ...grpc.CallOption) (*Messages_AffectedMessages, error)
	// messages.getAllStickers#1c9618b1 hash:int = messages.AllStickers;
	MessagesGetAllStickers(ctx context.Context, in *TLMessagesGetAllStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error)
	// messages.getWebPagePreview#25223e24 message:string = MessageMedia;
	MessagesGetWebPagePreview(ctx context.Context, in *TLMessagesGetWebPagePreview, opts ...grpc.CallOption) (*MessageMedia, error)
	// messages.exportChatInvite#7d885289 chat_id:int = ExportedChatInvite;
	MessagesExportChatInvite(ctx context.Context, in *TLMessagesExportChatInvite, opts ...grpc.CallOption) (*ExportedChatInvite, error)
	// messages.checkChatInvite#3eadb1bb hash:string = ChatInvite;
	MessagesCheckChatInvite(ctx context.Context, in *TLMessagesCheckChatInvite, opts ...grpc.CallOption) (*ChatInvite, error)
	// messages.importChatInvite#6c50051c hash:string = Updates;
	MessagesImportChatInvite(ctx context.Context, in *TLMessagesImportChatInvite, opts ...grpc.CallOption) (*Updates, error)
	// messages.getStickerSet#2619a90e stickerset:InputStickerSet = messages.StickerSet;
	MessagesGetStickerSet(ctx context.Context, in *TLMessagesGetStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	// messages.installStickerSet#c78fe460 stickerset:InputStickerSet archived:Bool = messages.StickerSetInstallResult;
	MessagesInstallStickerSet(ctx context.Context, in *TLMessagesInstallStickerSet, opts ...grpc.CallOption) (*Messages_StickerSetInstallResult, error)
	// messages.uninstallStickerSet#f96e55de stickerset:InputStickerSet = Bool;
	MessagesUninstallStickerSet(ctx context.Context, in *TLMessagesUninstallStickerSet, opts ...grpc.CallOption) (*Bool, error)
	// messages.startBot#e6df7378 bot:InputUser peer:InputPeer random_id:long start_param:string = Updates;
	MessagesStartBot(ctx context.Context, in *TLMessagesStartBot, opts ...grpc.CallOption) (*Updates, error)
	// messages.getMessagesViews#c4c8a55d peer:InputPeer id:Vector<int> increment:Bool = Vector<int>;
	MessagesGetMessagesViews(ctx context.Context, in *TLMessagesGetMessagesViews, opts ...grpc.CallOption) (*VectorInt, error)
	// messages.toggleChatAdmins#ec8bd9e1 chat_id:int enabled:Bool = Updates;
	MessagesToggleChatAdmins(ctx context.Context, in *TLMessagesToggleChatAdmins, opts ...grpc.CallOption) (*Updates, error)
	// messages.editChatAdmin#a9e69f2e chat_id:int user_id:InputUser is_admin:Bool = Bool;
	MessagesEditChatAdmin(ctx context.Context, in *TLMessagesEditChatAdmin, opts ...grpc.CallOption) (*Bool, error)
	// messages.migrateChat#15a3b8e3 chat_id:int = Updates;
	MessagesMigrateChat(ctx context.Context, in *TLMessagesMigrateChat, opts ...grpc.CallOption) (*Updates, error)
	// messages.searchGlobal#9e3cacb0 q:string offset_date:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;
	MessagesSearchGlobal(ctx context.Context, in *TLMessagesSearchGlobal, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.reorderStickerSets#78337739 flags:# masks:flags.0?true order:Vector<long> = Bool;
	MessagesReorderStickerSets(ctx context.Context, in *TLMessagesReorderStickerSets, opts ...grpc.CallOption) (*Bool, error)
	// messages.getDocumentByHash#338e2464 sha256:bytes size:int mime_type:string = Document;
	MessagesGetDocumentByHash(ctx context.Context, in *TLMessagesGetDocumentByHash, opts ...grpc.CallOption) (*Document, error)
	// messages.searchGifs#bf9a776b q:string offset:int = messages.FoundGifs;
	MessagesSearchGifs(ctx context.Context, in *TLMessagesSearchGifs, opts ...grpc.CallOption) (*Messages_FoundGifs, error)
	// messages.getSavedGifs#83bf3d52 hash:int = messages.SavedGifs;
	MessagesGetSavedGifs(ctx context.Context, in *TLMessagesGetSavedGifs, opts ...grpc.CallOption) (*Messages_SavedGifs, error)
	// messages.saveGif#327a30cb id:InputDocument unsave:Bool = Bool;
	MessagesSaveGif(ctx context.Context, in *TLMessagesSaveGif, opts ...grpc.CallOption) (*Bool, error)
	// messages.getInlineBotResults#514e999d flags:# bot:InputUser peer:InputPeer geo_point:flags.0?InputGeoPoint query:string offset:string = messages.BotResults;
	MessagesGetInlineBotResults(ctx context.Context, in *TLMessagesGetInlineBotResults, opts ...grpc.CallOption) (*Messages_BotResults, error)
	// messages.setInlineBotResults#eb5ea206 flags:# gallery:flags.0?true private:flags.1?true query_id:long results:Vector<InputBotInlineResult> cache_time:int next_offset:flags.2?string switch_pm:flags.3?InlineBotSwitchPM = Bool;
	MessagesSetInlineBotResults(ctx context.Context, in *TLMessagesSetInlineBotResults, opts ...grpc.CallOption) (*Bool, error)
	// messages.sendInlineBotResult#b16e06fe flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int random_id:long query_id:long id:string = Updates;
	MessagesSendInlineBotResult(ctx context.Context, in *TLMessagesSendInlineBotResult, opts ...grpc.CallOption) (*Updates, error)
	// messages.getMessageEditData#fda68d36 peer:InputPeer id:int = messages.MessageEditData;
	MessagesGetMessageEditData(ctx context.Context, in *TLMessagesGetMessageEditData, opts ...grpc.CallOption) (*Messages_MessageEditData, error)
	// messages.editMessage#ce91e4ca flags:# no_webpage:flags.1?true peer:InputPeer id:int message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	MessagesEditMessage(ctx context.Context, in *TLMessagesEditMessage, opts ...grpc.CallOption) (*Updates, error)
	// messages.editInlineBotMessage#130c2c85 flags:# no_webpage:flags.1?true id:InputBotInlineMessageID message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Bool;
	MessagesEditInlineBotMessage(ctx context.Context, in *TLMessagesEditInlineBotMessage, opts ...grpc.CallOption) (*Bool, error)
	// messages.getBotCallbackAnswer#810a9fec flags:# game:flags.1?true peer:InputPeer msg_id:int data:flags.0?bytes = messages.BotCallbackAnswer;
	MessagesGetBotCallbackAnswer(ctx context.Context, in *TLMessagesGetBotCallbackAnswer, opts ...grpc.CallOption) (*Messages_BotCallbackAnswer, error)
	// messages.setBotCallbackAnswer#d58f130a flags:# alert:flags.1?true query_id:long message:flags.0?string url:flags.2?string cache_time:int = Bool;
	MessagesSetBotCallbackAnswer(ctx context.Context, in *TLMessagesSetBotCallbackAnswer, opts ...grpc.CallOption) (*Bool, error)
	// messages.getPeerDialogs#2d9776b9 peers:Vector<InputPeer> = messages.PeerDialogs;
	MessagesGetPeerDialogs(ctx context.Context, in *TLMessagesGetPeerDialogs, opts ...grpc.CallOption) (*Messages_PeerDialogs, error)
	// messages.saveDraft#bc39e14b flags:# no_webpage:flags.1?true reply_to_msg_id:flags.0?int peer:InputPeer message:string entities:flags.3?Vector<MessageEntity> = Bool;
	MessagesSaveDraft(ctx context.Context, in *TLMessagesSaveDraft, opts ...grpc.CallOption) (*Bool, error)
	// messages.getAllDrafts#6a3f8d65 = Updates;
	MessagesGetAllDrafts(ctx context.Context, in *TLMessagesGetAllDrafts, opts ...grpc.CallOption) (*Updates, error)
	// messages.getFeaturedStickers#2dacca4f hash:int = messages.FeaturedStickers;
	MessagesGetFeaturedStickers(ctx context.Context, in *TLMessagesGetFeaturedStickers, opts ...grpc.CallOption) (*Messages_FeaturedStickers, error)
	// messages.readFeaturedStickers#5b118126 id:Vector<long> = Bool;
	MessagesReadFeaturedStickers(ctx context.Context, in *TLMessagesReadFeaturedStickers, opts ...grpc.CallOption) (*Bool, error)
	// messages.getRecentStickers#5ea192c9 flags:# attached:flags.0?true hash:int = messages.RecentStickers;
	MessagesGetRecentStickers(ctx context.Context, in *TLMessagesGetRecentStickers, opts ...grpc.CallOption) (*Messages_RecentStickers, error)
	// messages.saveRecentSticker#392718f8 flags:# attached:flags.0?true id:InputDocument unsave:Bool = Bool;
	MessagesSaveRecentSticker(ctx context.Context, in *TLMessagesSaveRecentSticker, opts ...grpc.CallOption) (*Bool, error)
	// messages.clearRecentStickers#8999602d flags:# attached:flags.0?true = Bool;
	MessagesClearRecentStickers(ctx context.Context, in *TLMessagesClearRecentStickers, opts ...grpc.CallOption) (*Bool, error)
	// messages.getArchivedStickers#57f17692 flags:# masks:flags.0?true offset_id:long limit:int = messages.ArchivedStickers;
	MessagesGetArchivedStickers(ctx context.Context, in *TLMessagesGetArchivedStickers, opts ...grpc.CallOption) (*Messages_ArchivedStickers, error)
	// messages.getMaskStickers#65b8c79f hash:int = messages.AllStickers;
	MessagesGetMaskStickers(ctx context.Context, in *TLMessagesGetMaskStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error)
	// messages.getAttachedStickers#cc5b67cc media:InputStickeredMedia = Vector<StickerSetCovered>;
	MessagesGetAttachedStickers(ctx context.Context, in *TLMessagesGetAttachedStickers, opts ...grpc.CallOption) (*Vector_StickerSetCovered, error)
	// messages.setGameScore#8ef8ecc0 flags:# edit_message:flags.0?true force:flags.1?true peer:InputPeer id:int user_id:InputUser score:int = Updates;
	MessagesSetGameScore(ctx context.Context, in *TLMessagesSetGameScore, opts ...grpc.CallOption) (*Updates, error)
	// messages.setInlineGameScore#15ad9f64 flags:# edit_message:flags.0?true force:flags.1?true id:InputBotInlineMessageID user_id:InputUser score:int = Bool;
	MessagesSetInlineGameScore(ctx context.Context, in *TLMessagesSetInlineGameScore, opts ...grpc.CallOption) (*Bool, error)
	// messages.getGameHighScores#e822649d peer:InputPeer id:int user_id:InputUser = messages.HighScores;
	MessagesGetGameHighScores(ctx context.Context, in *TLMessagesGetGameHighScores, opts ...grpc.CallOption) (*Messages_HighScores, error)
	// messages.getInlineGameHighScores#f635e1b id:InputBotInlineMessageID user_id:InputUser = messages.HighScores;
	MessagesGetInlineGameHighScores(ctx context.Context, in *TLMessagesGetInlineGameHighScores, opts ...grpc.CallOption) (*Messages_HighScores, error)
	// messages.getCommonChats#d0a48c4 user_id:InputUser max_id:int limit:int = messages.Chats;
	MessagesGetCommonChats(ctx context.Context, in *TLMessagesGetCommonChats, opts ...grpc.CallOption) (*Messages_Chats, error)
	// messages.getAllChats#eba80ff0 except_ids:Vector<int> = messages.Chats;
	MessagesGetAllChats(ctx context.Context, in *TLMessagesGetAllChats, opts ...grpc.CallOption) (*Messages_Chats, error)
	// messages.getWebPage#32ca8f91 url:string hash:int = WebPage;
	MessagesGetWebPage(ctx context.Context, in *TLMessagesGetWebPage, opts ...grpc.CallOption) (*WebPage, error)
	// messages.toggleDialogPin#3289be6a flags:# pinned:flags.0?true peer:InputPeer = Bool;
	MessagesToggleDialogPin(ctx context.Context, in *TLMessagesToggleDialogPin, opts ...grpc.CallOption) (*Bool, error)
	// messages.reorderPinnedDialogs#959ff644 flags:# force:flags.0?true order:Vector<InputPeer> = Bool;
	MessagesReorderPinnedDialogs(ctx context.Context, in *TLMessagesReorderPinnedDialogs, opts ...grpc.CallOption) (*Bool, error)
	// messages.getPinnedDialogs#e254d64e = messages.PeerDialogs;
	MessagesGetPinnedDialogs(ctx context.Context, in *TLMessagesGetPinnedDialogs, opts ...grpc.CallOption) (*Messages_PeerDialogs, error)
	// messages.setBotShippingResults#e5f672fa flags:# query_id:long error:flags.0?string shipping_options:flags.1?Vector<ShippingOption> = Bool;
	MessagesSetBotShippingResults(ctx context.Context, in *TLMessagesSetBotShippingResults, opts ...grpc.CallOption) (*Bool, error)
	// messages.setBotPrecheckoutResults#9c2dd95 flags:# success:flags.1?true query_id:long error:flags.0?string = Bool;
	MessagesSetBotPrecheckoutResults(ctx context.Context, in *TLMessagesSetBotPrecheckoutResults, opts ...grpc.CallOption) (*Bool, error)
	// messages.uploadMedia#519bc2b1 peer:InputPeer media:InputMedia = MessageMedia;
	MessagesUploadMedia(ctx context.Context, in *TLMessagesUploadMedia, opts ...grpc.CallOption) (*MessageMedia, error)
	// messages.sendScreenshotNotification#c97df020 peer:InputPeer reply_to_msg_id:int random_id:long = Updates;
	MessagesSendScreenshotNotification(ctx context.Context, in *TLMessagesSendScreenshotNotification, opts ...grpc.CallOption) (*Updates, error)
	// messages.getFavedStickers#21ce0b0e hash:int = messages.FavedStickers;
	MessagesGetFavedStickers(ctx context.Context, in *TLMessagesGetFavedStickers, opts ...grpc.CallOption) (*Messages_FavedStickers, error)
	// messages.faveSticker#b9ffc55b id:InputDocument unfave:Bool = Bool;
	MessagesFaveSticker(ctx context.Context, in *TLMessagesFaveSticker, opts ...grpc.CallOption) (*Bool, error)
	// messages.getUnreadMentions#46578472 peer:InputPeer offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	MessagesGetUnreadMentions(ctx context.Context, in *TLMessagesGetUnreadMentions, opts ...grpc.CallOption) (*Messages_Messages, error)
}

type rPCmessagesClient struct {
	cc *grpc.ClientConn
}

func NewRPCmessagesClient(cc *grpc.ClientConn) RPCmessagesClient {
	return &rPCmessagesClient{cc}
}

func (c *rPCmessagesClient) MessagesGetMessages(ctx context.Context, in *TLMessagesGetMessages, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetDialogs(ctx context.Context, in *TLMessagesGetDialogs, opts ...grpc.CallOption) (*Messages_Dialogs, error) {
	out := new(Messages_Dialogs)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getDialogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetHistory(ctx context.Context, in *TLMessagesGetHistory, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesSearch(ctx context.Context, in *TLMessagesSearch, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesReadHistory(ctx context.Context, in *TLMessagesReadHistory, opts ...grpc.CallOption) (*Messages_AffectedMessages, error) {
	out := new(Messages_AffectedMessages)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_readHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesDeleteHistory(ctx context.Context, in *TLMessagesDeleteHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error) {
	out := new(Messages_AffectedHistory)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_deleteHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesDeleteMessages(ctx context.Context, in *TLMessagesDeleteMessages, opts ...grpc.CallOption) (*Messages_AffectedMessages, error) {
	out := new(Messages_AffectedMessages)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_deleteMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesReceivedMessages(ctx context.Context, in *TLMessagesReceivedMessages, opts ...grpc.CallOption) (*Vector_ReceivedNotifyMessage, error) {
	out := new(Vector_ReceivedNotifyMessage)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_receivedMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesSetTyping(ctx context.Context, in *TLMessagesSetTyping, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_setTyping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesSendMessage(ctx context.Context, in *TLMessagesSendMessage, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_sendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesSendMedia(ctx context.Context, in *TLMessagesSendMedia, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_sendMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesForwardMessages(ctx context.Context, in *TLMessagesForwardMessages, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_forwardMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesReportSpam(ctx context.Context, in *TLMessagesReportSpam, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_reportSpam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesHideReportSpam(ctx context.Context, in *TLMessagesHideReportSpam, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_hideReportSpam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetPeerSettings(ctx context.Context, in *TLMessagesGetPeerSettings, opts ...grpc.CallOption) (*PeerSettings, error) {
	out := new(PeerSettings)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getPeerSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetChats(ctx context.Context, in *TLMessagesGetChats, opts ...grpc.CallOption) (*Messages_Chats, error) {
	out := new(Messages_Chats)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getChats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetFullChat(ctx context.Context, in *TLMessagesGetFullChat, opts ...grpc.CallOption) (*Messages_ChatFull, error) {
	out := new(Messages_ChatFull)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getFullChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesEditChatTitle(ctx context.Context, in *TLMessagesEditChatTitle, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_editChatTitle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesEditChatPhoto(ctx context.Context, in *TLMessagesEditChatPhoto, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_editChatPhoto", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesAddChatUser(ctx context.Context, in *TLMessagesAddChatUser, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_addChatUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesDeleteChatUser(ctx context.Context, in *TLMessagesDeleteChatUser, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_deleteChatUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesCreateChat(ctx context.Context, in *TLMessagesCreateChat, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_createChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesForwardMessage(ctx context.Context, in *TLMessagesForwardMessage, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_forwardMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetDhConfig(ctx context.Context, in *TLMessagesGetDhConfig, opts ...grpc.CallOption) (*Messages_DhConfig, error) {
	out := new(Messages_DhConfig)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getDhConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesRequestEncryption(ctx context.Context, in *TLMessagesRequestEncryption, opts ...grpc.CallOption) (*EncryptedChat, error) {
	out := new(EncryptedChat)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_requestEncryption", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesAcceptEncryption(ctx context.Context, in *TLMessagesAcceptEncryption, opts ...grpc.CallOption) (*EncryptedChat, error) {
	out := new(EncryptedChat)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_acceptEncryption", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesDiscardEncryption(ctx context.Context, in *TLMessagesDiscardEncryption, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_discardEncryption", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesSetEncryptedTyping(ctx context.Context, in *TLMessagesSetEncryptedTyping, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_setEncryptedTyping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesReadEncryptedHistory(ctx context.Context, in *TLMessagesReadEncryptedHistory, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_readEncryptedHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesSendEncrypted(ctx context.Context, in *TLMessagesSendEncrypted, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error) {
	out := new(Messages_SentEncryptedMessage)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_sendEncrypted", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesSendEncryptedFile(ctx context.Context, in *TLMessagesSendEncryptedFile, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error) {
	out := new(Messages_SentEncryptedMessage)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_sendEncryptedFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesSendEncryptedService(ctx context.Context, in *TLMessagesSendEncryptedService, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error) {
	out := new(Messages_SentEncryptedMessage)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_sendEncryptedService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesReceivedQueue(ctx context.Context, in *TLMessagesReceivedQueue, opts ...grpc.CallOption) (*VectorLong, error) {
	out := new(VectorLong)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_receivedQueue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesReportEncryptedSpam(ctx context.Context, in *TLMessagesReportEncryptedSpam, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_reportEncryptedSpam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesReadMessageContents(ctx context.Context, in *TLMessagesReadMessageContents, opts ...grpc.CallOption) (*Messages_AffectedMessages, error) {
	out := new(Messages_AffectedMessages)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_readMessageContents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetAllStickers(ctx context.Context, in *TLMessagesGetAllStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error) {
	out := new(Messages_AllStickers)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getAllStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetWebPagePreview(ctx context.Context, in *TLMessagesGetWebPagePreview, opts ...grpc.CallOption) (*MessageMedia, error) {
	out := new(MessageMedia)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getWebPagePreview", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesExportChatInvite(ctx context.Context, in *TLMessagesExportChatInvite, opts ...grpc.CallOption) (*ExportedChatInvite, error) {
	out := new(ExportedChatInvite)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_exportChatInvite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesCheckChatInvite(ctx context.Context, in *TLMessagesCheckChatInvite, opts ...grpc.CallOption) (*ChatInvite, error) {
	out := new(ChatInvite)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_checkChatInvite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesImportChatInvite(ctx context.Context, in *TLMessagesImportChatInvite, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_importChatInvite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetStickerSet(ctx context.Context, in *TLMessagesGetStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	out := new(Messages_StickerSet)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesInstallStickerSet(ctx context.Context, in *TLMessagesInstallStickerSet, opts ...grpc.CallOption) (*Messages_StickerSetInstallResult, error) {
	out := new(Messages_StickerSetInstallResult)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_installStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesUninstallStickerSet(ctx context.Context, in *TLMessagesUninstallStickerSet, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_uninstallStickerSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesStartBot(ctx context.Context, in *TLMessagesStartBot, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_startBot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetMessagesViews(ctx context.Context, in *TLMessagesGetMessagesViews, opts ...grpc.CallOption) (*VectorInt, error) {
	out := new(VectorInt)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getMessagesViews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesToggleChatAdmins(ctx context.Context, in *TLMessagesToggleChatAdmins, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_toggleChatAdmins", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesEditChatAdmin(ctx context.Context, in *TLMessagesEditChatAdmin, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_editChatAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesMigrateChat(ctx context.Context, in *TLMessagesMigrateChat, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_migrateChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesSearchGlobal(ctx context.Context, in *TLMessagesSearchGlobal, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_searchGlobal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesReorderStickerSets(ctx context.Context, in *TLMessagesReorderStickerSets, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_reorderStickerSets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetDocumentByHash(ctx context.Context, in *TLMessagesGetDocumentByHash, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getDocumentByHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesSearchGifs(ctx context.Context, in *TLMessagesSearchGifs, opts ...grpc.CallOption) (*Messages_FoundGifs, error) {
	out := new(Messages_FoundGifs)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_searchGifs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetSavedGifs(ctx context.Context, in *TLMessagesGetSavedGifs, opts ...grpc.CallOption) (*Messages_SavedGifs, error) {
	out := new(Messages_SavedGifs)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getSavedGifs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesSaveGif(ctx context.Context, in *TLMessagesSaveGif, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_saveGif", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetInlineBotResults(ctx context.Context, in *TLMessagesGetInlineBotResults, opts ...grpc.CallOption) (*Messages_BotResults, error) {
	out := new(Messages_BotResults)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getInlineBotResults", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesSetInlineBotResults(ctx context.Context, in *TLMessagesSetInlineBotResults, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_setInlineBotResults", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesSendInlineBotResult(ctx context.Context, in *TLMessagesSendInlineBotResult, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_sendInlineBotResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetMessageEditData(ctx context.Context, in *TLMessagesGetMessageEditData, opts ...grpc.CallOption) (*Messages_MessageEditData, error) {
	out := new(Messages_MessageEditData)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getMessageEditData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesEditMessage(ctx context.Context, in *TLMessagesEditMessage, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_editMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesEditInlineBotMessage(ctx context.Context, in *TLMessagesEditInlineBotMessage, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_editInlineBotMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetBotCallbackAnswer(ctx context.Context, in *TLMessagesGetBotCallbackAnswer, opts ...grpc.CallOption) (*Messages_BotCallbackAnswer, error) {
	out := new(Messages_BotCallbackAnswer)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getBotCallbackAnswer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesSetBotCallbackAnswer(ctx context.Context, in *TLMessagesSetBotCallbackAnswer, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_setBotCallbackAnswer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetPeerDialogs(ctx context.Context, in *TLMessagesGetPeerDialogs, opts ...grpc.CallOption) (*Messages_PeerDialogs, error) {
	out := new(Messages_PeerDialogs)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getPeerDialogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesSaveDraft(ctx context.Context, in *TLMessagesSaveDraft, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_saveDraft", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetAllDrafts(ctx context.Context, in *TLMessagesGetAllDrafts, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getAllDrafts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetFeaturedStickers(ctx context.Context, in *TLMessagesGetFeaturedStickers, opts ...grpc.CallOption) (*Messages_FeaturedStickers, error) {
	out := new(Messages_FeaturedStickers)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getFeaturedStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesReadFeaturedStickers(ctx context.Context, in *TLMessagesReadFeaturedStickers, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_readFeaturedStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetRecentStickers(ctx context.Context, in *TLMessagesGetRecentStickers, opts ...grpc.CallOption) (*Messages_RecentStickers, error) {
	out := new(Messages_RecentStickers)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getRecentStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesSaveRecentSticker(ctx context.Context, in *TLMessagesSaveRecentSticker, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_saveRecentSticker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesClearRecentStickers(ctx context.Context, in *TLMessagesClearRecentStickers, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_clearRecentStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetArchivedStickers(ctx context.Context, in *TLMessagesGetArchivedStickers, opts ...grpc.CallOption) (*Messages_ArchivedStickers, error) {
	out := new(Messages_ArchivedStickers)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getArchivedStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetMaskStickers(ctx context.Context, in *TLMessagesGetMaskStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error) {
	out := new(Messages_AllStickers)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getMaskStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetAttachedStickers(ctx context.Context, in *TLMessagesGetAttachedStickers, opts ...grpc.CallOption) (*Vector_StickerSetCovered, error) {
	out := new(Vector_StickerSetCovered)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getAttachedStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesSetGameScore(ctx context.Context, in *TLMessagesSetGameScore, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_setGameScore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesSetInlineGameScore(ctx context.Context, in *TLMessagesSetInlineGameScore, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_setInlineGameScore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetGameHighScores(ctx context.Context, in *TLMessagesGetGameHighScores, opts ...grpc.CallOption) (*Messages_HighScores, error) {
	out := new(Messages_HighScores)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getGameHighScores", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetInlineGameHighScores(ctx context.Context, in *TLMessagesGetInlineGameHighScores, opts ...grpc.CallOption) (*Messages_HighScores, error) {
	out := new(Messages_HighScores)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getInlineGameHighScores", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetCommonChats(ctx context.Context, in *TLMessagesGetCommonChats, opts ...grpc.CallOption) (*Messages_Chats, error) {
	out := new(Messages_Chats)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getCommonChats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetAllChats(ctx context.Context, in *TLMessagesGetAllChats, opts ...grpc.CallOption) (*Messages_Chats, error) {
	out := new(Messages_Chats)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getAllChats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetWebPage(ctx context.Context, in *TLMessagesGetWebPage, opts ...grpc.CallOption) (*WebPage, error) {
	out := new(WebPage)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getWebPage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesToggleDialogPin(ctx context.Context, in *TLMessagesToggleDialogPin, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_toggleDialogPin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesReorderPinnedDialogs(ctx context.Context, in *TLMessagesReorderPinnedDialogs, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_reorderPinnedDialogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetPinnedDialogs(ctx context.Context, in *TLMessagesGetPinnedDialogs, opts ...grpc.CallOption) (*Messages_PeerDialogs, error) {
	out := new(Messages_PeerDialogs)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getPinnedDialogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesSetBotShippingResults(ctx context.Context, in *TLMessagesSetBotShippingResults, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_setBotShippingResults", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesSetBotPrecheckoutResults(ctx context.Context, in *TLMessagesSetBotPrecheckoutResults, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_setBotPrecheckoutResults", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesUploadMedia(ctx context.Context, in *TLMessagesUploadMedia, opts ...grpc.CallOption) (*MessageMedia, error) {
	out := new(MessageMedia)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_uploadMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesSendScreenshotNotification(ctx context.Context, in *TLMessagesSendScreenshotNotification, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_sendScreenshotNotification", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetFavedStickers(ctx context.Context, in *TLMessagesGetFavedStickers, opts ...grpc.CallOption) (*Messages_FavedStickers, error) {
	out := new(Messages_FavedStickers)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getFavedStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesFaveSticker(ctx context.Context, in *TLMessagesFaveSticker, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_faveSticker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCmessagesClient) MessagesGetUnreadMentions(ctx context.Context, in *TLMessagesGetUnreadMentions, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := grpc.Invoke(ctx, "/mtproto.RPCmessages/messages_getUnreadMentions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCmessages service

type RPCmessagesServer interface {
	// messages.getMessages#4222fa74 id:Vector<int> = messages.Messages;
	MessagesGetMessages(context.Context, *TLMessagesGetMessages) (*Messages_Messages, error)
	// messages.getDialogs#191ba9c5 flags:# exclude_pinned:flags.0?true offset_date:int offset_id:int offset_peer:InputPeer limit:int = messages.Dialogs;
	MessagesGetDialogs(context.Context, *TLMessagesGetDialogs) (*Messages_Dialogs, error)
	// messages.getHistory#afa92846 peer:InputPeer offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	MessagesGetHistory(context.Context, *TLMessagesGetHistory) (*Messages_Messages, error)
	// messages.search#39e9ea0 flags:# peer:InputPeer q:string from_id:flags.0?InputUser filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	MessagesSearch(context.Context, *TLMessagesSearch) (*Messages_Messages, error)
	// messages.readHistory#e306d3a peer:InputPeer max_id:int = messages.AffectedMessages;
	MessagesReadHistory(context.Context, *TLMessagesReadHistory) (*Messages_AffectedMessages, error)
	// messages.deleteHistory#1c015b09 flags:# just_clear:flags.0?true peer:InputPeer max_id:int = messages.AffectedHistory;
	MessagesDeleteHistory(context.Context, *TLMessagesDeleteHistory) (*Messages_AffectedHistory, error)
	// messages.deleteMessages#e58e95d2 flags:# revoke:flags.0?true id:Vector<int> = messages.AffectedMessages;
	MessagesDeleteMessages(context.Context, *TLMessagesDeleteMessages) (*Messages_AffectedMessages, error)
	// messages.receivedMessages#5a954c0 max_id:int = Vector<ReceivedNotifyMessage>;
	MessagesReceivedMessages(context.Context, *TLMessagesReceivedMessages) (*Vector_ReceivedNotifyMessage, error)
	// messages.setTyping#a3825e50 peer:InputPeer action:SendMessageAction = Bool;
	MessagesSetTyping(context.Context, *TLMessagesSetTyping) (*Bool, error)
	// messages.sendMessage#fa88427a flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	MessagesSendMessage(context.Context, *TLMessagesSendMessage) (*Updates, error)
	// messages.sendMedia#c8f16791 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int media:InputMedia random_id:long reply_markup:flags.2?ReplyMarkup = Updates;
	MessagesSendMedia(context.Context, *TLMessagesSendMedia) (*Updates, error)
	// messages.forwardMessages#708e0195 flags:# silent:flags.5?true background:flags.6?true with_my_score:flags.8?true from_peer:InputPeer id:Vector<int> random_id:Vector<long> to_peer:InputPeer = Updates;
	MessagesForwardMessages(context.Context, *TLMessagesForwardMessages) (*Updates, error)
	// messages.reportSpam#cf1592db peer:InputPeer = Bool;
	MessagesReportSpam(context.Context, *TLMessagesReportSpam) (*Bool, error)
	// messages.hideReportSpam#a8f1709b peer:InputPeer = Bool;
	MessagesHideReportSpam(context.Context, *TLMessagesHideReportSpam) (*Bool, error)
	// messages.getPeerSettings#3672e09c peer:InputPeer = PeerSettings;
	MessagesGetPeerSettings(context.Context, *TLMessagesGetPeerSettings) (*PeerSettings, error)
	// messages.getChats#3c6aa187 id:Vector<int> = messages.Chats;
	MessagesGetChats(context.Context, *TLMessagesGetChats) (*Messages_Chats, error)
	// messages.getFullChat#3b831c66 chat_id:int = messages.ChatFull;
	MessagesGetFullChat(context.Context, *TLMessagesGetFullChat) (*Messages_ChatFull, error)
	// messages.editChatTitle#dc452855 chat_id:int title:string = Updates;
	MessagesEditChatTitle(context.Context, *TLMessagesEditChatTitle) (*Updates, error)
	// messages.editChatPhoto#ca4c79d8 chat_id:int photo:InputChatPhoto = Updates;
	MessagesEditChatPhoto(context.Context, *TLMessagesEditChatPhoto) (*Updates, error)
	// messages.addChatUser#f9a0aa09 chat_id:int user_id:InputUser fwd_limit:int = Updates;
	MessagesAddChatUser(context.Context, *TLMessagesAddChatUser) (*Updates, error)
	// messages.deleteChatUser#e0611f16 chat_id:int user_id:InputUser = Updates;
	MessagesDeleteChatUser(context.Context, *TLMessagesDeleteChatUser) (*Updates, error)
	// messages.createChat#9cb126e users:Vector<InputUser> title:string = Updates;
	MessagesCreateChat(context.Context, *TLMessagesCreateChat) (*Updates, error)
	// messages.forwardMessage#33963bf9 peer:InputPeer id:int random_id:long = Updates;
	MessagesForwardMessage(context.Context, *TLMessagesForwardMessage) (*Updates, error)
	// messages.getDhConfig#26cf8950 version:int random_length:int = messages.DhConfig;
	MessagesGetDhConfig(context.Context, *TLMessagesGetDhConfig) (*Messages_DhConfig, error)
	// messages.requestEncryption#f64daf43 user_id:InputUser random_id:int g_a:bytes = EncryptedChat;
	MessagesRequestEncryption(context.Context, *TLMessagesRequestEncryption) (*EncryptedChat, error)
	// messages.acceptEncryption#3dbc0415 peer:InputEncryptedChat g_b:bytes key_fingerprint:long = EncryptedChat;
	MessagesAcceptEncryption(context.Context, *TLMessagesAcceptEncryption) (*EncryptedChat, error)
	// messages.discardEncryption#edd923c5 chat_id:int = Bool;
	MessagesDiscardEncryption(context.Context, *TLMessagesDiscardEncryption) (*Bool, error)
	// messages.setEncryptedTyping#791451ed peer:InputEncryptedChat typing:Bool = Bool;
	MessagesSetEncryptedTyping(context.Context, *TLMessagesSetEncryptedTyping) (*Bool, error)
	// messages.readEncryptedHistory#7f4b690a peer:InputEncryptedChat max_date:int = Bool;
	MessagesReadEncryptedHistory(context.Context, *TLMessagesReadEncryptedHistory) (*Bool, error)
	// messages.sendEncrypted#a9776773 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
	MessagesSendEncrypted(context.Context, *TLMessagesSendEncrypted) (*Messages_SentEncryptedMessage, error)
	// messages.sendEncryptedFile#9a901b66 peer:InputEncryptedChat random_id:long data:bytes file:InputEncryptedFile = messages.SentEncryptedMessage;
	MessagesSendEncryptedFile(context.Context, *TLMessagesSendEncryptedFile) (*Messages_SentEncryptedMessage, error)
	// messages.sendEncryptedService#32d439a4 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
	MessagesSendEncryptedService(context.Context, *TLMessagesSendEncryptedService) (*Messages_SentEncryptedMessage, error)
	// messages.receivedQueue#55a5bb66 max_qts:int = Vector<long>;
	MessagesReceivedQueue(context.Context, *TLMessagesReceivedQueue) (*VectorLong, error)
	// messages.reportEncryptedSpam#4b0c8c0f peer:InputEncryptedChat = Bool;
	MessagesReportEncryptedSpam(context.Context, *TLMessagesReportEncryptedSpam) (*Bool, error)
	// messages.readMessageContents#36a73f77 id:Vector<int> = messages.AffectedMessages;
	MessagesReadMessageContents(context.Context, *TLMessagesReadMessageContents) (*Messages_AffectedMessages, error)
	// messages.getAllStickers#1c9618b1 hash:int = messages.AllStickers;
	MessagesGetAllStickers(context.Context, *TLMessagesGetAllStickers) (*Messages_AllStickers, error)
	// messages.getWebPagePreview#25223e24 message:string = MessageMedia;
	MessagesGetWebPagePreview(context.Context, *TLMessagesGetWebPagePreview) (*MessageMedia, error)
	// messages.exportChatInvite#7d885289 chat_id:int = ExportedChatInvite;
	MessagesExportChatInvite(context.Context, *TLMessagesExportChatInvite) (*ExportedChatInvite, error)
	// messages.checkChatInvite#3eadb1bb hash:string = ChatInvite;
	MessagesCheckChatInvite(context.Context, *TLMessagesCheckChatInvite) (*ChatInvite, error)
	// messages.importChatInvite#6c50051c hash:string = Updates;
	MessagesImportChatInvite(context.Context, *TLMessagesImportChatInvite) (*Updates, error)
	// messages.getStickerSet#2619a90e stickerset:InputStickerSet = messages.StickerSet;
	MessagesGetStickerSet(context.Context, *TLMessagesGetStickerSet) (*Messages_StickerSet, error)
	// messages.installStickerSet#c78fe460 stickerset:InputStickerSet archived:Bool = messages.StickerSetInstallResult;
	MessagesInstallStickerSet(context.Context, *TLMessagesInstallStickerSet) (*Messages_StickerSetInstallResult, error)
	// messages.uninstallStickerSet#f96e55de stickerset:InputStickerSet = Bool;
	MessagesUninstallStickerSet(context.Context, *TLMessagesUninstallStickerSet) (*Bool, error)
	// messages.startBot#e6df7378 bot:InputUser peer:InputPeer random_id:long start_param:string = Updates;
	MessagesStartBot(context.Context, *TLMessagesStartBot) (*Updates, error)
	// messages.getMessagesViews#c4c8a55d peer:InputPeer id:Vector<int> increment:Bool = Vector<int>;
	MessagesGetMessagesViews(context.Context, *TLMessagesGetMessagesViews) (*VectorInt, error)
	// messages.toggleChatAdmins#ec8bd9e1 chat_id:int enabled:Bool = Updates;
	MessagesToggleChatAdmins(context.Context, *TLMessagesToggleChatAdmins) (*Updates, error)
	// messages.editChatAdmin#a9e69f2e chat_id:int user_id:InputUser is_admin:Bool = Bool;
	MessagesEditChatAdmin(context.Context, *TLMessagesEditChatAdmin) (*Bool, error)
	// messages.migrateChat#15a3b8e3 chat_id:int = Updates;
	MessagesMigrateChat(context.Context, *TLMessagesMigrateChat) (*Updates, error)
	// messages.searchGlobal#9e3cacb0 q:string offset_date:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;
	MessagesSearchGlobal(context.Context, *TLMessagesSearchGlobal) (*Messages_Messages, error)
	// messages.reorderStickerSets#78337739 flags:# masks:flags.0?true order:Vector<long> = Bool;
	MessagesReorderStickerSets(context.Context, *TLMessagesReorderStickerSets) (*Bool, error)
	// messages.getDocumentByHash#338e2464 sha256:bytes size:int mime_type:string = Document;
	MessagesGetDocumentByHash(context.Context, *TLMessagesGetDocumentByHash) (*Document, error)
	// messages.searchGifs#bf9a776b q:string offset:int = messages.FoundGifs;
	MessagesSearchGifs(context.Context, *TLMessagesSearchGifs) (*Messages_FoundGifs, error)
	// messages.getSavedGifs#83bf3d52 hash:int = messages.SavedGifs;
	MessagesGetSavedGifs(context.Context, *TLMessagesGetSavedGifs) (*Messages_SavedGifs, error)
	// messages.saveGif#327a30cb id:InputDocument unsave:Bool = Bool;
	MessagesSaveGif(context.Context, *TLMessagesSaveGif) (*Bool, error)
	// messages.getInlineBotResults#514e999d flags:# bot:InputUser peer:InputPeer geo_point:flags.0?InputGeoPoint query:string offset:string = messages.BotResults;
	MessagesGetInlineBotResults(context.Context, *TLMessagesGetInlineBotResults) (*Messages_BotResults, error)
	// messages.setInlineBotResults#eb5ea206 flags:# gallery:flags.0?true private:flags.1?true query_id:long results:Vector<InputBotInlineResult> cache_time:int next_offset:flags.2?string switch_pm:flags.3?InlineBotSwitchPM = Bool;
	MessagesSetInlineBotResults(context.Context, *TLMessagesSetInlineBotResults) (*Bool, error)
	// messages.sendInlineBotResult#b16e06fe flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int random_id:long query_id:long id:string = Updates;
	MessagesSendInlineBotResult(context.Context, *TLMessagesSendInlineBotResult) (*Updates, error)
	// messages.getMessageEditData#fda68d36 peer:InputPeer id:int = messages.MessageEditData;
	MessagesGetMessageEditData(context.Context, *TLMessagesGetMessageEditData) (*Messages_MessageEditData, error)
	// messages.editMessage#ce91e4ca flags:# no_webpage:flags.1?true peer:InputPeer id:int message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	MessagesEditMessage(context.Context, *TLMessagesEditMessage) (*Updates, error)
	// messages.editInlineBotMessage#130c2c85 flags:# no_webpage:flags.1?true id:InputBotInlineMessageID message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Bool;
	MessagesEditInlineBotMessage(context.Context, *TLMessagesEditInlineBotMessage) (*Bool, error)
	// messages.getBotCallbackAnswer#810a9fec flags:# game:flags.1?true peer:InputPeer msg_id:int data:flags.0?bytes = messages.BotCallbackAnswer;
	MessagesGetBotCallbackAnswer(context.Context, *TLMessagesGetBotCallbackAnswer) (*Messages_BotCallbackAnswer, error)
	// messages.setBotCallbackAnswer#d58f130a flags:# alert:flags.1?true query_id:long message:flags.0?string url:flags.2?string cache_time:int = Bool;
	MessagesSetBotCallbackAnswer(context.Context, *TLMessagesSetBotCallbackAnswer) (*Bool, error)
	// messages.getPeerDialogs#2d9776b9 peers:Vector<InputPeer> = messages.PeerDialogs;
	MessagesGetPeerDialogs(context.Context, *TLMessagesGetPeerDialogs) (*Messages_PeerDialogs, error)
	// messages.saveDraft#bc39e14b flags:# no_webpage:flags.1?true reply_to_msg_id:flags.0?int peer:InputPeer message:string entities:flags.3?Vector<MessageEntity> = Bool;
	MessagesSaveDraft(context.Context, *TLMessagesSaveDraft) (*Bool, error)
	// messages.getAllDrafts#6a3f8d65 = Updates;
	MessagesGetAllDrafts(context.Context, *TLMessagesGetAllDrafts) (*Updates, error)
	// messages.getFeaturedStickers#2dacca4f hash:int = messages.FeaturedStickers;
	MessagesGetFeaturedStickers(context.Context, *TLMessagesGetFeaturedStickers) (*Messages_FeaturedStickers, error)
	// messages.readFeaturedStickers#5b118126 id:Vector<long> = Bool;
	MessagesReadFeaturedStickers(context.Context, *TLMessagesReadFeaturedStickers) (*Bool, error)
	// messages.getRecentStickers#5ea192c9 flags:# attached:flags.0?true hash:int = messages.RecentStickers;
	MessagesGetRecentStickers(context.Context, *TLMessagesGetRecentStickers) (*Messages_RecentStickers, error)
	// messages.saveRecentSticker#392718f8 flags:# attached:flags.0?true id:InputDocument unsave:Bool = Bool;
	MessagesSaveRecentSticker(context.Context, *TLMessagesSaveRecentSticker) (*Bool, error)
	// messages.clearRecentStickers#8999602d flags:# attached:flags.0?true = Bool;
	MessagesClearRecentStickers(context.Context, *TLMessagesClearRecentStickers) (*Bool, error)
	// messages.getArchivedStickers#57f17692 flags:# masks:flags.0?true offset_id:long limit:int = messages.ArchivedStickers;
	MessagesGetArchivedStickers(context.Context, *TLMessagesGetArchivedStickers) (*Messages_ArchivedStickers, error)
	// messages.getMaskStickers#65b8c79f hash:int = messages.AllStickers;
	MessagesGetMaskStickers(context.Context, *TLMessagesGetMaskStickers) (*Messages_AllStickers, error)
	// messages.getAttachedStickers#cc5b67cc media:InputStickeredMedia = Vector<StickerSetCovered>;
	MessagesGetAttachedStickers(context.Context, *TLMessagesGetAttachedStickers) (*Vector_StickerSetCovered, error)
	// messages.setGameScore#8ef8ecc0 flags:# edit_message:flags.0?true force:flags.1?true peer:InputPeer id:int user_id:InputUser score:int = Updates;
	MessagesSetGameScore(context.Context, *TLMessagesSetGameScore) (*Updates, error)
	// messages.setInlineGameScore#15ad9f64 flags:# edit_message:flags.0?true force:flags.1?true id:InputBotInlineMessageID user_id:InputUser score:int = Bool;
	MessagesSetInlineGameScore(context.Context, *TLMessagesSetInlineGameScore) (*Bool, error)
	// messages.getGameHighScores#e822649d peer:InputPeer id:int user_id:InputUser = messages.HighScores;
	MessagesGetGameHighScores(context.Context, *TLMessagesGetGameHighScores) (*Messages_HighScores, error)
	// messages.getInlineGameHighScores#f635e1b id:InputBotInlineMessageID user_id:InputUser = messages.HighScores;
	MessagesGetInlineGameHighScores(context.Context, *TLMessagesGetInlineGameHighScores) (*Messages_HighScores, error)
	// messages.getCommonChats#d0a48c4 user_id:InputUser max_id:int limit:int = messages.Chats;
	MessagesGetCommonChats(context.Context, *TLMessagesGetCommonChats) (*Messages_Chats, error)
	// messages.getAllChats#eba80ff0 except_ids:Vector<int> = messages.Chats;
	MessagesGetAllChats(context.Context, *TLMessagesGetAllChats) (*Messages_Chats, error)
	// messages.getWebPage#32ca8f91 url:string hash:int = WebPage;
	MessagesGetWebPage(context.Context, *TLMessagesGetWebPage) (*WebPage, error)
	// messages.toggleDialogPin#3289be6a flags:# pinned:flags.0?true peer:InputPeer = Bool;
	MessagesToggleDialogPin(context.Context, *TLMessagesToggleDialogPin) (*Bool, error)
	// messages.reorderPinnedDialogs#959ff644 flags:# force:flags.0?true order:Vector<InputPeer> = Bool;
	MessagesReorderPinnedDialogs(context.Context, *TLMessagesReorderPinnedDialogs) (*Bool, error)
	// messages.getPinnedDialogs#e254d64e = messages.PeerDialogs;
	MessagesGetPinnedDialogs(context.Context, *TLMessagesGetPinnedDialogs) (*Messages_PeerDialogs, error)
	// messages.setBotShippingResults#e5f672fa flags:# query_id:long error:flags.0?string shipping_options:flags.1?Vector<ShippingOption> = Bool;
	MessagesSetBotShippingResults(context.Context, *TLMessagesSetBotShippingResults) (*Bool, error)
	// messages.setBotPrecheckoutResults#9c2dd95 flags:# success:flags.1?true query_id:long error:flags.0?string = Bool;
	MessagesSetBotPrecheckoutResults(context.Context, *TLMessagesSetBotPrecheckoutResults) (*Bool, error)
	// messages.uploadMedia#519bc2b1 peer:InputPeer media:InputMedia = MessageMedia;
	MessagesUploadMedia(context.Context, *TLMessagesUploadMedia) (*MessageMedia, error)
	// messages.sendScreenshotNotification#c97df020 peer:InputPeer reply_to_msg_id:int random_id:long = Updates;
	MessagesSendScreenshotNotification(context.Context, *TLMessagesSendScreenshotNotification) (*Updates, error)
	// messages.getFavedStickers#21ce0b0e hash:int = messages.FavedStickers;
	MessagesGetFavedStickers(context.Context, *TLMessagesGetFavedStickers) (*Messages_FavedStickers, error)
	// messages.faveSticker#b9ffc55b id:InputDocument unfave:Bool = Bool;
	MessagesFaveSticker(context.Context, *TLMessagesFaveSticker) (*Bool, error)
	// messages.getUnreadMentions#46578472 peer:InputPeer offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	MessagesGetUnreadMentions(context.Context, *TLMessagesGetUnreadMentions) (*Messages_Messages, error)
}

func RegisterRPCmessagesServer(s *grpc.Server, srv RPCmessagesServer) {
	s.RegisterService(&_RPCmessages_serviceDesc, srv)
}

func _RPCmessages_MessagesGetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetMessages(ctx, req.(*TLMessagesGetMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetDialogs(ctx, req.(*TLMessagesGetDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetHistory(ctx, req.(*TLMessagesGetHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesSearch(ctx, req.(*TLMessagesSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesReadHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesReadHistory(ctx, req.(*TLMessagesReadHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesDeleteHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesDeleteHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesDeleteHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesDeleteHistory(ctx, req.(*TLMessagesDeleteHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesDeleteMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesDeleteMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesDeleteMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesDeleteMessages(ctx, req.(*TLMessagesDeleteMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesReceivedMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReceivedMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesReceivedMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesReceivedMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesReceivedMessages(ctx, req.(*TLMessagesReceivedMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesSetTyping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetTyping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesSetTyping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesSetTyping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesSetTyping(ctx, req.(*TLMessagesSetTyping))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesSendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesSendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesSendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesSendMessage(ctx, req.(*TLMessagesSendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesSendMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesSendMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesSendMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesSendMedia(ctx, req.(*TLMessagesSendMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesForwardMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesForwardMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesForwardMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesForwardMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesForwardMessages(ctx, req.(*TLMessagesForwardMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesReportSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReportSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesReportSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesReportSpam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesReportSpam(ctx, req.(*TLMessagesReportSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesHideReportSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesHideReportSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesHideReportSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesHideReportSpam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesHideReportSpam(ctx, req.(*TLMessagesHideReportSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetPeerSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPeerSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetPeerSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetPeerSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetPeerSettings(ctx, req.(*TLMessagesGetPeerSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetChats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetChats(ctx, req.(*TLMessagesGetChats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetFullChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetFullChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetFullChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetFullChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetFullChat(ctx, req.(*TLMessagesGetFullChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesEditChatTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditChatTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesEditChatTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesEditChatTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesEditChatTitle(ctx, req.(*TLMessagesEditChatTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesEditChatPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditChatPhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesEditChatPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesEditChatPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesEditChatPhoto(ctx, req.(*TLMessagesEditChatPhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesAddChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesAddChatUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesAddChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesAddChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesAddChatUser(ctx, req.(*TLMessagesAddChatUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesDeleteChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteChatUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesDeleteChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesDeleteChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesDeleteChatUser(ctx, req.(*TLMessagesDeleteChatUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesCreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesCreateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesCreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesCreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesCreateChat(ctx, req.(*TLMessagesCreateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesForwardMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesForwardMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesForwardMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesForwardMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesForwardMessage(ctx, req.(*TLMessagesForwardMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetDhConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDhConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetDhConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetDhConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetDhConfig(ctx, req.(*TLMessagesGetDhConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesRequestEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesRequestEncryption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesRequestEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesRequestEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesRequestEncryption(ctx, req.(*TLMessagesRequestEncryption))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesAcceptEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesAcceptEncryption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesAcceptEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesAcceptEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesAcceptEncryption(ctx, req.(*TLMessagesAcceptEncryption))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesDiscardEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDiscardEncryption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesDiscardEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesDiscardEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesDiscardEncryption(ctx, req.(*TLMessagesDiscardEncryption))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesSetEncryptedTyping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetEncryptedTyping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesSetEncryptedTyping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesSetEncryptedTyping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesSetEncryptedTyping(ctx, req.(*TLMessagesSetEncryptedTyping))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesReadEncryptedHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadEncryptedHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesReadEncryptedHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesReadEncryptedHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesReadEncryptedHistory(ctx, req.(*TLMessagesReadEncryptedHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesSendEncrypted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendEncrypted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesSendEncrypted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesSendEncrypted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesSendEncrypted(ctx, req.(*TLMessagesSendEncrypted))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesSendEncryptedFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendEncryptedFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesSendEncryptedFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesSendEncryptedFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesSendEncryptedFile(ctx, req.(*TLMessagesSendEncryptedFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesSendEncryptedService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendEncryptedService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesSendEncryptedService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesSendEncryptedService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesSendEncryptedService(ctx, req.(*TLMessagesSendEncryptedService))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesReceivedQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReceivedQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesReceivedQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesReceivedQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesReceivedQueue(ctx, req.(*TLMessagesReceivedQueue))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesReportEncryptedSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReportEncryptedSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesReportEncryptedSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesReportEncryptedSpam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesReportEncryptedSpam(ctx, req.(*TLMessagesReportEncryptedSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesReadMessageContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadMessageContents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesReadMessageContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesReadMessageContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesReadMessageContents(ctx, req.(*TLMessagesReadMessageContents))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetAllStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAllStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetAllStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetAllStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetAllStickers(ctx, req.(*TLMessagesGetAllStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetWebPagePreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetWebPagePreview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetWebPagePreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetWebPagePreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetWebPagePreview(ctx, req.(*TLMessagesGetWebPagePreview))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesExportChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesExportChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesExportChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesExportChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesExportChatInvite(ctx, req.(*TLMessagesExportChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesCheckChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesCheckChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesCheckChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesCheckChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesCheckChatInvite(ctx, req.(*TLMessagesCheckChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesImportChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesImportChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesImportChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesImportChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesImportChatInvite(ctx, req.(*TLMessagesImportChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetStickerSet(ctx, req.(*TLMessagesGetStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesInstallStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesInstallStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesInstallStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesInstallStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesInstallStickerSet(ctx, req.(*TLMessagesInstallStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesUninstallStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUninstallStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesUninstallStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesUninstallStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesUninstallStickerSet(ctx, req.(*TLMessagesUninstallStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesStartBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesStartBot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesStartBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesStartBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesStartBot(ctx, req.(*TLMessagesStartBot))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetMessagesViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMessagesViews)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetMessagesViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetMessagesViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetMessagesViews(ctx, req.(*TLMessagesGetMessagesViews))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesToggleChatAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesToggleChatAdmins)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesToggleChatAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesToggleChatAdmins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesToggleChatAdmins(ctx, req.(*TLMessagesToggleChatAdmins))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesEditChatAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditChatAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesEditChatAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesEditChatAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesEditChatAdmin(ctx, req.(*TLMessagesEditChatAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesMigrateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesMigrateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesMigrateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesMigrateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesMigrateChat(ctx, req.(*TLMessagesMigrateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesSearchGlobal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearchGlobal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesSearchGlobal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesSearchGlobal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesSearchGlobal(ctx, req.(*TLMessagesSearchGlobal))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesReorderStickerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReorderStickerSets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesReorderStickerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesReorderStickerSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesReorderStickerSets(ctx, req.(*TLMessagesReorderStickerSets))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetDocumentByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDocumentByHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetDocumentByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetDocumentByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetDocumentByHash(ctx, req.(*TLMessagesGetDocumentByHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesSearchGifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearchGifs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesSearchGifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesSearchGifs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesSearchGifs(ctx, req.(*TLMessagesSearchGifs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetSavedGifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetSavedGifs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetSavedGifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetSavedGifs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetSavedGifs(ctx, req.(*TLMessagesGetSavedGifs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesSaveGif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSaveGif)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesSaveGif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesSaveGif",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesSaveGif(ctx, req.(*TLMessagesSaveGif))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetInlineBotResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetInlineBotResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetInlineBotResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetInlineBotResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetInlineBotResults(ctx, req.(*TLMessagesGetInlineBotResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesSetInlineBotResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetInlineBotResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesSetInlineBotResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesSetInlineBotResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesSetInlineBotResults(ctx, req.(*TLMessagesSetInlineBotResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesSendInlineBotResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendInlineBotResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesSendInlineBotResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesSendInlineBotResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesSendInlineBotResult(ctx, req.(*TLMessagesSendInlineBotResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetMessageEditData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMessageEditData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetMessageEditData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetMessageEditData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetMessageEditData(ctx, req.(*TLMessagesGetMessageEditData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesEditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesEditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesEditMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesEditMessage(ctx, req.(*TLMessagesEditMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesEditInlineBotMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditInlineBotMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesEditInlineBotMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesEditInlineBotMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesEditInlineBotMessage(ctx, req.(*TLMessagesEditInlineBotMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetBotCallbackAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetBotCallbackAnswer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetBotCallbackAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetBotCallbackAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetBotCallbackAnswer(ctx, req.(*TLMessagesGetBotCallbackAnswer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesSetBotCallbackAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetBotCallbackAnswer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesSetBotCallbackAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesSetBotCallbackAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesSetBotCallbackAnswer(ctx, req.(*TLMessagesSetBotCallbackAnswer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetPeerDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPeerDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetPeerDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetPeerDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetPeerDialogs(ctx, req.(*TLMessagesGetPeerDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesSaveDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSaveDraft)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesSaveDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesSaveDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesSaveDraft(ctx, req.(*TLMessagesSaveDraft))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetAllDrafts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAllDrafts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetAllDrafts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetAllDrafts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetAllDrafts(ctx, req.(*TLMessagesGetAllDrafts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetFeaturedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetFeaturedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetFeaturedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetFeaturedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetFeaturedStickers(ctx, req.(*TLMessagesGetFeaturedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesReadFeaturedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadFeaturedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesReadFeaturedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesReadFeaturedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesReadFeaturedStickers(ctx, req.(*TLMessagesReadFeaturedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetRecentStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetRecentStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetRecentStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetRecentStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetRecentStickers(ctx, req.(*TLMessagesGetRecentStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesSaveRecentSticker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSaveRecentSticker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesSaveRecentSticker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesSaveRecentSticker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesSaveRecentSticker(ctx, req.(*TLMessagesSaveRecentSticker))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesClearRecentStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesClearRecentStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesClearRecentStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesClearRecentStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesClearRecentStickers(ctx, req.(*TLMessagesClearRecentStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetArchivedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetArchivedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetArchivedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetArchivedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetArchivedStickers(ctx, req.(*TLMessagesGetArchivedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetMaskStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMaskStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetMaskStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetMaskStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetMaskStickers(ctx, req.(*TLMessagesGetMaskStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetAttachedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAttachedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetAttachedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetAttachedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetAttachedStickers(ctx, req.(*TLMessagesGetAttachedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesSetGameScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetGameScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesSetGameScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesSetGameScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesSetGameScore(ctx, req.(*TLMessagesSetGameScore))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesSetInlineGameScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetInlineGameScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesSetInlineGameScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesSetInlineGameScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesSetInlineGameScore(ctx, req.(*TLMessagesSetInlineGameScore))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetGameHighScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetGameHighScores)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetGameHighScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetGameHighScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetGameHighScores(ctx, req.(*TLMessagesGetGameHighScores))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetInlineGameHighScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetInlineGameHighScores)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetInlineGameHighScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetInlineGameHighScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetInlineGameHighScores(ctx, req.(*TLMessagesGetInlineGameHighScores))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetCommonChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetCommonChats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetCommonChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetCommonChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetCommonChats(ctx, req.(*TLMessagesGetCommonChats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetAllChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAllChats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetAllChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetAllChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetAllChats(ctx, req.(*TLMessagesGetAllChats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetWebPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetWebPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetWebPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetWebPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetWebPage(ctx, req.(*TLMessagesGetWebPage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesToggleDialogPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesToggleDialogPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesToggleDialogPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesToggleDialogPin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesToggleDialogPin(ctx, req.(*TLMessagesToggleDialogPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesReorderPinnedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReorderPinnedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesReorderPinnedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesReorderPinnedDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesReorderPinnedDialogs(ctx, req.(*TLMessagesReorderPinnedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetPinnedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPinnedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetPinnedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetPinnedDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetPinnedDialogs(ctx, req.(*TLMessagesGetPinnedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesSetBotShippingResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetBotShippingResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesSetBotShippingResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesSetBotShippingResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesSetBotShippingResults(ctx, req.(*TLMessagesSetBotShippingResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesSetBotPrecheckoutResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetBotPrecheckoutResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesSetBotPrecheckoutResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesSetBotPrecheckoutResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesSetBotPrecheckoutResults(ctx, req.(*TLMessagesSetBotPrecheckoutResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesUploadMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUploadMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesUploadMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesUploadMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesUploadMedia(ctx, req.(*TLMessagesUploadMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesSendScreenshotNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendScreenshotNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesSendScreenshotNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesSendScreenshotNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesSendScreenshotNotification(ctx, req.(*TLMessagesSendScreenshotNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetFavedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetFavedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetFavedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetFavedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetFavedStickers(ctx, req.(*TLMessagesGetFavedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesFaveSticker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesFaveSticker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesFaveSticker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesFaveSticker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesFaveSticker(ctx, req.(*TLMessagesFaveSticker))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCmessages_MessagesGetUnreadMentions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetUnreadMentions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCmessagesServer).MessagesGetUnreadMentions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCmessages/MessagesGetUnreadMentions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCmessagesServer).MessagesGetUnreadMentions(ctx, req.(*TLMessagesGetUnreadMentions))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCmessages_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCmessages",
	HandlerType: (*RPCmessagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getMessages",
			Handler:    _RPCmessages_MessagesGetMessages_Handler,
		},
		{
			MethodName: "messages_getDialogs",
			Handler:    _RPCmessages_MessagesGetDialogs_Handler,
		},
		{
			MethodName: "messages_getHistory",
			Handler:    _RPCmessages_MessagesGetHistory_Handler,
		},
		{
			MethodName: "messages_search",
			Handler:    _RPCmessages_MessagesSearch_Handler,
		},
		{
			MethodName: "messages_readHistory",
			Handler:    _RPCmessages_MessagesReadHistory_Handler,
		},
		{
			MethodName: "messages_deleteHistory",
			Handler:    _RPCmessages_MessagesDeleteHistory_Handler,
		},
		{
			MethodName: "messages_deleteMessages",
			Handler:    _RPCmessages_MessagesDeleteMessages_Handler,
		},
		{
			MethodName: "messages_receivedMessages",
			Handler:    _RPCmessages_MessagesReceivedMessages_Handler,
		},
		{
			MethodName: "messages_setTyping",
			Handler:    _RPCmessages_MessagesSetTyping_Handler,
		},
		{
			MethodName: "messages_sendMessage",
			Handler:    _RPCmessages_MessagesSendMessage_Handler,
		},
		{
			MethodName: "messages_sendMedia",
			Handler:    _RPCmessages_MessagesSendMedia_Handler,
		},
		{
			MethodName: "messages_forwardMessages",
			Handler:    _RPCmessages_MessagesForwardMessages_Handler,
		},
		{
			MethodName: "messages_reportSpam",
			Handler:    _RPCmessages_MessagesReportSpam_Handler,
		},
		{
			MethodName: "messages_hideReportSpam",
			Handler:    _RPCmessages_MessagesHideReportSpam_Handler,
		},
		{
			MethodName: "messages_getPeerSettings",
			Handler:    _RPCmessages_MessagesGetPeerSettings_Handler,
		},
		{
			MethodName: "messages_getChats",
			Handler:    _RPCmessages_MessagesGetChats_Handler,
		},
		{
			MethodName: "messages_getFullChat",
			Handler:    _RPCmessages_MessagesGetFullChat_Handler,
		},
		{
			MethodName: "messages_editChatTitle",
			Handler:    _RPCmessages_MessagesEditChatTitle_Handler,
		},
		{
			MethodName: "messages_editChatPhoto",
			Handler:    _RPCmessages_MessagesEditChatPhoto_Handler,
		},
		{
			MethodName: "messages_addChatUser",
			Handler:    _RPCmessages_MessagesAddChatUser_Handler,
		},
		{
			MethodName: "messages_deleteChatUser",
			Handler:    _RPCmessages_MessagesDeleteChatUser_Handler,
		},
		{
			MethodName: "messages_createChat",
			Handler:    _RPCmessages_MessagesCreateChat_Handler,
		},
		{
			MethodName: "messages_forwardMessage",
			Handler:    _RPCmessages_MessagesForwardMessage_Handler,
		},
		{
			MethodName: "messages_getDhConfig",
			Handler:    _RPCmessages_MessagesGetDhConfig_Handler,
		},
		{
			MethodName: "messages_requestEncryption",
			Handler:    _RPCmessages_MessagesRequestEncryption_Handler,
		},
		{
			MethodName: "messages_acceptEncryption",
			Handler:    _RPCmessages_MessagesAcceptEncryption_Handler,
		},
		{
			MethodName: "messages_discardEncryption",
			Handler:    _RPCmessages_MessagesDiscardEncryption_Handler,
		},
		{
			MethodName: "messages_setEncryptedTyping",
			Handler:    _RPCmessages_MessagesSetEncryptedTyping_Handler,
		},
		{
			MethodName: "messages_readEncryptedHistory",
			Handler:    _RPCmessages_MessagesReadEncryptedHistory_Handler,
		},
		{
			MethodName: "messages_sendEncrypted",
			Handler:    _RPCmessages_MessagesSendEncrypted_Handler,
		},
		{
			MethodName: "messages_sendEncryptedFile",
			Handler:    _RPCmessages_MessagesSendEncryptedFile_Handler,
		},
		{
			MethodName: "messages_sendEncryptedService",
			Handler:    _RPCmessages_MessagesSendEncryptedService_Handler,
		},
		{
			MethodName: "messages_receivedQueue",
			Handler:    _RPCmessages_MessagesReceivedQueue_Handler,
		},
		{
			MethodName: "messages_reportEncryptedSpam",
			Handler:    _RPCmessages_MessagesReportEncryptedSpam_Handler,
		},
		{
			MethodName: "messages_readMessageContents",
			Handler:    _RPCmessages_MessagesReadMessageContents_Handler,
		},
		{
			MethodName: "messages_getAllStickers",
			Handler:    _RPCmessages_MessagesGetAllStickers_Handler,
		},
		{
			MethodName: "messages_getWebPagePreview",
			Handler:    _RPCmessages_MessagesGetWebPagePreview_Handler,
		},
		{
			MethodName: "messages_exportChatInvite",
			Handler:    _RPCmessages_MessagesExportChatInvite_Handler,
		},
		{
			MethodName: "messages_checkChatInvite",
			Handler:    _RPCmessages_MessagesCheckChatInvite_Handler,
		},
		{
			MethodName: "messages_importChatInvite",
			Handler:    _RPCmessages_MessagesImportChatInvite_Handler,
		},
		{
			MethodName: "messages_getStickerSet",
			Handler:    _RPCmessages_MessagesGetStickerSet_Handler,
		},
		{
			MethodName: "messages_installStickerSet",
			Handler:    _RPCmessages_MessagesInstallStickerSet_Handler,
		},
		{
			MethodName: "messages_uninstallStickerSet",
			Handler:    _RPCmessages_MessagesUninstallStickerSet_Handler,
		},
		{
			MethodName: "messages_startBot",
			Handler:    _RPCmessages_MessagesStartBot_Handler,
		},
		{
			MethodName: "messages_getMessagesViews",
			Handler:    _RPCmessages_MessagesGetMessagesViews_Handler,
		},
		{
			MethodName: "messages_toggleChatAdmins",
			Handler:    _RPCmessages_MessagesToggleChatAdmins_Handler,
		},
		{
			MethodName: "messages_editChatAdmin",
			Handler:    _RPCmessages_MessagesEditChatAdmin_Handler,
		},
		{
			MethodName: "messages_migrateChat",
			Handler:    _RPCmessages_MessagesMigrateChat_Handler,
		},
		{
			MethodName: "messages_searchGlobal",
			Handler:    _RPCmessages_MessagesSearchGlobal_Handler,
		},
		{
			MethodName: "messages_reorderStickerSets",
			Handler:    _RPCmessages_MessagesReorderStickerSets_Handler,
		},
		{
			MethodName: "messages_getDocumentByHash",
			Handler:    _RPCmessages_MessagesGetDocumentByHash_Handler,
		},
		{
			MethodName: "messages_searchGifs",
			Handler:    _RPCmessages_MessagesSearchGifs_Handler,
		},
		{
			MethodName: "messages_getSavedGifs",
			Handler:    _RPCmessages_MessagesGetSavedGifs_Handler,
		},
		{
			MethodName: "messages_saveGif",
			Handler:    _RPCmessages_MessagesSaveGif_Handler,
		},
		{
			MethodName: "messages_getInlineBotResults",
			Handler:    _RPCmessages_MessagesGetInlineBotResults_Handler,
		},
		{
			MethodName: "messages_setInlineBotResults",
			Handler:    _RPCmessages_MessagesSetInlineBotResults_Handler,
		},
		{
			MethodName: "messages_sendInlineBotResult",
			Handler:    _RPCmessages_MessagesSendInlineBotResult_Handler,
		},
		{
			MethodName: "messages_getMessageEditData",
			Handler:    _RPCmessages_MessagesGetMessageEditData_Handler,
		},
		{
			MethodName: "messages_editMessage",
			Handler:    _RPCmessages_MessagesEditMessage_Handler,
		},
		{
			MethodName: "messages_editInlineBotMessage",
			Handler:    _RPCmessages_MessagesEditInlineBotMessage_Handler,
		},
		{
			MethodName: "messages_getBotCallbackAnswer",
			Handler:    _RPCmessages_MessagesGetBotCallbackAnswer_Handler,
		},
		{
			MethodName: "messages_setBotCallbackAnswer",
			Handler:    _RPCmessages_MessagesSetBotCallbackAnswer_Handler,
		},
		{
			MethodName: "messages_getPeerDialogs",
			Handler:    _RPCmessages_MessagesGetPeerDialogs_Handler,
		},
		{
			MethodName: "messages_saveDraft",
			Handler:    _RPCmessages_MessagesSaveDraft_Handler,
		},
		{
			MethodName: "messages_getAllDrafts",
			Handler:    _RPCmessages_MessagesGetAllDrafts_Handler,
		},
		{
			MethodName: "messages_getFeaturedStickers",
			Handler:    _RPCmessages_MessagesGetFeaturedStickers_Handler,
		},
		{
			MethodName: "messages_readFeaturedStickers",
			Handler:    _RPCmessages_MessagesReadFeaturedStickers_Handler,
		},
		{
			MethodName: "messages_getRecentStickers",
			Handler:    _RPCmessages_MessagesGetRecentStickers_Handler,
		},
		{
			MethodName: "messages_saveRecentSticker",
			Handler:    _RPCmessages_MessagesSaveRecentSticker_Handler,
		},
		{
			MethodName: "messages_clearRecentStickers",
			Handler:    _RPCmessages_MessagesClearRecentStickers_Handler,
		},
		{
			MethodName: "messages_getArchivedStickers",
			Handler:    _RPCmessages_MessagesGetArchivedStickers_Handler,
		},
		{
			MethodName: "messages_getMaskStickers",
			Handler:    _RPCmessages_MessagesGetMaskStickers_Handler,
		},
		{
			MethodName: "messages_getAttachedStickers",
			Handler:    _RPCmessages_MessagesGetAttachedStickers_Handler,
		},
		{
			MethodName: "messages_setGameScore",
			Handler:    _RPCmessages_MessagesSetGameScore_Handler,
		},
		{
			MethodName: "messages_setInlineGameScore",
			Handler:    _RPCmessages_MessagesSetInlineGameScore_Handler,
		},
		{
			MethodName: "messages_getGameHighScores",
			Handler:    _RPCmessages_MessagesGetGameHighScores_Handler,
		},
		{
			MethodName: "messages_getInlineGameHighScores",
			Handler:    _RPCmessages_MessagesGetInlineGameHighScores_Handler,
		},
		{
			MethodName: "messages_getCommonChats",
			Handler:    _RPCmessages_MessagesGetCommonChats_Handler,
		},
		{
			MethodName: "messages_getAllChats",
			Handler:    _RPCmessages_MessagesGetAllChats_Handler,
		},
		{
			MethodName: "messages_getWebPage",
			Handler:    _RPCmessages_MessagesGetWebPage_Handler,
		},
		{
			MethodName: "messages_toggleDialogPin",
			Handler:    _RPCmessages_MessagesToggleDialogPin_Handler,
		},
		{
			MethodName: "messages_reorderPinnedDialogs",
			Handler:    _RPCmessages_MessagesReorderPinnedDialogs_Handler,
		},
		{
			MethodName: "messages_getPinnedDialogs",
			Handler:    _RPCmessages_MessagesGetPinnedDialogs_Handler,
		},
		{
			MethodName: "messages_setBotShippingResults",
			Handler:    _RPCmessages_MessagesSetBotShippingResults_Handler,
		},
		{
			MethodName: "messages_setBotPrecheckoutResults",
			Handler:    _RPCmessages_MessagesSetBotPrecheckoutResults_Handler,
		},
		{
			MethodName: "messages_uploadMedia",
			Handler:    _RPCmessages_MessagesUploadMedia_Handler,
		},
		{
			MethodName: "messages_sendScreenshotNotification",
			Handler:    _RPCmessages_MessagesSendScreenshotNotification_Handler,
		},
		{
			MethodName: "messages_getFavedStickers",
			Handler:    _RPCmessages_MessagesGetFavedStickers_Handler,
		},
		{
			MethodName: "messages_faveSticker",
			Handler:    _RPCmessages_MessagesFaveSticker_Handler,
		},
		{
			MethodName: "messages_getUnreadMentions",
			Handler:    _RPCmessages_MessagesGetUnreadMentions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

func init() { proto.RegisterFile("schema.tl.sync_service.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 10079 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x7d, 0x5d, 0x6c, 0x1c, 0xc7,
	0x96, 0x1e, 0x67, 0x86, 0x3f, 0xc3, 0x22, 0xf5, 0xe3, 0x16, 0x25, 0x51, 0x23, 0x89, 0xa2, 0x5a,
	0x12, 0x45, 0xd9, 0xd7, 0x7f, 0xf4, 0xbd, 0xb6, 0xef, 0xe2, 0xfe, 0x98, 0x22, 0x25, 0x9b, 0x36,
	0x65, 0xd1, 0x4d, 0xda, 0xb2, 0x73, 0xd7, 0x77, 0xdc, 0x9c, 0xae, 0x99, 0x69, 0x73, 0xa6, 0x7b,
	0xd4, 0xdd, 0x43, 0x89, 0x46, 0x36, 0x41, 0xb2, 0x46, 0x90, 0xcd, 0x45, 0xb2, 0xd8, 0x64, 0x1f,
	0x92, 0x97, 0x3c, 0xdc, 0x04, 0x79, 0xcb, 0xc3, 0x2e, 0x70, 0x17, 0xc9, 0x43, 0x80, 0x00, 0x01,
	0x92, 0x7d, 0x0a, 0x82, 0x9b, 0xf7, 0x00, 0x41, 0x1e, 0x92, 0x3c, 0xe4, 0x39, 0x40, 0x80, 0x00,
	0x41, 0x9d, 0xfa, 0xe9, 0xaa, 0xea, 0xaa, 0x9e, 0x19, 0x5a, 0xbe, 0xc1, 0x3e, 0xcd, 0x74, 0xd5,
	0xd7, 0xa7, 0x4e, 0x9d, 0xaa, 0x3a, 0x75, 0xaa, 0xea, 0x54, 0x1f, 0x74, 0x2d, 0x6d, 0x75, 0x71,
	0xdf, 0x7f, 0x2d, 0xeb, 0xbd, 0x96, 0x9e, 0x44, 0xad, 0x66, 0x8a, 0x93, 0xe3, 0xb0, 0x85, 0x5f,
	0x1b, 0x24, 0x71, 0x16, 0x3b, 0x73, 0xfd, 0x0c, 0xfe, 0x34, 0x1a, 0x39, 0xac, 0x15, 0x27, 0xb8,
	0x99, 0x9d, 0x0c, 0x70, 0x4a, 0x41, 0x8d, 0x25, 0x95, 0x04, 0x4d, 0x75, 0xdf, 0x43, 0x2f, 0x1d,
	0xec, 0x36, 0xc3, 0xe8, 0x38, 0x3e, 0xc2, 0x9b, 0xed, 0x0c, 0x27, 0x8f, 0xd2, 0x8e, 0x73, 0x11,
	0xcd, 0xf6, 0xd3, 0x4e, 0x33, 0x0c, 0x96, 0x2b, 0xab, 0x95, 0xf5, 0x9a, 0x37, 0xd3, 0x4f, 0x3b,
	0x3b, 0x81, 0xb3, 0x84, 0x66, 0x9e, 0x0e, 0x71, 0x72, 0xb2, 0x5c, 0x5d, 0xad, 0xac, 0x2f, 0x7a,
	0xf4, 0xc1, 0xdd, 0x42, 0x4e, 0x81, 0x42, 0xea, 0x5c, 0x46, 0x73, 0x94, 0x44, 0xba, 0x5c, 0x59,
	0xad, 0xad, 0xd7, 0xbc, 0x59, 0xa0, 0x91, 0x5a, 0x88, 0xfc, 0x71, 0x95, 0xf1, 0x11, 0x66, 0x5b,
	0x71, 0x14, 0xe1, 0x56, 0x16, 0xc6, 0x11, 0xe1, 0xc3, 0x1f, 0x84, 0x9c, 0x8f, 0x19, 0x6f, 0xc6,
	0x1f, 0x84, 0x3b, 0x81, 0x73, 0x13, 0x2d, 0x06, 0x98, 0x54, 0xbf, 0xd9, 0x8f, 0x03, 0xdc, 0x03,
	0x4a, 0xf3, 0xde, 0x02, 0x4d, 0x7b, 0x44, 0x92, 0x9c, 0x3b, 0xe8, 0x6c, 0x7a, 0x92, 0x66, 0xb8,
	0xdf, 0x3c, 0xc6, 0x49, 0x1a, 0xc6, 0xd1, 0x72, 0x0d, 0x40, 0x67, 0x68, 0xea, 0x67, 0x34, 0xd1,
	0xb9, 0x81, 0x16, 0xfc, 0xc1, 0x40, 0x60, 0xa6, 0x01, 0x83, 0xfc, 0xc1, 0x80, 0x03, 0xd6, 0xd1,
	0x79, 0x46, 0xa7, 0xe7, 0x47, 0x9d, 0x66, 0x2b, 0x0e, 0xf0, 0xf2, 0x0c, 0xa0, 0x18, 0xfd, 0x5d,
	0x3f, 0xea, 0x6c, 0xc5, 0x01, 0x76, 0xae, 0xa2, 0x79, 0x80, 0x0c, 0xfc, 0xd6, 0xd1, 0xf2, 0x2c,
	0x40, 0xea, 0x24, 0x61, 0xcf, 0x6f, 0x1d, 0x89, 0x4c, 0x78, 0x7f, 0x2e, 0xcf, 0x84, 0x37, 0x85,
	0x44, 0xea, 0xb2, 0x44, 0xde, 0x93, 0xc4, 0xfa, 0x24, 0xcc, 0xba, 0xbb, 0xfe, 0x09, 0x4e, 0x08,
	0xb6, 0x47, 0xfe, 0x70, 0x81, 0xf4, 0x78, 0xaa, 0x41, 0xa6, 0xaf, 0xa3, 0xcb, 0x0a, 0x85, 0x78,
	0x98, 0x7d, 0x3a, 0x08, 0xfc, 0x0c, 0x4b, 0x8d, 0x50, 0x91, 0x5f, 0x78, 0x07, 0x8a, 0xf4, 0x87,
	0x59, 0xb7, 0xd9, 0xea, 0xe2, 0xd6, 0xd1, 0x5e, 0x37, 0x8e, 0x30, 0x91, 0xf6, 0x80, 0xfc, 0x69,
	0x46, 0xc3, 0xfe, 0x21, 0x2b, 0x79, 0xde, 0x5b, 0x80, 0xb4, 0x8f, 0x21, 0xc9, 0xfd, 0xf7, 0x15,
	0x74, 0x9e, 0xbf, 0x99, 0xe2, 0x28, 0x80, 0x6a, 0xdd, 0x45, 0xe7, 0xfc, 0x5e, 0x2f, 0x7e, 0xd6,
	0x6c, 0xf7, 0xfc, 0xb4, 0xdb, 0xf2, 0x7b, 0xb4, 0xa1, 0xea, 0xde, 0x59, 0x48, 0x7e, 0xc8, 0x53,
	0x0b, 0x05, 0xd4, 0x0a, 0x05, 0x38, 0x3f, 0x44, 0x67, 0x5b, 0xc3, 0x24, 0xc1, 0x51, 0xc6, 0x41,
	0xa4, 0xa9, 0x16, 0x36, 0xce, 0xbc, 0xc6, 0x7a, 0xfe, 0x6b, 0xf7, 0xe3, 0xb8, 0xe7, 0x9d, 0x61,
	0x20, 0xf6, 0x56, 0xde, 0x7d, 0x66, 0xe4, 0xee, 0x73, 0x05, 0xd5, 0x49, 0x72, 0xd7, 0x4f, 0xbb,
	0xac, 0xa1, 0xe6, 0xfc, 0x41, 0xf8, 0x81, 0x9f, 0x76, 0xdd, 0xbf, 0xa8, 0xa0, 0xb3, 0xa2, 0x22,
	0x61, 0x27, 0xfa, 0x74, 0x30, 0x46, 0xf5, 0x9d, 0x35, 0x74, 0x8e, 0x42, 0x48, 0xf3, 0x52, 0xba,
	0xb4, 0x4b, 0x9e, 0x81, 0x64, 0x22, 0x0d, 0x42, 0xdd, 0xb9, 0x8e, 0x50, 0x8e, 0x63, 0xd5, 0x9c,
	0x17, 0x10, 0x92, 0xdd, 0x0e, 0x93, 0x34, 0x6b, 0x46, 0x7e, 0x1f, 0xb3, 0xbe, 0x38, 0x0f, 0x29,
	0x1f, 0xfb, 0x7d, 0xd6, 0xc1, 0x78, 0xee, 0x0c, 0xef, 0x43, 0x34, 0xd3, 0xfd, 0x46, 0xe5, 0x7b,
	0x27, 0xfa, 0xdd, 0xf1, 0xed, 0x9e, 0xcf, 0xcb, 0xee, 0xc5, 0x9d, 0xc7, 0xc3, 0xcc, 0xbd, 0x8e,
	0xae, 0xf2, 0x94, 0x04, 0xa7, 0x38, 0xdb, 0x1c, 0x66, 0xdd, 0x38, 0x09, 0xbf, 0xf1, 0xc9, 0xa8,
	0x4e, 0xdd, 0x03, 0x74, 0x41, 0xee, 0x2d, 0x3b, 0xd1, 0x71, 0x48, 0x3a, 0xe5, 0x2d, 0x74, 0x46,
	0xe6, 0x98, 0x2a, 0x8e, 0x79, 0x6f, 0x51, 0x62, 0x39, 0x75, 0x96, 0xd1, 0x5c, 0x1f, 0xa7, 0xa9,
	0xdf, 0xc1, 0x8c, 0x57, 0xfe, 0xe8, 0x6e, 0xe4, 0x85, 0xe2, 0xe7, 0x83, 0x38, 0x51, 0x4b, 0x75,
	0x2e, 0xa0, 0x99, 0xa0, 0x95, 0xab, 0x92, 0xe9, 0xa0, 0xb5, 0x13, 0xb8, 0x5b, 0xf9, 0x3b, 0x61,
	0xbf, 0xf8, 0xce, 0x59, 0x54, 0x15, 0x2f, 0x54, 0x43, 0x50, 0x80, 0x87, 0x27, 0x19, 0x4e, 0xf9,
	0x38, 0x83, 0x07, 0xf7, 0x9f, 0x57, 0x60, 0xa0, 0x01, 0x95, 0xc3, 0x30, 0x0a, 0x0e, 0x70, 0x7f,
	0x40, 0xe8, 0x7c, 0x84, 0x4f, 0x9c, 0xbb, 0xe8, 0xfc, 0x00, 0x27, 0x7d, 0x9a, 0x79, 0x84, 0x4f,
	0x72, 0x9d, 0x7a, 0x86, 0xa4, 0x33, 0x18, 0xd5, 0xad, 0x51, 0x1c, 0xb5, 0x68, 0xad, 0x6a, 0x1e,
	0x7d, 0x20, 0x92, 0xc7, 0xcf, 0x07, 0x61, 0x82, 0xd3, 0xa6, 0x9f, 0x81, 0xe4, 0x67, 0xbc, 0x79,
	0x96, 0xb2, 0x99, 0x39, 0xaf, 0xa0, 0x97, 0x70, 0xd4, 0x4a, 0x4e, 0x06, 0x19, 0x0e, 0x9a, 0x5c,
	0x2c, 0xd3, 0xc0, 0xdb, 0x79, 0x91, 0xf1, 0x88, 0xc9, 0xe7, 0x1f, 0x54, 0xd0, 0x8a, 0x5a, 0xd9,
	0xfb, 0xb1, 0x56, 0xdf, 0x25, 0x34, 0xd3, 0xee, 0xf9, 0x9d, 0x94, 0x6b, 0x17, 0x78, 0x90, 0x86,
	0x51, 0xd5, 0x36, 0x8c, 0x6a, 0xca, 0x30, 0x72, 0x6e, 0xa3, 0xb3, 0x87, 0x71, 0x46, 0x8b, 0xca,
	0xe2, 0x23, 0xcc, 0x35, 0xeb, 0xe2, 0x21, 0x2d, 0xf1, 0x80, 0xa4, 0xb9, 0x3f, 0x41, 0x17, 0x55,
	0x75, 0xe3, 0xa7, 0xe9, 0xb3, 0x38, 0x09, 0xa0, 0x23, 0xb0, 0xff, 0x94, 0x3c, 0xd5, 0x52, 0x8b,
	0x3c, 0x11, 0x86, 0xea, 0x4d, 0x74, 0x23, 0xef, 0x63, 0x4f, 0x87, 0x38, 0xcd, 0xf8, 0xfb, 0x1e,
	0x6e, 0xc5, 0xc7, 0x44, 0x9f, 0xbd, 0x9a, 0xb7, 0x4b, 0x42, 0xd3, 0x44, 0x11, 0x0e, 0x9a, 0x86,
	0xce, 0x4c, 0x47, 0x05, 0xfc, 0x77, 0x9b, 0xb9, 0xfa, 0x23, 0xbd, 0x96, 0xa9, 0xb1, 0x17, 0x37,
	0x8e, 0xe4, 0x02, 0x5a, 0x7e, 0xd4, 0xc2, 0xbd, 0x17, 0x5d, 0xc0, 0x36, 0x5a, 0xe6, 0x05, 0x04,
	0x49, 0x3c, 0x90, 0x3a, 0x62, 0x4a, 0x66, 0x32, 0xfc, 0xbc, 0x85, 0x07, 0x99, 0xe8, 0x8b, 0x7c,
	0x66, 0x3e, 0x4b, 0xd3, 0x39, 0xd2, 0xdd, 0x43, 0x57, 0x08, 0x95, 0x56, 0x2b, 0x1e, 0x46, 0x59,
	0x33, 0xc1, 0x9d, 0x30, 0xcd, 0x70, 0xb2, 0x0d, 0xb3, 0x2b, 0xe9, 0x91, 0xd0, 0xa2, 0x60, 0x5a,
	0xb0, 0x7e, 0x32, 0x0f, 0x29, 0x07, 0x27, 0x03, 0x98, 0xcb, 0x68, 0x83, 0x53, 0xfe, 0xe8, 0x83,
	0xeb, 0xd1, 0x61, 0xc6, 0x28, 0x0e, 0xa3, 0x17, 0x41, 0xf3, 0xef, 0x57, 0x68, 0x07, 0xe0, 0x44,
	0x61, 0x66, 0xfb, 0x38, 0xce, 0xc2, 0xf6, 0xc9, 0x3e, 0xce, 0xb2, 0x30, 0xea, 0xa4, 0xce, 0x0f,
	0xd0, 0xf4, 0x00, 0x33, 0x91, 0x2e, 0x6c, 0x2c, 0x8b, 0xc9, 0x62, 0x27, 0x1a, 0x0c, 0x33, 0x8a,
	0xdd, 0xc3, 0x38, 0xf1, 0x00, 0xe5, 0xfc, 0x04, 0xd5, 0x53, 0xf6, 0x26, 0x14, 0xb5, 0xb0, 0xb1,
	0xaa, 0xbe, 0x41, 0xb0, 0x6a, 0x09, 0x9e, 0x78, 0xc3, 0xdd, 0x45, 0xd7, 0x24, 0x76, 0x3a, 0x38,
	0xfb, 0x2e, 0xbc, 0xb8, 0xab, 0x74, 0xac, 0x8a, 0x36, 0x48, 0x75, 0x7a, 0x6e, 0x8f, 0xb6, 0xb5,
	0x52, 0xfd, 0xbd, 0x24, 0x6e, 0x87, 0x3d, 0x7d, 0x26, 0xa9, 0x96, 0xce, 0x24, 0x35, 0x75, 0x26,
	0x21, 0xd2, 0xf6, 0x0f, 0xe3, 0x61, 0xc6, 0x86, 0x2c, 0x7d, 0x70, 0xef, 0xd3, 0xa1, 0xa4, 0x94,
	0xb6, 0x9f, 0xf9, 0xd9, 0x30, 0x75, 0xee, 0xa2, 0xb9, 0xb8, 0xdd, 0xee, 0x85, 0x11, 0x66, 0x75,
	0xd3, 0x26, 0x65, 0x9e, 0xeb, 0x36, 0x14, 0x8e, 0x3b, 0x38, 0x7b, 0xe2, 0xf7, 0x7a, 0x7b, 0xfe,
	0x00, 0x27, 0xa9, 0x1b, 0x51, 0x5d, 0x20, 0xea, 0x4b, 0xd4, 0x13, 0x11, 0x87, 0xb3, 0xa6, 0x88,
	0xcd, 0x29, 0x36, 0x08, 0x6b, 0xbc, 0x57, 0xd1, 0x6c, 0x82, 0xfd, 0x34, 0x8e, 0x58, 0xd3, 0x5d,
	0x14, 0x48, 0x0f, 0x88, 0x79, 0x90, 0xe9, 0x31, 0x90, 0xfb, 0xb6, 0xc2, 0x0b, 0xa8, 0x9f, 0x4f,
	0x53, 0x9c, 0x10, 0x89, 0x38, 0x0d, 0x54, 0x1f, 0xb2, 0xff, 0x6c, 0x30, 0x8a, 0x67, 0xf7, 0x1d,
	0x65, 0x6c, 0x50, 0x39, 0x8c, 0xf5, 0xe2, 0x96, 0x52, 0xc1, 0x0e, 0xce, 0xf6, 0x92, 0xf0, 0xd8,
	0x6f, 0x9d, 0x38, 0x2f, 0xa3, 0xda, 0x11, 0x3e, 0x31, 0x77, 0x0b, 0x86, 0xf9, 0x08, 0x9f, 0x78,
	0x04, 0xe4, 0x66, 0x0a, 0x91, 0xf4, 0x54, 0x44, 0x9c, 0xd7, 0xd1, 0x4c, 0x32, 0xec, 0xc1, 0x24,
	0x56, 0x5b, 0x5f, 0xd8, 0xb8, 0x62, 0x44, 0x7b, 0xc3, 0x1e, 0xf6, 0x28, 0xce, 0xdd, 0x50, 0x64,
	0x15, 0xe0, 0x1e, 0xce, 0xf0, 0x26, 0x7d, 0x72, 0x2e, 0x09, 0xb1, 0xd3, 0x0a, 0x73, 0xf9, 0x16,
	0xda, 0x9a, 0xbd, 0x70, 0x70, 0xb0, 0xeb, 0x3e, 0x50, 0xf2, 0x52, 0x39, 0xcf, 0xb9, 0x87, 0x6a,
	0x59, 0xd6, 0x63, 0x15, 0xb9, 0x2c, 0x58, 0x63, 0x88, 0x6d, 0xff, 0x24, 0x3d, 0x38, 0xd8, 0xf5,
	0x08, 0xc6, 0xfd, 0x75, 0x45, 0x19, 0x23, 0xa0, 0xb0, 0xbb, 0x7e, 0xd4, 0xc1, 0x7b, 0xc2, 0xa2,
	0xfa, 0xff, 0x6e, 0x82, 0xba, 0x7f, 0xbb, 0x82, 0x2e, 0x29, 0x1d, 0x4d, 0x30, 0xf8, 0x3b, 0x34,
	0xd0, 0xde, 0x41, 0xd7, 0x0b, 0x9d, 0x96, 0xaa, 0xde, 0xdd, 0xb8, 0x75, 0x84, 0x03, 0xd2, 0x8a,
	0x03, 0x9c, 0x84, 0x31, 0xb7, 0x75, 0xd8, 0x93, 0xbb, 0xa2, 0xeb, 0x34, 0xcd, 0x90, 0x7b, 0x4b,
	0x21, 0x5c, 0x34, 0xf5, 0xc8, 0x34, 0x2b, 0x26, 0xf0, 0x9a, 0x07, 0xff, 0xdd, 0x65, 0x45, 0x22,
	0x64, 0x24, 0xb0, 0x49, 0xd9, 0x3d, 0x50, 0x1a, 0x54, 0xca, 0x11, 0x4a, 0x74, 0x03, 0x5d, 0xe4,
	0x8d, 0x60, 0xb2, 0x10, 0x2e, 0xb0, 0xcc, 0x3d, 0xd9, 0x50, 0xf8, 0x75, 0x05, 0xdd, 0x2c, 0x6a,
	0xca, 0x17, 0x40, 0xd9, 0xd9, 0x41, 0x8b, 0x11, 0x7e, 0xd6, 0xd4, 0x26, 0x8d, 0x35, 0xd1, 0x21,
	0x78, 0x91, 0xfc, 0x25, 0x18, 0x60, 0x62, 0xea, 0x58, 0x88, 0xf0, 0x33, 0xa1, 0xcd, 0xff, 0x54,
	0x9d, 0xcd, 0xa8, 0xf5, 0x11, 0xb5, 0xc3, 0xa4, 0x7f, 0x8a, 0xde, 0xcc, 0xa5, 0x4e, 0x3b, 0x02,
	0xfc, 0x3f, 0x65, 0xf7, 0xfd, 0x4a, 0x51, 0xfb, 0x2d, 0x89, 0x23, 0x53, 0xdf, 0xac, 0x8c, 0xee,
	0x9b, 0x55, 0xbd, 0x6f, 0x7e, 0xae, 0x28, 0xd4, 0x0e, 0xce, 0x0e, 0xfa, 0x83, 0x89, 0x0c, 0x41,
	0xa9, 0xf3, 0x56, 0x95, 0xce, 0xfb, 0x0e, 0xec, 0x28, 0x10, 0x05, 0x9c, 0x12, 0xba, 0x44, 0x4b,
	0xa7, 0x8e, 0xcb, 0x2c, 0xfa, 0x5a, 0x71, 0x32, 0x21, 0x00, 0x62, 0xe5, 0xbb, 0xbf, 0x87, 0x96,
	0xe4, 0x17, 0x1f, 0x0e, 0x7b, 0x3d, 0x92, 0x27, 0xde, 0xad, 0x94, 0xbc, 0x7b, 0x05, 0x04, 0xd6,
	0x8a, 0xa3, 0xcc, 0x6f, 0x65, 0xf0, 0x3a, 0x9d, 0x25, 0x71, 0xca, 0xac, 0x51, 0x39, 0x6b, 0x8b,
	0xfd, 0x57, 0x86, 0xc9, 0x0c, 0x1b, 0x26, 0x8f, 0x51, 0x43, 0x86, 0x53, 0x8b, 0x5d, 0xbc, 0xf1,
	0x26, 0xaa, 0xf3, 0x2c, 0x56, 0x9b, 0x8b, 0x2a, 0x47, 0x0c, 0xe9, 0x09, 0x98, 0xfb, 0x73, 0x90,
	0xb4, 0x20, 0x48, 0xf5, 0x38, 0x83, 0x8d, 0x55, 0xb7, 0xf7, 0x54, 0x8e, 0x14, 0x02, 0xe3, 0x49,
	0x96, 0x36, 0x89, 0xa0, 0x70, 0xd8, 0x8b, 0x5b, 0x47, 0x63, 0x15, 0xfd, 0x63, 0x58, 0x31, 0x8a,
	0x17, 0x87, 0xd1, 0xf8, 0xaf, 0x3e, 0x04, 0x75, 0x23, 0x8b, 0xfd, 0x7e, 0x4f, 0x68, 0xbd, 0xb8,
	0xdd, 0x4e, 0x71, 0xc6, 0xb5, 0x1e, 0x7d, 0x82, 0x3d, 0x96, 0xb0, 0x1f, 0x66, 0x7c, 0xb9, 0x03,
	0x0f, 0x4c, 0x6d, 0x09, 0x3a, 0x74, 0x89, 0xb9, 0xe5, 0x27, 0x84, 0xb9, 0x4b, 0x86, 0x96, 0xf2,
	0x93, 0xc0, 0xb9, 0x81, 0x16, 0x28, 0xae, 0xd9, 0xf2, 0x13, 0x2a, 0x9c, 0x19, 0x0f, 0x49, 0xaf,
	0xbe, 0x0b, 0x2b, 0x02, 0xf1, 0x6a, 0x8a, 0xfd, 0xa4, 0xd5, 0x75, 0x16, 0x51, 0xe5, 0x29, 0x1b,
	0x4c, 0x95, 0xa7, 0x16, 0x76, 0x7e, 0x0c, 0x26, 0xb5, 0x78, 0x33, 0xc1, 0x69, 0xdc, 0x3b, 0x1e,
	0xcf, 0x14, 0xf9, 0x87, 0xd5, 0x42, 0x4f, 0x3c, 0x88, 0x07, 0xc4, 0x96, 0x4a, 0x9d, 0x35, 0x74,
	0xb6, 0x15, 0x27, 0x09, 0x4e, 0x07, 0x71, 0x14, 0xe0, 0x28, 0x4b, 0xb9, 0x8a, 0x51, 0x53, 0x9d,
	0xcb, 0x68, 0xee, 0x30, 0xce, 0xd2, 0xe6, 0xa0, 0x0f, 0x5a, 0xa6, 0xee, 0xcd, 0x92, 0xc7, 0xbd,
	0x3e, 0xa9, 0x32, 0x64, 0x84, 0x11, 0x58, 0x84, 0xd3, 0x90, 0x89, 0x48, 0xd2, 0x0e, 0xa4, 0x10,
	0x00, 0xd3, 0x07, 0x7e, 0xaf, 0x97, 0xc2, 0x46, 0x46, 0xdd, 0xa3, 0x2a, 0x62, 0x8b, 0xa4, 0x90,
	0x66, 0xe9, 0x24, 0xf1, 0x70, 0x90, 0xc2, 0xe6, 0x4c, 0xdd, 0x63, 0x4f, 0xa4, 0x4a, 0x64, 0xfa,
	0x8c, 0x70, 0x2f, 0x85, 0x2d, 0xb4, 0xba, 0x27, 0x9e, 0xa5, 0xa6, 0xac, 0x9b, 0x9b, 0x72, 0x5e,
	0x92, 0x9d, 0x18, 0x6e, 0x48, 0x1a, 0x6e, 0x7f, 0x03, 0xe6, 0x1e, 0x59, 0x9e, 0x42, 0x2a, 0x9e,
	0x4f, 0x74, 0xb4, 0xf3, 0x43, 0x54, 0x6f, 0xf9, 0x19, 0xee, 0xc4, 0x49, 0xd1, 0xd0, 0x62, 0xc8,
	0x2d, 0x96, 0xef, 0x09, 0xa4, 0xb0, 0x5f, 0xab, 0xe5, 0xf6, 0xab, 0xde, 0xbd, 0xa0, 0xfc, 0x7d,
	0xff, 0x18, 0x07, 0xee, 0x3d, 0x68, 0x2d, 0xb6, 0xba, 0x87, 0xd6, 0x62, 0x2b, 0xfa, 0x54, 0xec,
	0x4f, 0xd4, 0xe8, 0xfe, 0x84, 0xfb, 0x97, 0xd4, 0xda, 0x90, 0xb1, 0xdb, 0xa1, 0xdf, 0x8b, 0x3b,
	0xa9, 0x73, 0x07, 0x91, 0x65, 0x5e, 0x6f, 0x18, 0xe0, 0xe6, 0x20, 0x8c, 0x22, 0x1c, 0xb0, 0x86,
	0x3d, 0xc3, 0x52, 0xf7, 0x20, 0x91, 0xb4, 0x0e, 0x15, 0x5d, 0x93, 0xcc, 0x92, 0x6c, 0xc7, 0x01,
	0xd1, 0xa4, 0x6d, 0x3f, 0x83, 0xb5, 0x03, 0x03, 0x84, 0x01, 0xb4, 0xee, 0x8c, 0x57, 0xa7, 0x09,
	0x3b, 0x81, 0xf3, 0x96, 0x78, 0x1b, 0xea, 0x3c, 0x63, 0xad, 0x33, 0xa3, 0x08, 0x16, 0xbe, 0x68,
	0xa3, 0x59, 0xb9, 0x7f, 0xff, 0xd7, 0x62, 0x55, 0x3e, 0x08, 0xd3, 0x4c, 0x16, 0xe9, 0xa8, 0x25,
	0x81, 0xc2, 0x6a, 0x55, 0x63, 0x75, 0x64, 0x45, 0xaf, 0x23, 0xe4, 0x07, 0x41, 0x93, 0x75, 0x2b,
	0x5a, 0xd3, 0x79, 0x3f, 0x08, 0x1e, 0x6b, 0x3d, 0x6b, 0x46, 0xee, 0x59, 0x17, 0xd1, 0x6c, 0xdf,
	0x7f, 0x4e, 0xca, 0x63, 0x95, 0xe9, 0xfb, 0xcf, 0x77, 0x02, 0x48, 0x0e, 0x23, 0x92, 0x3c, 0xc7,
	0x92, 0xc3, 0x68, 0x27, 0x70, 0xff, 0x4b, 0x15, 0x86, 0xbf, 0xa8, 0x23, 0x1b, 0xfe, 0x63, 0x76,
	0x19, 0xaa, 0x26, 0x6a, 0x5c, 0x4d, 0xbc, 0x82, 0xe6, 0xda, 0x49, 0xdc, 0xe7, 0xcd, 0x62, 0x56,
	0x88, 0xb3, 0x04, 0xb2, 0x13, 0x38, 0xaf, 0xa3, 0xd9, 0x76, 0xd8, 0xcb, 0x44, 0x1b, 0xe5, 0x96,
	0x36, 0xef, 0x5b, 0x0f, 0x21, 0xdb, 0x63, 0x30, 0xe7, 0x0a, 0xaa, 0x93, 0x1a, 0x80, 0xac, 0x68,
	0xd5, 0xe6, 0xfa, 0x61, 0x04, 0x82, 0x22, 0x59, 0xfe, 0x73, 0x9a, 0x35, 0xc7, 0xb2, 0xfc, 0xe7,
	0xc5, 0xce, 0x52, 0xd7, 0x5a, 0x40, 0x15, 0xf0, 0xbc, 0x55, 0xc0, 0xc8, 0x2c, 0xe0, 0x05, 0xb3,
	0x80, 0x17, 0x65, 0x01, 0x7f, 0xae, 0x0e, 0x9d, 0x04, 0xfb, 0xc1, 0xa4, 0x9d, 0x28, 0x2f, 0xb0,
	0x2a, 0x15, 0xe8, 0x9e, 0xc0, 0x64, 0x2a, 0x28, 0xd3, 0xb9, 0x90, 0xd3, 0xbe, 0x8e, 0xd0, 0xd7,
	0xc3, 0x34, 0x6b, 0xb6, 0x7a, 0xd8, 0x4f, 0xd8, 0x38, 0x9b, 0x27, 0x29, 0x5b, 0x24, 0x41, 0x14,
	0x5d, 0x1b, 0xbb, 0xe8, 0x69, 0xb9, 0xe8, 0x6d, 0x98, 0x86, 0xb5, 0xa2, 0x85, 0x4a, 0x80, 0x05,
	0xd9, 0x71, 0x7c, 0x84, 0x59, 0xb9, 0xec, 0x89, 0xa9, 0x8a, 0x9a, 0x50, 0x15, 0x3f, 0x02, 0xd3,
	0x5e, 0x12, 0x4d, 0x0b, 0x87, 0xc7, 0x62, 0xb3, 0x30, 0x95, 0x0a, 0xaf, 0xc8, 0x85, 0xa7, 0xb0,
	0x02, 0x95, 0x7a, 0x6c, 0x76, 0x70, 0x32, 0x20, 0xda, 0x71, 0x5c, 0x79, 0x6e, 0xa0, 0x59, 0x1f,
	0x0e, 0x77, 0x58, 0xf7, 0x6e, 0x08, 0xe4, 0x3e, 0x8e, 0x78, 0xf1, 0x9b, 0x80, 0xf0, 0x18, 0xd2,
	0xfd, 0xb6, 0xa6, 0xb6, 0x63, 0x9a, 0x23, 0x89, 0xac, 0xa3, 0xb8, 0xf9, 0x0c, 0x1f, 0x0e, 0xf8,
	0x96, 0x70, 0xdd, 0x9b, 0x8f, 0xe2, 0x27, 0x34, 0x81, 0x88, 0x23, 0x0d, 0x7b, 0x38, 0xca, 0xf8,
	0x34, 0x45, 0x9f, 0x9c, 0x15, 0x84, 0x0e, 0xfd, 0xd6, 0x11, 0x99, 0x5a, 0xa2, 0x40, 0xcc, 0x52,
	0x22, 0x85, 0xa8, 0x07, 0x68, 0xbd, 0x66, 0x90, 0xf8, 0xed, 0x8c, 0xcf, 0x52, 0x90, 0xb4, 0x4d,
	0x52, 0x44, 0x7d, 0x67, 0x47, 0xd4, 0xf7, 0x0e, 0x3a, 0x97, 0xe0, 0x41, 0xef, 0xa4, 0x99, 0xc5,
	0x4d, 0x76, 0xa6, 0x46, 0x07, 0xc9, 0x22, 0x24, 0x1f, 0xc4, 0x8f, 0xe0, 0x68, 0x4d, 0xda, 0xd6,
	0xae, 0x2b, 0xdb, 0xda, 0x64, 0x0c, 0x25, 0x7e, 0x14, 0xd0, 0x91, 0x3d, 0x0f, 0xeb, 0xa8, 0x3a,
	0x4d, 0xd8, 0x09, 0x9c, 0x77, 0x10, 0x25, 0xd3, 0xec, 0xfb, 0xc9, 0xd1, 0x70, 0x00, 0x63, 0x65,
	0x61, 0x63, 0x49, 0xde, 0xfb, 0xe8, 0x9d, 0x3c, 0x82, 0x3c, 0x6f, 0x21, 0xc9, 0x1f, 0x9c, 0x0d,
	0x54, 0xc7, 0x51, 0x16, 0x66, 0x21, 0x4e, 0x97, 0x17, 0xc0, 0x66, 0xbb, 0xa4, 0xab, 0x80, 0x07,
	0x24, 0xff, 0xc4, 0x13, 0x38, 0xf7, 0xdf, 0x56, 0xf5, 0xc6, 0x27, 0xcd, 0x10, 0x84, 0xbe, 0x24,
	0xe5, 0x6a, 0x89, 0x94, 0x6b, 0xa3, 0xa4, 0x3c, 0x6d, 0x95, 0xf2, 0xcc, 0xe4, 0x52, 0x9e, 0x35,
	0x48, 0xf9, 0x1e, 0x9a, 0xe9, 0x13, 0x86, 0xa1, 0x09, 0x16, 0x36, 0x2e, 0xa8, 0xf4, 0xa0, 0x2e,
	0x1e, 0x45, 0xa8, 0x62, 0xaf, 0x8f, 0x10, 0xfb, 0xfc, 0x98, 0x62, 0x77, 0xbf, 0xad, 0x82, 0xd9,
	0x26, 0x44, 0xd8, 0x8e, 0x93, 0x67, 0x7e, 0x12, 0xc8, 0xa3, 0xf7, 0x54, 0x82, 0x74, 0xd1, 0x99,
	0x67, 0x61, 0xd6, 0x6d, 0xf6, 0x4f, 0x9a, 0x69, 0x2b, 0x4e, 0xb8, 0xdd, 0xb5, 0x40, 0x12, 0x1f,
	0x9d, 0xec, 0x93, 0x24, 0xe7, 0x75, 0x34, 0x0f, 0x13, 0xc4, 0x08, 0x81, 0xd6, 0x09, 0x08, 0x26,
	0x66, 0xaa, 0x32, 0x66, 0xb9, 0xca, 0x50, 0x45, 0x32, 0x07, 0x5b, 0xc7, 0xb9, 0x48, 0x5e, 0x41,
	0x73, 0x59, 0x4c, 0x69, 0xd7, 0xad, 0xb4, 0x67, 0xb3, 0x98, 0xfc, 0xba, 0xef, 0xa9, 0x73, 0x3b,
	0xdd, 0xee, 0xdb, 0x1f, 0xf8, 0xfd, 0x71, 0xd5, 0x88, 0xae, 0x04, 0xbb, 0x61, 0x80, 0xbd, 0xc9,
	0xa9, 0x3c, 0x50, 0x5b, 0xa3, 0x43, 0x2d, 0x12, 0xb1, 0x27, 0x30, 0x2e, 0x99, 0x35, 0x58, 0x30,
	0xca, 0x64, 0xb6, 0xba, 0x7e, 0x56, 0x34, 0xcf, 0x36, 0x0a, 0x96, 0x1c, 0x59, 0x5b, 0x12, 0x2c,
	0xb1, 0xa7, 0x5b, 0x5d, 0x3f, 0xcb, 0xf5, 0xed, 0x2c, 0x79, 0xdc, 0x09, 0xdc, 0x0f, 0xd5, 0x89,
	0x06, 0x07, 0x21, 0x10, 0x3f, 0x08, 0xb3, 0x1e, 0xb6, 0xbe, 0x05, 0x5b, 0xe6, 0x04, 0x21, 0xb6,
	0xcc, 0xc9, 0x83, 0xdb, 0x32, 0xd3, 0xda, 0xeb, 0xc6, 0x59, 0x6c, 0xa7, 0xf5, 0x2a, 0x9a, 0x19,
	0x10, 0x04, 0x53, 0xd8, 0x97, 0xb5, 0x75, 0x26, 0x27, 0xe0, 0x51, 0x94, 0xfb, 0xd7, 0xd5, 0x4a,
	0xfa, 0x41, 0x40, 0x20, 0xb0, 0x80, 0xb6, 0x16, 0xf1, 0x0a, 0x9a, 0x23, 0xab, 0x13, 0x3e, 0xcb,
	0x5a, 0x6c, 0x17, 0x02, 0xd9, 0x81, 0x6e, 0xd8, 0x7e, 0x16, 0x34, 0xa9, 0x71, 0x40, 0xed, 0xb6,
	0x7a, 0xfb, 0x59, 0xb0, 0x0b, 0x66, 0xe3, 0xa1, 0x69, 0x72, 0x7c, 0xb1, 0x0c, 0xb8, 0x9f, 0xab,
	0xbd, 0xb7, 0x95, 0x60, 0x9f, 0x96, 0xe1, 0xac, 0xa3, 0x19, 0xd8, 0x36, 0x28, 0x59, 0x06, 0x53,
	0x80, 0xa5, 0x81, 0x9e, 0xaa, 0xdc, 0xab, 0xda, 0x61, 0xec, 0x29, 0x96, 0x76, 0xbb, 0xaa, 0x38,
	0xb5, 0x54, 0xc6, 0x6d, 0x4d, 0x55, 0x65, 0xba, 0x89, 0x44, 0x56, 0x0c, 0x5d, 0xd8, 0x79, 0xea,
	0x90, 0x39, 0x89, 0x3b, 0x46, 0x50, 0x69, 0xf1, 0x47, 0xe7, 0x16, 0x3a, 0xc3, 0x28, 0xf6, 0x70,
	0xd4, 0xc9, 0xba, 0xac, 0xb0, 0x45, 0x9a, 0xb8, 0x0b, 0x69, 0xee, 0x37, 0xb0, 0x39, 0x28, 0x0d,
	0x72, 0x38, 0xa4, 0x7b, 0x40, 0x8f, 0x25, 0x09, 0x15, 0x49, 0xe8, 0x95, 0x71, 0x5a, 0x3d, 0xaf,
	0x04, 0x33, 0xe6, 0x85, 0xf2, 0x39, 0x87, 0x6a, 0x9d, 0xa6, 0x0f, 0x75, 0x5b, 0xf4, 0xaa, 0x9d,
	0x4d, 0xf7, 0x8f, 0x2a, 0xaa, 0x79, 0xe3, 0xb7, 0x5a, 0x78, 0x20, 0x97, 0xfd, 0xba, 0x22, 0xcb,
	0xab, 0x6a, 0xc1, 0x0f, 0xf8, 0xd1, 0x29, 0x69, 0x54, 0x26, 0x54, 0x28, 0xe2, 0x90, 0x1d, 0xfc,
	0x56, 0x3b, 0xf7, 0x9d, 0xbb, 0xe8, 0xdc, 0x11, 0x3e, 0x69, 0xb6, 0xc3, 0xa8, 0x83, 0x93, 0x41,
	0x12, 0x32, 0x13, 0xa3, 0xe6, 0x9d, 0x3d, 0xc2, 0x27, 0x0f, 0xf3, 0x54, 0xf7, 0x5d, 0x55, 0x0e,
	0x41, 0x98, 0xb6, 0xfc, 0x24, 0x90, 0x78, 0xb1, 0x8e, 0xfd, 0xe7, 0xb0, 0x26, 0x95, 0x8d, 0x2d,
	0xc1, 0x19, 0xb3, 0xba, 0x26, 0xae, 0xc6, 0x1d, 0x34, 0x9b, 0xc1, 0xab, 0xac, 0x9f, 0x6b, 0xdb,
	0x7f, 0x2c, 0xd3, 0x8d, 0xd0, 0xaa, 0x6e, 0x38, 0x0b, 0x6a, 0xdc, 0xca, 0x9d, 0xb8, 0x6c, 0x79,
	0xa1, 0x50, 0x55, 0x16, 0x0a, 0xee, 0x1f, 0xa8, 0x9a, 0x89, 0x58, 0x16, 0x82, 0xc2, 0xe4, 0x05,
	0x15, 0xfa, 0x8a, 0x3c, 0x51, 0x39, 0x68, 0x3a, 0xf0, 0x33, 0xde, 0x59, 0xe0, 0xbf, 0xfb, 0xe7,
	0x15, 0xb5, 0x8d, 0x94, 0xf2, 0x1f, 0x86, 0x3d, 0xfc, 0xfd, 0xf3, 0x40, 0x4a, 0x68, 0x87, 0x3d,
	0xcc, 0x16, 0x6f, 0xb6, 0x12, 0x08, 0x33, 0x1e, 0x00, 0xdd, 0x6f, 0x2b, 0x6a, 0x23, 0x29, 0x4c,
	0xef, 0x53, 0xff, 0xb0, 0xdf, 0x81, 0xec, 0x7e, 0xa8, 0x36, 0x1d, 0x5f, 0x48, 0x7c, 0x32, 0xc4,
	0x43, 0x98, 0xa0, 0x48, 0x93, 0x3f, 0xcd, 0xb8, 0x4b, 0x01, 0x59, 0x54, 0x7c, 0x92, 0xa5, 0xae,
	0x07, 0xdb, 0xdd, 0x9a, 0x05, 0x90, 0x73, 0x4f, 0x26, 0xf1, 0x49, 0x59, 0x77, 0xdf, 0xd4, 0x69,
	0xfa, 0x5c, 0x75, 0x6e, 0xc5, 0x51, 0x06, 0xdb, 0x56, 0xfa, 0x8c, 0xfc, 0x86, 0xaa, 0x70, 0x3b,
	0x38, 0xdb, 0xec, 0xf5, 0xf6, 0xb3, 0xb0, 0x75, 0x44, 0x94, 0xb4, 0x69, 0x5b, 0xf6, 0xc7, 0x6a,
	0x4f, 0xe9, 0xe0, 0xec, 0x09, 0x3e, 0xdc, 0xf3, 0x3b, 0x78, 0x2f, 0xc1, 0xc7, 0x21, 0x7e, 0x26,
	0x5b, 0xf2, 0x15, 0xd5, 0x41, 0xe5, 0x1d, 0x55, 0x27, 0xb1, 0x6d, 0x40, 0x32, 0xd4, 0xc1, 0x01,
	0xc6, 0xae, 0x07, 0xde, 0x54, 0xcd, 0x14, 0x38, 0xad, 0x94, 0xde, 0x93, 0xd9, 0x64, 0xdb, 0xfd,
	0xee, 0x86, 0x5a, 0x16, 0xdb, 0x93, 0x2c, 0x7f, 0xe7, 0x53, 0xb5, 0x25, 0x61, 0xef, 0x1a, 0x24,
	0xb1, 0x8f, 0x33, 0xe7, 0x5d, 0x84, 0x52, 0x26, 0x17, 0xb6, 0x61, 0x5a, 0x38, 0x68, 0xcc, 0xd1,
	0x9e, 0x84, 0x25, 0xfd, 0x54, 0x11, 0x59, 0x18, 0xa5, 0x99, 0x2f, 0xa4, 0xfc, 0x9d, 0x68, 0x3b,
	0xf7, 0x50, 0xdd, 0x4f, 0x5a, 0x5d, 0xd2, 0xe1, 0xcc, 0x0a, 0x4d, 0x64, 0xbb, 0xbf, 0x50, 0x7b,
	0xc7, 0x30, 0x7a, 0x81, 0x7c, 0xb8, 0xbf, 0xae, 0xa8, 0x26, 0x60, 0x9a, 0xf9, 0xe0, 0x5e, 0xe3,
	0xdc, 0x46, 0xb5, 0xc3, 0x38, 0x2b, 0x99, 0xdf, 0x48, 0xf6, 0xd8, 0x3b, 0x3e, 0x65, 0x33, 0x39,
	0x59, 0x4c, 0x41, 0xb1, 0xcd, 0x81, 0x9f, 0xf8, 0x7d, 0xee, 0xcb, 0x08, 0x49, 0x7b, 0x24, 0xc5,
	0xfd, 0x43, 0x6d, 0x52, 0x94, 0x76, 0x12, 0x3f, 0x0b, 0xf1, 0xb3, 0x74, 0x62, 0x03, 0x83, 0x2f,
	0x0c, 0x5e, 0x41, 0xf3, 0x61, 0xd4, 0x4a, 0x70, 0x9f, 0xaf, 0xb3, 0x0b, 0xcd, 0x90, 0xe7, 0xbb,
	0x5f, 0xa9, 0x4c, 0x64, 0x71, 0xa7, 0xd3, 0x03, 0xeb, 0x69, 0x33, 0xe8, 0x87, 0x51, 0x6a, 0xb7,
	0xd1, 0xee, 0xa2, 0x39, 0x1c, 0xf9, 0x87, 0x3d, 0x5b, 0x53, 0xf3, 0x5c, 0xf7, 0x57, 0x15, 0xb3,
	0x9d, 0x0b, 0x05, 0xbc, 0x20, 0x23, 0x74, 0x1d, 0xd5, 0x43, 0x62, 0xdc, 0xf6, 0xc3, 0xc8, 0x5c,
	0xe3, 0xb9, 0x30, 0x85, 0xf2, 0x74, 0xa3, 0xbf, 0x1f, 0x76, 0x12, 0x6e, 0x2e, 0x5a, 0x07, 0xfc,
	0x9f, 0x55, 0xe0, 0x88, 0x5c, 0xdb, 0x18, 0x7c, 0xbf, 0x17, 0x1f, 0xfa, 0x3d, 0xed, 0x74, 0x40,
	0xdb, 0xc7, 0xac, 0x16, 0xf6, 0x31, 0xb5, 0x3d, 0xd9, 0xda, 0x58, 0x7b, 0xb2, 0xa5, 0xbb, 0xbc,
	0xc6, 0xad, 0x4f, 0x77, 0x57, 0x35, 0x56, 0x12, 0x1c, 0x27, 0x01, 0x4e, 0xf2, 0xf1, 0x02, 0x36,
	0x6f, 0xdf, 0x4f, 0x8f, 0xf8, 0x91, 0x02, 0x7d, 0x20, 0xa9, 0x80, 0x84, 0xbd, 0xa9, 0x9a, 0x47,
	0x1f, 0xdc, 0x6e, 0x41, 0xcd, 0x6e, 0xc7, 0xad, 0x21, 0xe9, 0x40, 0xf7, 0x4f, 0xf8, 0xa9, 0x5f,
	0xda, 0xf5, 0x37, 0x7e, 0xf4, 0x36, 0x3b, 0x13, 0x64, 0x4f, 0x44, 0xb1, 0xa5, 0xe1, 0x37, 0x5c,
	0x10, 0xf0, 0x9f, 0xd4, 0xa6, 0x1f, 0xf6, 0xa9, 0x37, 0x34, 0xf7, 0x77, 0x21, 0x09, 0x07, 0x27,
	0x03, 0xec, 0xfe, 0x4c, 0xb5, 0xe6, 0x99, 0xa8, 0xc3, 0x76, 0xaa, 0x09, 0x3a, 0x3f, 0x62, 0xa8,
	0xca, 0x47, 0x0c, 0xee, 0x6b, 0x6a, 0x53, 0x75, 0xd8, 0xb6, 0x3d, 0x50, 0x30, 0x4d, 0x20, 0x01,
	0x1c, 0x65, 0xe5, 0xe5, 0xf9, 0xc7, 0xf8, 0xfd, 0xb0, 0xed, 0xac, 0x49, 0x47, 0x59, 0x97, 0xd4,
	0xd6, 0xe1, 0x35, 0x87, 0xb1, 0x76, 0x07, 0xcd, 0x0e, 0x23, 0xf2, 0x92, 0xc5, 0x80, 0xa3, 0x99,
	0xee, 0x6f, 0x2b, 0xaa, 0xba, 0xeb, 0xe0, 0x8c, 0x9e, 0xbf, 0xdc, 0x8f, 0x33, 0x0f, 0xa7, 0xc3,
	0x5e, 0x96, 0x72, 0xdd, 0x54, 0x1d, 0x4f, 0x37, 0x8d, 0xda, 0xad, 0x7c, 0x0b, 0xcd, 0x77, 0x70,
	0xdc, 0x1c, 0xc4, 0xc4, 0x12, 0x9e, 0x36, 0xd5, 0xe3, 0x7d, 0x1c, 0xef, 0x91, 0x5c, 0xaf, 0xde,
	0x61, 0xff, 0x72, 0x3f, 0x64, 0xea, 0xcf, 0x4a, 0x1f, 0x24, 0x51, 0x53, 0xf7, 0x5c, 0x2e, 0xea,
	0x5f, 0x57, 0xd5, 0x4a, 0xa5, 0x86, 0x4a, 0x2d, 0xa3, 0xb9, 0x8e, 0xdf, 0xeb, 0x71, 0x67, 0xe8,
	0xba, 0xc7, 0x1f, 0x49, 0xce, 0x20, 0x09, 0x8f, 0xf9, 0x6e, 0x7f, 0xdd, 0xe3, 0x8f, 0xc4, 0x30,
	0x85, 0x82, 0x79, 0x67, 0xaf, 0x79, 0x73, 0xf0, 0x0c, 0x3b, 0x3d, 0x73, 0x09, 0xa5, 0xbc, 0x3c,
	0x03, 0x6b, 0xba, 0xeb, 0x6a, 0x9d, 0xee, 0xc7, 0x8c, 0x05, 0x5a, 0xbe, 0xc7, 0xd1, 0xce, 0x75,
	0x84, 0x5a, 0x7e, 0xab, 0x8b, 0x9b, 0x59, 0xd8, 0xe7, 0x5b, 0xe6, 0xf3, 0x90, 0x72, 0x10, 0xf6,
	0xe1, 0x14, 0x2c, 0xc2, 0xcf, 0x33, 0xbe, 0xfb, 0x4d, 0x5d, 0xc2, 0x11, 0x49, 0x62, 0xdb, 0xdf,
	0xef, 0xa0, 0xf9, 0xf4, 0x59, 0x98, 0xb5, 0xba, 0xcd, 0x41, 0x9f, 0xed, 0xa8, 0x34, 0xa4, 0xa2,
	0x59, 0xad, 0xf7, 0x01, 0xb2, 0xf7, 0xc8, 0xab, 0x53, 0xf0, 0x5e, 0xdf, 0xfd, 0x93, 0x82, 0x90,
	0xa2, 0x40, 0x93, 0xd2, 0x5f, 0x99, 0xfd, 0x3a, 0x6d, 0xc7, 0x49, 0x9d, 0xef, 0xe4, 0x56, 0xab,
	0xab, 0xad, 0x46, 0x27, 0xa8, 0x79, 0x10, 0x2a, 0x31, 0xf3, 0x3e, 0x57, 0x75, 0x53, 0x3e, 0xf1,
	0x3d, 0x08, 0x42, 0xa2, 0x25, 0xfd, 0xd3, 0xae, 0xad, 0xdd, 0xff, 0x5d, 0x51, 0xd5, 0x3b, 0x99,
	0x6b, 0xc6, 0xdc, 0x9a, 0x1e, 0x77, 0x60, 0xd1, 0x22, 0xa7, 0xc5, 0x72, 0x5e, 0x32, 0x30, 0x67,
	0xd4, 0xad, 0x62, 0x7d, 0x5b, 0x72, 0xf6, 0x34, 0xbb, 0xc1, 0x73, 0x63, 0xee, 0x06, 0xff, 0x1f,
	0x6d, 0xf9, 0x41, 0x6a, 0x2e, 0xfa, 0xd9, 0x98, 0x22, 0x78, 0x83, 0x1d, 0x4a, 0x18, 0x7c, 0x2d,
	0xc5, 0xc0, 0x62, 0xa4, 0x76, 0xb6, 0xf5, 0xca, 0x4f, 0x97, 0x57, 0x7e, 0xe6, 0x34, 0x95, 0x9f,
	0x1d, 0xb3, 0xf2, 0x7f, 0xa4, 0x55, 0xbe, 0x83, 0x09, 0xc3, 0x5b, 0x7e, 0xaf, 0x47, 0x46, 0xcb,
	0x66, 0x94, 0x3e, 0xc3, 0x09, 0xd1, 0xfe, 0x1d, 0xee, 0x7f, 0x59, 0xf7, 0xe0, 0xff, 0x44, 0x67,
	0x3f, 0x74, 0x5c, 0xf0, 0xb3, 0x1f, 0x18, 0x10, 0x7c, 0x01, 0x36, 0x23, 0x2d, 0xc0, 0xfe, 0x69,
	0x61, 0x1d, 0x68, 0xe0, 0x65, 0x09, 0xcd, 0xf8, 0x3d, 0x9c, 0xf0, 0x01, 0x4f, 0x1f, 0x94, 0x21,
	0x54, 0x53, 0x87, 0x90, 0x5d, 0xd0, 0xe7, 0x51, 0x6d, 0x98, 0xf4, 0x58, 0xdf, 0x23, 0x7f, 0x47,
	0xe8, 0x3a, 0xf7, 0x61, 0x61, 0x91, 0x45, 0x2a, 0xca, 0x0f, 0xa6, 0xd7, 0xd1, 0x0c, 0xa9, 0xb1,
	0x65, 0xcf, 0x0c, 0x44, 0x42, 0x01, 0xee, 0x7f, 0xae, 0x68, 0xe7, 0x0f, 0xfe, 0x31, 0xa6, 0x6a,
	0x67, 0x44, 0x37, 0x33, 0x68, 0x9b, 0x9a, 0x41, 0xdb, 0xf0, 0xb6, 0x99, 0x1e, 0xd1, 0x36, 0xf6,
	0x01, 0x78, 0x9a, 0xae, 0xd4, 0x28, 0xd8, 0x0f, 0x9b, 0xbd, 0x1e, 0x54, 0x2b, 0x75, 0x7f, 0x54,
	0x98, 0xc4, 0x1f, 0x62, 0x3f, 0x1b, 0x26, 0x38, 0x28, 0x5d, 0xa3, 0x6e, 0x14, 0x77, 0x6f, 0x0a,
	0xef, 0xe5, 0x2b, 0xe1, 0x1a, 0x28, 0xb2, 0xc7, 0x05, 0x83, 0xcb, 0xc3, 0x2d, 0x1c, 0x65, 0xe2,
	0x85, 0x06, 0xaa, 0xfb, 0x59, 0x46, 0x1a, 0x95, 0xbb, 0x0e, 0x88, 0x67, 0xc5, 0xe1, 0x8c, 0x33,
	0xf1, 0xf7, 0xf4, 0x3d, 0x15, 0xff, 0x18, 0x2b, 0x24, 0x4b, 0x29, 0xae, 0x49, 0x9a, 0x61, 0x3c,
	0x73, 0x68, 0xba, 0xcc, 0x1c, 0xfa, 0xa9, 0x2a, 0x48, 0x98, 0xb1, 0xc6, 0xaf, 0x9f, 0xfb, 0x75,
	0xa1, 0x1d, 0x36, 0xd9, 0xb2, 0x52, 0xbc, 0x6e, 0x36, 0x6e, 0x15, 0x3b, 0x9a, 0x2d, 0xd8, 0x8a,
	0x76, 0xf4, 0xb4, 0x6c, 0x47, 0xbf, 0x59, 0x38, 0x93, 0x78, 0xe4, 0xa7, 0x47, 0xa5, 0xed, 0xfd,
	0x69, 0x91, 0x3d, 0xc6, 0xb9, 0x78, 0x6d, 0x83, 0x9f, 0x7c, 0xd1, 0x09, 0xee, 0x9a, 0x71, 0x55,
	0x8b, 0x03, 0xf9, 0x08, 0xcc, 0xfd, 0x8f, 0x85, 0x55, 0x48, 0xf6, 0xbe, 0xdf, 0xc7, 0xf4, 0x34,
	0xe9, 0x26, 0x5a, 0x24, 0x1a, 0xbf, 0x29, 0x5f, 0xc6, 0xa9, 0x7b, 0x0b, 0xf2, 0xfc, 0xb7, 0x84,
	0x66, 0xda, 0x71, 0xd2, 0xe2, 0xe6, 0x16, 0x7d, 0x18, 0x7b, 0x94, 0xd1, 0x0e, 0x3a, 0x23, 0xa6,
	0x3d, 0x69, 0x79, 0x36, 0x3b, 0x72, 0x79, 0xb6, 0x84, 0x66, 0xe8, 0x39, 0x18, 0xf3, 0xb7, 0x80,
	0x07, 0x52, 0xa1, 0x15, 0xa3, 0xfd, 0xf8, 0x02, 0xaa, 0xf5, 0x86, 0x98, 0xa5, 0xc7, 0x9d, 0xca,
	0xa4, 0x0a, 0xcd, 0x8c, 0x5f, 0xa1, 0x59, 0xb9, 0x42, 0xfa, 0xd6, 0x4a, 0x87, 0xb6, 0xd0, 0x07,
	0x61, 0xa7, 0x0b, 0xd5, 0x49, 0x4f, 0x7d, 0x66, 0x20, 0x31, 0x57, 0x1b, 0x79, 0x20, 0xf2, 0x6d,
	0x05, 0xdd, 0x32, 0x2e, 0x36, 0x34, 0x66, 0xde, 0x90, 0xd6, 0x38, 0x13, 0xcb, 0x68, 0xf4, 0xb9,
	0xcc, 0x71, 0x61, 0x9e, 0xd9, 0x8a, 0xfb, 0xfd, 0x38, 0xa2, 0x87, 0x71, 0x13, 0x9d, 0x36, 0x98,
	0xbd, 0x3e, 0xf2, 0x11, 0x5b, 0x93, 0x47, 0xec, 0xbb, 0x85, 0x23, 0x94, 0x4d, 0x7a, 0xaa, 0x97,
	0xd2, 0xfb, 0x5b, 0x70, 0xe9, 0x86, 0x5f, 0x84, 0x85, 0xfb, 0x5b, 0x24, 0x65, 0x27, 0x48, 0xf5,
	0xb5, 0x67, 0xbe, 0x99, 0xc8, 0x27, 0xd9, 0x4a, 0x3e, 0xc9, 0xf2, 0x81, 0x5f, 0x95, 0x06, 0xfe,
	0x97, 0xaa, 0xae, 0xa0, 0x7b, 0x29, 0x74, 0x62, 0xdd, 0x0b, 0x23, 0xf0, 0x8c, 0x95, 0x7d, 0xbd,
	0xd8, 0xd3, 0xb8, 0x46, 0x88, 0x7b, 0xa8, 0xcf, 0x23, 0xb0, 0x36, 0xa7, 0x9e, 0x62, 0x7c, 0xfa,
	0x16, 0xa3, 0xa1, 0x2a, 0x8f, 0x86, 0x75, 0x79, 0x51, 0x6f, 0x99, 0xd4, 0xe9, 0x42, 0x7f, 0xa5,
	0xb0, 0x27, 0xa5, 0xd0, 0x77, 0xff, 0x31, 0xf5, 0xde, 0xd6, 0xac, 0x9b, 0xfd, 0x6e, 0x38, 0x18,
	0x84, 0x51, 0x87, 0xaf, 0xfa, 0x64, 0x43, 0xa6, 0xaa, 0x1a, 0x32, 0x4b, 0x68, 0x06, 0x27, 0x49,
	0xcc, 0x7d, 0xfa, 0xe9, 0x83, 0x73, 0x1f, 0x9d, 0x4f, 0x19, 0x8d, 0x66, 0x0c, 0xc7, 0x30, 0xe9,
	0xf2, 0x34, 0xf0, 0x9a, 0x9f, 0x6f, 0xf2, 0x42, 0x1e, 0x43, 0xbe, 0x77, 0x2e, 0x55, 0x9e, 0x53,
	0xf7, 0x29, 0xba, 0x5d, 0xe4, 0x6c, 0x2f, 0xc1, 0xb0, 0x3f, 0x1b, 0x0f, 0xe5, 0x25, 0x69, 0x3a,
	0x6c, 0xb5, 0x70, 0xca, 0x27, 0x07, 0xfe, 0x58, 0x66, 0x7f, 0x09, 0xb6, 0xa7, 0x25, 0xb6, 0xdd,
	0x9e, 0xda, 0xd5, 0x86, 0x83, 0x5e, 0xec, 0x33, 0x1f, 0x8c, 0x71, 0x47, 0xba, 0xf0, 0x81, 0xa8,
	0x8e, 0xf2, 0x81, 0x70, 0xff, 0xb4, 0x82, 0xd6, 0xf4, 0xa5, 0xe4, 0x7e, 0x2b, 0xc1, 0x38, 0x4a,
	0xbb, 0x31, 0xbd, 0x8f, 0x14, 0xb6, 0xa8, 0xa3, 0xff, 0xb8, 0xa5, 0x1b, 0x4c, 0xb1, 0xea, 0xa8,
	0x85, 0x9f, 0x7e, 0x64, 0xb9, 0x51, 0xe8, 0x32, 0x0f, 0xfd, 0xe3, 0x11, 0x26, 0x51, 0x57, 0x15,
	0x5c, 0xdb, 0x3f, 0xc6, 0xdc, 0x0c, 0x99, 0x68, 0xe7, 0xa5, 0x5d, 0xb6, 0xf3, 0x42, 0x32, 0xdd,
	0xff, 0x50, 0xd4, 0xc9, 0x9f, 0x46, 0xf4, 0x2c, 0x22, 0x82, 0x7e, 0xf3, 0x62, 0xfc, 0x17, 0x55,
	0xef, 0xb9, 0x9a, 0xd5, 0x7b, 0x6e, 0xda, 0xec, 0x3d, 0x37, 0x63, 0xf6, 0x9e, 0x9b, 0x95, 0xbd,
	0xe7, 0x2e, 0xc2, 0x4e, 0x15, 0xbd, 0x2f, 0x21, 0x5c, 0xd9, 0xb1, 0xfb, 0x0d, 0x58, 0x05, 0x52,
	0xf2, 0x76, 0xd8, 0x6e, 0xe3, 0x04, 0x47, 0x2d, 0x50, 0x5b, 0x03, 0xe6, 0x33, 0x3c, 0xe3, 0x91,
	0xbf, 0x70, 0x4d, 0x20, 0x23, 0xaa, 0x29, 0xf3, 0x7b, 0xca, 0x99, 0xfd, 0x99, 0x41, 0x96, 0x1e,
	0x90, 0xd4, 0x5d, 0xee, 0x93, 0x0b, 0x1b, 0x98, 0xd3, 0xec, 0x76, 0xae, 0x9f, 0x01, 0xb5, 0xa7,
	0x59, 0xca, 0x78, 0x25, 0x7f, 0xdd, 0xbf, 0xa4, 0xdb, 0x5a, 0x52, 0xe1, 0x5b, 0xd4, 0x05, 0x58,
	0xe2, 0xc1, 0xac, 0x91, 0x5e, 0x87, 0xbd, 0x56, 0x02, 0x65, 0x6a, 0xef, 0x62, 0xc1, 0x8f, 0x81,
	0x64, 0x7a, 0x1c, 0xe5, 0xbc, 0x2d, 0x5c, 0x24, 0xe9, 0xa4, 0xbe, 0x22, 0xf0, 0x0c, 0x6a, 0xf1,
	0x94, 0x64, 0x22, 0x98, 0xc9, 0x45, 0x60, 0x76, 0x70, 0xdd, 0x82, 0x5e, 0x0c, 0x3e, 0x13, 0xa9,
	0x7a, 0x7d, 0x8f, 0xfa, 0x63, 0xdc, 0x92, 0xba, 0xa5, 0x36, 0x48, 0xa9, 0xbf, 0x05, 0x75, 0x6e,
	0x57, 0x88, 0x10, 0x6d, 0xa0, 0x10, 0x59, 0x63, 0x87, 0x8a, 0xc6, 0xae, 0x26, 0x9d, 0x25, 0xfe,
	0x14, 0x26, 0x22, 0x46, 0x87, 0x3a, 0x4d, 0x00, 0x81, 0x54, 0xb0, 0x51, 0x2b, 0x63, 0xe3, 0x57,
	0x74, 0x17, 0x84, 0xbd, 0xcf, 0x2e, 0x5b, 0x30, 0x02, 0x13, 0xcd, 0xbb, 0x96, 0x4d, 0x56, 0xa9,
	0xe3, 0xd6, 0xd8, 0x07, 0x29, 0xd4, 0xf9, 0x58, 0xb1, 0xa0, 0x03, 0xa8, 0x0c, 0x95, 0x06, 0x2c,
	0x3b, 0x48, 0x45, 0xf7, 0xfc, 0x04, 0x36, 0xdc, 0x49, 0x75, 0xf3, 0x4b, 0xd8, 0xa4, 0xd1, 0x30,
	0xf3, 0x29, 0x21, 0x19, 0x03, 0x3f, 0xe1, 0x45, 0xd7, 0xdb, 0xfc, 0x2d, 0x71, 0xeb, 0xbb, 0x26,
	0xdf, 0xfa, 0x3e, 0xa1, 0xd7, 0x4b, 0x68, 0x29, 0x44, 0x07, 0x85, 0x3d, 0xec, 0xbc, 0x8d, 0xea,
	0xbd, 0x98, 0xaa, 0x44, 0x56, 0xdb, 0x46, 0x51, 0xe6, 0xbb, 0x0c, 0xe1, 0x09, 0xac, 0xb5, 0xde,
	0x66, 0x83, 0xe3, 0x4f, 0xe8, 0x01, 0x87, 0x54, 0xc3, 0xfb, 0x61, 0xe7, 0x3b, 0x56, 0x72, 0x1d,
	0x9d, 0x87, 0x4c, 0x3a, 0x50, 0x09, 0x24, 0x65, 0x85, 0x9e, 0x25, 0xe9, 0x30, 0x52, 0x09, 0x30,
	0xcd, 0xc5, 0x31, 0x2d, 0x8b, 0xe3, 0x6f, 0xd2, 0x4b, 0x33, 0x42, 0x1c, 0x4f, 0xf0, 0x21, 0x48,
	0xe4, 0xc7, 0x05, 0x89, 0x68, 0x3b, 0xa8, 0x0c, 0xf8, 0x9d, 0x85, 0xd2, 0xd2, 0x18, 0xd8, 0x0a,
	0xa2, 0x87, 0xe2, 0x2e, 0x2c, 0x54, 0xec, 0x08, 0x47, 0xec, 0xb0, 0x60, 0x9e, 0x56, 0xe9, 0x08,
	0x4f, 0x5a, 0x48, 0x53, 0x16, 0x7c, 0x82, 0xe9, 0x9f, 0x31, 0x4b, 0xba, 0x85, 0xce, 0x30, 0x1f,
	0x98, 0x66, 0x7e, 0x9d, 0x79, 0x91, 0x4c, 0x7c, 0x90, 0x48, 0xef, 0xc4, 0xef, 0x83, 0x0d, 0x5b,
	0xa8, 0xc5, 0x07, 0x7e, 0xda, 0xc5, 0xe9, 0x29, 0xeb, 0xe2, 0x5e, 0x80, 0xae, 0xda, 0xc5, 0xbd,
	0x01, 0xbb, 0x75, 0xd4, 0x0e, 0x3b, 0xee, 0x25, 0x90, 0x17, 0x4f, 0xfc, 0x18, 0xfb, 0x09, 0x4e,
	0xb3, 0xed, 0x96, 0x96, 0xbe, 0x39, 0x18, 0xd0, 0x6f, 0x86, 0xb8, 0xdb, 0xe0, 0xab, 0x0e, 0xe9,
	0xa4, 0xc7, 0x6d, 0x0e, 0x06, 0xbb, 0x71, 0xc7, 0x79, 0x0d, 0xcd, 0xe2, 0x63, 0xb8, 0x27, 0x52,
	0xd1, 0xf6, 0x3b, 0xa0, 0x71, 0x37, 0x07, 0x83, 0x07, 0x24, 0xdb, 0x63, 0x28, 0xf7, 0x32, 0x6c,
	0xe1, 0x70, 0xea, 0xf4, 0x30, 0xfa, 0x00, 0x3f, 0xcf, 0xdc, 0xa5, 0x9c, 0x3c, 0x99, 0x69, 0x86,
	0x83, 0x41, 0x9c, 0x10, 0x25, 0x79, 0x59, 0x65, 0x86, 0xde, 0xf0, 0xec, 0xc5, 0x1d, 0xd2, 0x61,
	0x07, 0x09, 0x3e, 0x6e, 0xca, 0xdf, 0x6f, 0xa1, 0xe6, 0xf2, 0x59, 0x92, 0xbe, 0x29, 0xbe, 0xe1,
	0xe2, 0x5e, 0x85, 0x46, 0xe3, 0x44, 0x0e, 0x70, 0xd2, 0x4f, 0x1f, 0xb7, 0x99, 0x83, 0x84, 0x7b,
	0x04, 0x26, 0x34, 0xad, 0x16, 0x18, 0x70, 0xec, 0x13, 0x29, 0xec, 0x72, 0xf3, 0x06, 0xba, 0x38,
	0xc0, 0x51, 0x40, 0xcc, 0x44, 0x3e, 0xe9, 0xc0, 0x4d, 0x35, 0x66, 0x5c, 0x5c, 0x60, 0x99, 0xec,
	0xa5, 0x2d, 0xb8, 0x13, 0x6b, 0xff, 0x44, 0x85, 0x2a, 0xdb, 0xad, 0x20, 0x62, 0x6d, 0xe1, 0xd3,
	0x0b, 0x39, 0xec, 0x36, 0x8b, 0xe2, 0xa7, 0x2e, 0xcd, 0x5b, 0x95, 0xb1, 0xe6, 0x2d, 0x8b, 0xc3,
	0xfa, 0x97, 0xf4, 0xf2, 0x16, 0x2f, 0x42, 0xf3, 0x1a, 0x9f, 0xb8, 0x14, 0xed, 0x08, 0xd8, 0xfd,
	0x03, 0x30, 0x7a, 0x34, 0xf2, 0x44, 0xb5, 0x9f, 0xba, 0x1e, 0x13, 0x2d, 0xfd, 0xfe, 0x0e, 0xbd,
	0x2d, 0x22, 0x49, 0x50, 0xf8, 0x82, 0x7e, 0xaf, 0x05, 0x17, 0xdc, 0xea, 0xff, 0x9a, 0xda, 0x92,
	0xf2, 0x65, 0x9d, 0xef, 0x2c, 0xe3, 0x7f, 0x55, 0xa1, 0x77, 0xbe, 0x24, 0xe2, 0x44, 0x23, 0x87,
	0xad, 0x70, 0xe0, 0x47, 0xd9, 0x29, 0x0a, 0xf8, 0x3d, 0x61, 0xe2, 0xd0, 0x8a, 0xba, 0xba, 0x89,
	0x23, 0x93, 0xd7, 0xcc, 0x9c, 0x5c, 0xd7, 0xd4, 0xcc, 0x7a, 0x53, 0x99, 0x92, 0xbf, 0x51, 0x7b,
	0x9f, 0xca, 0xf9, 0xf7, 0xdc, 0x37, 0xde, 0x2b, 0x34, 0xc9, 0x16, 0xbf, 0x36, 0x76, 0x47, 0x32,
	0x6e, 0x2c, 0x65, 0x12, 0xc1, 0x3f, 0x2a, 0x70, 0xcf, 0xfc, 0x76, 0x81, 0x99, 0x49, 0xb9, 0x77,
	0xff, 0x90, 0x4e, 0xdf, 0x82, 0x9e, 0x70, 0x20, 0x05, 0x72, 0xd7, 0xd0, 0xfc, 0x61, 0x12, 0xfb,
	0x41, 0xcb, 0x4f, 0xf9, 0x6e, 0x7d, 0x9e, 0x40, 0x72, 0xfb, 0xb8, 0xe3, 0xc3, 0x95, 0x38, 0xb6,
	0x01, 0x95, 0x27, 0xe4, 0x5e, 0xa5, 0xd3, 0x92, 0x57, 0x69, 0xfe, 0x45, 0x87, 0x19, 0xf9, 0x8b,
	0x0e, 0xbf, 0x04, 0x4d, 0x2c, 0x98, 0xc0, 0x41, 0x98, 0x6d, 0x92, 0x8c, 0xc9, 0x5b, 0x43, 0xd0,
	0xaf, 0xca, 0xf4, 0x7f, 0x53, 0x31, 0x14, 0x00, 0x1e, 0x18, 0xdf, 0xef, 0x88, 0xfc, 0x19, 0x5a,
	0x04, 0xb7, 0x8c, 0x66, 0x12, 0x76, 0xba, 0xcc, 0x88, 0x91, 0xdd, 0xc7, 0x18, 0x75, 0x60, 0xc5,
	0x03, 0x88, 0xb7, 0xe0, 0xe7, 0x0f, 0x26, 0xb9, 0x50, 0x67, 0xeb, 0xd3, 0xc8, 0xc5, 0xe0, 0xe3,
	0xfb, 0xac, 0x48, 0x9f, 0xda, 0xea, 0x13, 0xd3, 0x9f, 0xd0, 0x31, 0xbb, 0xab, 0xf5, 0x3a, 0xe5,
	0x9b, 0x17, 0x13, 0x17, 0x2e, 0x5f, 0x30, 0xad, 0x6a, 0x17, 0x4c, 0x43, 0x75, 0xbc, 0x68, 0x5f,
	0xc9, 0x78, 0xa1, 0x45, 0x7d, 0xa8, 0x0e, 0xee, 0xaf, 0xe3, 0x30, 0x3a, 0xf5, 0xb8, 0xfc, 0x08,
	0x16, 0xb6, 0x82, 0x56, 0x0f, 0xfb, 0xc7, 0xf8, 0xd4, 0xc4, 0x9e, 0xab, 0xba, 0x3a, 0xa4, 0x96,
	0x4e, 0x7c, 0x5a, 0x7a, 0xb9, 0x6b, 0x79, 0x75, 0x84, 0x6b, 0xb9, 0x5e, 0x0d, 0xea, 0x66, 0xc8,
	0xdc, 0xfe, 0x26, 0xae, 0xc6, 0xae, 0xda, 0x69, 0x84, 0x3f, 0xfd, 0xe9, 0x84, 0x32, 0x54, 0xa9,
	0xd1, 0xfd, 0x4a, 0xfe, 0xf9, 0xaf, 0x89, 0x45, 0x32, 0xb6, 0x43, 0xd8, 0x57, 0xaa, 0x71, 0x42,
	0x25, 0xc2, 0xe6, 0xe5, 0xdd, 0x30, 0x3a, 0x3a, 0xfd, 0xd4, 0xcc, 0xdd, 0x00, 0x9e, 0xc3, 0x3a,
	0x5c, 0xab, 0xd8, 0x7e, 0xd8, 0x89, 0xe0, 0xd4, 0xed, 0xfb, 0xac, 0xdb, 0x37, 0xb0, 0x21, 0xa2,
	0x8d, 0x35, 0xba, 0x85, 0xca, 0x0f, 0x2c, 0x6c, 0xde, 0x1e, 0x13, 0x6f, 0x89, 0x68, 0x9e, 0x08,
	0xee, 0x1a, 0x6c, 0x80, 0xca, 0xf3, 0x22, 0x68, 0x55, 0x1c, 0xec, 0x0d, 0x0f, 0x7b, 0x61, 0x8b,
	0x4f, 0xb3, 0xee, 0xbf, 0xd6, 0xac, 0x33, 0xa2, 0xf3, 0xee, 0xfb, 0xb0, 0x15, 0xfd, 0xfd, 0xce,
	0x05, 0x9b, 0xe8, 0xcc, 0x21, 0x94, 0xa3, 0x4e, 0x06, 0xd7, 0xf4, 0xc9, 0x80, 0x32, 0xc3, 0x66,
	0x83, 0xc5, 0x43, 0xe9, 0xc9, 0xfd, 0x47, 0xd5, 0x82, 0xf9, 0x00, 0x95, 0x24, 0x8b, 0x1f, 0x89,
	0xf9, 0xea, 0x58, 0xcc, 0xab, 0x37, 0x76, 0x77, 0xd0, 0x19, 0xba, 0x2a, 0x6a, 0x2a, 0x1b, 0x4d,
	0xb7, 0x8d, 0x53, 0xd5, 0x6e, 0xdc, 0x81, 0x95, 0x14, 0xb7, 0xc3, 0x16, 0xb1, 0xf4, 0xe4, 0xbc,
	0x8c, 0x66, 0x61, 0x0e, 0xe3, 0x5e, 0x4a, 0x46, 0xa1, 0x50, 0x84, 0x76, 0x47, 0xb9, 0x66, 0xbe,
	0xa3, 0x5c, 0x63, 0x9b, 0x80, 0xb9, 0x3d, 0x57, 0x97, 0xed, 0xb9, 0x6f, 0x2b, 0xaa, 0x54, 0x52,
	0x9c, 0x1f, 0xa4, 0x4e, 0xdc, 0xa4, 0xaa, 0xdb, 0x6d, 0x75, 0x02, 0xb7, 0xdb, 0x43, 0xb5, 0xf3,
	0x9b, 0x3c, 0xbe, 0xbf, 0xb3, 0xd5, 0x7d, 0x04, 0x3a, 0x0b, 0xbe, 0x69, 0x00, 0x5f, 0x65, 0x19,
	0xa6, 0x59, 0xdc, 0xf7, 0xe8, 0x9a, 0x9d, 0xac, 0xe9, 0x5b, 0x90, 0xd0, 0xec, 0xe3, 0xac, 0xcb,
	0xbe, 0x9f, 0x33, 0xef, 0x2d, 0xd2, 0xc4, 0x47, 0x90, 0xe6, 0xdc, 0x43, 0xb3, 0xe0, 0x92, 0xcb,
	0x3f, 0x10, 0xf3, 0x92, 0xe0, 0x60, 0xdb, 0xcf, 0xfc, 0x0f, 0xf7, 0x1f, 0x7f, 0xec, 0x31, 0x80,
	0x7b, 0x08, 0x07, 0x94, 0x50, 0x98, 0x0f, 0x8e, 0x1b, 0x4f, 0xf0, 0x61, 0x37, 0x8e, 0x8f, 0x08,
	0xe8, 0x13, 0xf0, 0x8d, 0x93, 0x8f, 0x0c, 0x2a, 0xea, 0x91, 0xc1, 0x1d, 0xe6, 0x1c, 0x62, 0x2d,
	0x85, 0xfa, 0x8b, 0xbc, 0x05, 0xb3, 0xf3, 0xc0, 0x3f, 0xe9, 0x43, 0xdf, 0x03, 0x5b, 0x1c, 0xfe,
	0x3f, 0x8c, 0x93, 0xbe, 0xf6, 0xe9, 0x57, 0xee, 0x78, 0xe2, 0xbe, 0x0d, 0x2a, 0xd4, 0xf0, 0x92,
	0x87, 0x5b, 0x38, 0x1c, 0x64, 0xb6, 0xf7, 0xfe, 0x16, 0x3d, 0xbe, 0x11, 0x2f, 0x1e, 0xfb, 0xbd,
	0x90, 0x68, 0x28, 0x26, 0x40, 0x1c, 0xec, 0x44, 0xed, 0x18, 0x9c, 0x36, 0xf9, 0xc6, 0x7a, 0xdd,
	0x83, 0xff, 0x12, 0xc1, 0x9a, 0xec, 0x01, 0xf3, 0x26, 0x9a, 0x0e, 0xa3, 0x76, 0xcc, 0xc6, 0x4a,
	0xbe, 0x97, 0x24, 0xd8, 0x91, 0xe8, 0x7a, 0x00, 0x75, 0x7f, 0x4b, 0xd7, 0x4d, 0x82, 0x07, 0xd2,
	0x8c, 0xe6, 0x2a, 0x57, 0xe5, 0x92, 0x5e, 0x46, 0x2f, 0x25, 0x9c, 0x5a, 0x93, 0x10, 0xe2, 0xbc,
	0xcc, 0x7b, 0xe7, 0x12, 0xb9, 0x98, 0x9d, 0xc0, 0xf9, 0x01, 0x72, 0xb4, 0xe3, 0x24, 0xee, 0xba,
	0x33, 0xef, 0x9d, 0x57, 0xcf, 0x8d, 0x76, 0x02, 0xe7, 0x3e, 0x5a, 0x68, 0x25, 0x38, 0xc0, 0x51,
	0x16, 0xfa, 0xec, 0x13, 0x18, 0xc5, 0x6f, 0xcd, 0x51, 0x06, 0xb7, 0x72, 0x9c, 0x27, 0xbf, 0xc4,
	0xdc, 0x46, 0xe4, 0x06, 0x01, 0xb7, 0x53, 0xc2, 0x8f, 0xeb, 0xa9, 0x2d, 0x0c, 0xde, 0x0e, 0x22,
	0xd7, 0x59, 0x55, 0x4b, 0x67, 0x27, 0xdc, 0x52, 0x12, 0x69, 0x0e, 0x90, 0x31, 0x5d, 0x5f, 0x50,
	0x21, 0xfe, 0x27, 0xea, 0x3c, 0xce, 0x07, 0x1f, 0x5b, 0xb4, 0x48, 0xce, 0xf3, 0x66, 0x07, 0x88,
	0x49, 0xce, 0x91, 0x2d, 0xcb, 0x97, 0xeb, 0x08, 0xa5, 0xdd, 0x38, 0x51, 0x3e, 0x7c, 0x3a, 0x0f,
	0x29, 0xf0, 0xbd, 0xba, 0x77, 0x51, 0x9d, 0x33, 0xc5, 0x7c, 0x6e, 0xae, 0xd9, 0x74, 0xc7, 0x4e,
	0x86, 0xfb, 0x9e, 0x40, 0xbb, 0x07, 0x70, 0xbc, 0x29, 0x6a, 0x94, 0xe0, 0x7e, 0x2c, 0x4e, 0x85,
	0x1e, 0x26, 0x71, 0x9f, 0xd4, 0xea, 0x0d, 0x34, 0xc7, 0x00, 0x23, 0x4e, 0x88, 0x38, 0xcc, 0x7d,
	0x0a, 0x1d, 0x3e, 0x97, 0x13, 0x6c, 0x58, 0x31, 0xaa, 0x7b, 0x71, 0x1a, 0xc2, 0xd6, 0xe6, 0xc4,
	0x64, 0x89, 0x11, 0x3c, 0x60, 0x6f, 0xf3, 0xbd, 0x5b, 0xfe, 0xec, 0xfe, 0x31, 0xed, 0xe0, 0xa2,
	0x4c, 0x3f, 0xe0, 0x87, 0x61, 0x07, 0xf1, 0x77, 0xbb, 0x5f, 0xf1, 0x76, 0xce, 0x67, 0xb5, 0xc4,
	0x71, 0x84, 0xcb, 0x56, 0x08, 0x61, 0x99, 0x9f, 0x27, 0x44, 0x18, 0x16, 0xdc, 0x7e, 0xaf, 0xc7,
	0xb6, 0xba, 0xfe, 0x9c, 0xde, 0x94, 0xa0, 0x59, 0x6c, 0x18, 0x91, 0xec, 0x17, 0x78, 0x1b, 0x70,
	0x19, 0xd5, 0x3b, 0x4d, 0x3f, 0xff, 0x30, 0xe9, 0xa2, 0x37, 0xdb, 0xd9, 0x04, 0xa7, 0xf1, 0xb7,
	0x51, 0x1d, 0x28, 0xb6, 0xe2, 0x1e, 0x53, 0x20, 0xf9, 0xf6, 0xfc, 0x1e, 0xff, 0x02, 0xcd, 0x1e,
	0x43, 0x78, 0x02, 0xeb, 0xfe, 0xaa, 0x02, 0x47, 0x61, 0x94, 0x69, 0x7a, 0x97, 0x90, 0xf1, 0x2c,
	0x9f, 0xe4, 0x5d, 0x2e, 0x1c, 0x8f, 0x50, 0x82, 0xb6, 0x1b, 0x84, 0x32, 0x37, 0xb5, 0x09, 0xb8,
	0xf9, 0x8d, 0x2c, 0x42, 0xf6, 0x4d, 0xae, 0x53, 0xb2, 0xe3, 0x0b, 0x76, 0x36, 0xc7, 0xbe, 0xd0,
	0x78, 0x6a, 0x29, 0x6e, 0xc3, 0xca, 0x97, 0xb7, 0x3c, 0xbd, 0x26, 0x36, 0x31, 0xdf, 0xee, 0xbf,
	0x91, 0x6b, 0xcf, 0x2e, 0x53, 0x4e, 0x5e, 0xfb, 0x06, 0xaa, 0x07, 0xc3, 0xc4, 0x97, 0x87, 0x13,
	0x7f, 0x76, 0xde, 0x11, 0xdf, 0x34, 0xa4, 0xad, 0x72, 0xa3, 0x58, 0xbb, 0x6d, 0x5a, 0xae, 0xfa,
	0x51, 0x49, 0xb0, 0x06, 0xc4, 0xc7, 0xcb, 0x73, 0x67, 0xf2, 0xc5, 0x3c, 0x71, 0x27, 0x70, 0x9f,
	0x49, 0x43, 0x23, 0xa5, 0x43, 0x83, 0x7d, 0x60, 0x68, 0xa2, 0x0a, 0x5c, 0x42, 0xb3, 0x09, 0xbc,
	0xc6, 0xf7, 0xfa, 0xe9, 0x93, 0xb3, 0x8c, 0xe6, 0x5a, 0x71, 0x5f, 0xdc, 0xc4, 0x99, 0xf7, 0xf8,
	0xa3, 0x1b, 0xc9, 0x05, 0x93, 0xa5, 0x2d, 0xa9, 0x07, 0x3e, 0x1c, 0x4e, 0x58, 0xf0, 0x5d, 0x34,
	0x13, 0x90, 0xb7, 0xec, 0x66, 0x06, 0xcd, 0x77, 0xdf, 0x06, 0x13, 0xb1, 0xe7, 0x47, 0x9d, 0x81,
	0xdf, 0x3a, 0x22, 0x6a, 0x60, 0xd7, 0xf8, 0x39, 0xf4, 0x8a, 0xfa, 0x39, 0x74, 0x77, 0x07, 0xf8,
	0x94, 0xdf, 0xdb, 0xcf, 0x12, 0xb8, 0x8f, 0x5f, 0xf6, 0x1a, 0x99, 0xb4, 0xe0, 0x9b, 0xb6, 0x55,
	0xf8, 0x68, 0x34, 0xfc, 0x77, 0x7f, 0x06, 0xb6, 0x9b, 0x4c, 0x4a, 0x3a, 0x27, 0xbe, 0x89, 0x16,
	0xe1, 0x7b, 0x08, 0xea, 0x1d, 0xe7, 0x05, 0x92, 0xc6, 0x4f, 0x0e, 0xe8, 0x24, 0xab, 0x57, 0x61,
	0xe8, 0x77, 0x70, 0xea, 0xfe, 0x04, 0x9d, 0xff, 0x0c, 0xb7, 0xb2, 0x38, 0x69, 0x8a, 0xcf, 0x98,
	0x92, 0x45, 0x3a, 0x31, 0xb1, 0x8a, 0xbe, 0xac, 0x02, 0xe2, 0x51, 0x80, 0xbb, 0x81, 0x16, 0xd8,
	0xdb, 0x70, 0x31, 0xfd, 0x96, 0xfa, 0x62, 0xbe, 0xd8, 0xa3, 0x0b, 0x7b, 0xfa, 0xce, 0x36, 0x5a,
	0x62, 0xef, 0xb0, 0x8f, 0xae, 0xb1, 0x33, 0x8a, 0x1f, 0xa8, 0x2f, 0xe7, 0x53, 0x89, 0x02, 0xe3,
	0x54, 0x5c, 0x84, 0x18, 0x15, 0x76, 0x01, 0x23, 0x7f, 0x77, 0x86, 0x63, 0x0e, 0xd0, 0x35, 0x86,
	0xf1, 0xd8, 0x38, 0xa5, 0x1f, 0x9f, 0xe5, 0x2b, 0xca, 0x1f, 0xaa, 0x25, 0xae, 0x48, 0x4e, 0xd6,
	0x06, 0x38, 0xa7, 0x7a, 0x4b, 0xd4, 0xb9, 0x17, 0x47, 0x1d, 0xb5, 0xe8, 0x1a, 0x07, 0xed, 0xa2,
	0x65, 0x06, 0xca, 0xe7, 0x96, 0xad, 0xf8, 0x18, 0x27, 0x38, 0x70, 0xde, 0x50, 0x8b, 0x95, 0x3e,
	0x1d, 0xa3, 0x43, 0x39, 0xb5, 0xf7, 0x90, 0xc3, 0x45, 0x96, 0x1f, 0xa4, 0x39, 0x2f, 0xab, 0x74,
	0x72, 0x1f, 0x71, 0x09, 0xc4, 0x29, 0x3c, 0x44, 0x17, 0x19, 0x05, 0xde, 0x7b, 0x69, 0x6f, 0x74,
	0x5e, 0x55, 0x89, 0xe4, 0xa3, 0x46, 0xc5, 0x71, 0x3a, 0x1f, 0xa2, 0xcb, 0x1a, 0x1d, 0xde, 0x95,
	0x9c, 0xd7, 0x55, 0x4a, 0x57, 0x0a, 0x94, 0x38, 0x92, 0xd1, 0xda, 0xf8, 0x97, 0x35, 0xb4, 0xe0,
	0xed, 0x6d, 0xf1, 0x79, 0xda, 0x39, 0x44, 0x57, 0xec, 0x76, 0xd9, 0x9d, 0xfc, 0x23, 0x65, 0x25,
	0xe6, 0x5b, 0x23, 0x9f, 0xd8, 0x85, 0xe7, 0x4a, 0x9e, 0xeb, 0x4e, 0x39, 0x5f, 0xa3, 0xeb, 0xe5,
	0x96, 0xd2, 0x3d, 0x63, 0x39, 0x26, 0xe8, 0xc8, 0xb2, 0x7a, 0x68, 0x65, 0x84, 0xfd, 0xf4, 0xb2,
	0xb9, 0x52, 0x26, 0xec, 0xc8, 0xd2, 0xbe, 0x42, 0xcb, 0x56, 0xcb, 0xe9, 0xb6, 0xb1, 0x1c, 0x0d,
	0x35, 0xaa, 0x84, 0x8d, 0xff, 0x5b, 0x85, 0xf6, 0xe2, 0x7a, 0xc4, 0x79, 0x82, 0x96, 0x8c, 0x6a,
	0x71, 0x55, 0x2e, 0xcd, 0x84, 0x68, 0x5c, 0x2d, 0xf4, 0x8d, 0x5c, 0xa1, 0xb9, 0x53, 0xce, 0xe7,
	0xe8, 0x82, 0x49, 0x6f, 0xde, 0xb0, 0xd1, 0x65, 0x80, 0x46, 0x3e, 0x80, 0x8d, 0x7d, 0xdd, 0x9d,
	0x72, 0x7e, 0x81, 0x2e, 0x59, 0xd4, 0xa8, 0x6b, 0x23, 0x9e, 0x63, 0x46, 0xb1, 0xfd, 0x4b, 0x74,
	0xd1, 0xa8, 0x63, 0x9d, 0x9b, 0x65, 0x02, 0x01, 0x48, 0x63, 0xd5, 0xc6, 0x3a, 0x87, 0xb8, 0x53,
	0x1b, 0xff, 0x03, 0xa1, 0x39, 0x6f, 0x6f, 0xcb, 0x1f, 0x66, 0x5d, 0x67, 0x17, 0x9d, 0xd3, 0x03,
	0x5c, 0x5c, 0x95, 0x4b, 0xd1, 0x32, 0x1b, 0xb9, 0x92, 0x81, 0x9c, 0x2d, 0x92, 0x83, 0x03, 0xc8,
	0x73, 0xa7, 0x9c, 0x6d, 0x74, 0x46, 0x0d, 0x7a, 0x71, 0xa5, 0x40, 0x8b, 0x67, 0x35, 0x2e, 0xa9,
	0x94, 0xf6, 0xc9, 0xea, 0x8e, 0xcc, 0x77, 0x53, 0xce, 0x03, 0xb4, 0x20, 0x47, 0x9c, 0xb8, 0x5c,
	0xa4, 0x01, 0x19, 0x92, 0x18, 0x21, 0x55, 0xf9, 0xd4, 0xae, 0x46, 0x66, 0x27, 0xb2, 0x90, 0xd9,
	0x89, 0x46, 0x91, 0x79, 0x87, 0x91, 0xa1, 0xb1, 0x1c, 0x0c, 0x64, 0x68, 0x46, 0x43, 0xdd, 0x91,
	0x74, 0xa7, 0x9c, 0x4f, 0xd0, 0xb2, 0x2d, 0xe4, 0x83, 0x3a, 0x90, 0x6c, 0xa8, 0x22, 0xc9, 0x4d,
	0x74, 0xbe, 0x10, 0x26, 0xe2, 0x9a, 0x51, 0xc4, 0x2c, 0xb7, 0x48, 0xa2, 0xc3, 0xb8, 0x32, 0xc5,
	0x84, 0x28, 0x72, 0x65, 0x40, 0x35, 0x6e, 0xa9, 0xf2, 0x7a, 0x00, 0x10, 0x1c, 0xe8, 0x72, 0x6b,
	0xb2, 0x82, 0x4c, 0x81, 0x24, 0x8a, 0x05, 0x19, 0x50, 0xa3, 0x1a, 0x66, 0x07, 0x2d, 0x19, 0x63,
	0x4c, 0xac, 0x16, 0x88, 0x6b, 0x88, 0xa2, 0x50, 0x30, 0xba, 0x5a, 0x16, 0x07, 0xe2, 0xae, 0x85,
	0x5d, 0x1d, 0x38, 0x8a, 0xe3, 0x7d, 0xe4, 0x18, 0xc2, 0x3b, 0xac, 0x58, 0xc6, 0x1b, 0xcb, 0x1f,
	0x45, 0xf4, 0x6b, 0x74, 0xad, 0x2c, 0xea, 0x83, 0xb3, 0x6e, 0xe8, 0x6a, 0x46, 0xa4, 0xa4, 0xf6,
	0x00, 0x56, 0x88, 0x1f, 0x31, 0x45, 0x34, 0xb5, 0x31, 0x7c, 0xc4, 0xaa, 0xa1, 0x0c, 0x05, 0x31,
	0xaa, 0x12, 0x1f, 0x30, 0x35, 0x24, 0x05, 0x9a, 0xb8, 0x6a, 0x1c, 0x22, 0x23, 0x95, 0xc7, 0xcf,
	0xb9, 0x42, 0xcb, 0x23, 0x4a, 0x18, 0x14, 0x9a, 0xc8, 0x2c, 0xf6, 0x85, 0x8f, 0xd0, 0x45, 0x73,
	0xc4, 0x88, 0x9b, 0x05, 0x32, 0x3a, 0xa4, 0x40, 0x6c, 0xe3, 0x7f, 0x55, 0xd1, 0xbc, 0xb7, 0xb7,
	0x45, 0x3d, 0x01, 0x9d, 0x26, 0xba, 0x62, 0x77, 0x70, 0x54, 0x0c, 0x13, 0x2b, 0xac, 0x71, 0x45,
	0xb1, 0x85, 0xe5, 0x2c, 0x98, 0x96, 0xae, 0xd8, 0x9d, 0x1f, 0xcd, 0x05, 0xe8, 0xb0, 0x46, 0xbe,
	0x21, 0xcc, 0x30, 0x9c, 0xf8, 0xc7, 0xe8, 0x82, 0xc9, 0x23, 0xf2, 0x86, 0x81, 0xac, 0x0c, 0x68,
	0x2c, 0xe9, 0x53, 0x12, 0x31, 0x77, 0xdd, 0x29, 0xc7, 0x43, 0x4b, 0x46, 0x0f, 0xc9, 0x55, 0x03,
	0x41, 0x05, 0x21, 0xb5, 0xbe, 0xcc, 0x62, 0xea, 0x4e, 0x6d, 0xfc, 0xdd, 0x59, 0x98, 0xda, 0xba,
	0xb8, 0x37, 0x70, 0x7e, 0x8e, 0xce, 0xaa, 0x3e, 0x5e, 0x4e, 0x43, 0xa6, 0xac, 0xe6, 0x35, 0xce,
	0xc9, 0xcb, 0x84, 0x76, 0xd8, 0x81, 0x4e, 0xf9, 0x52, 0xc1, 0x1f, 0xcc, 0xb9, 0x6e, 0xa2, 0x21,
	0xb2, 0x1b, 0xf9, 0x1a, 0x27, 0x77, 0x21, 0x9b, 0x72, 0x1e, 0xe5, 0x94, 0x84, 0x07, 0x99, 0x99,
	0x92, 0xc8, 0x6e, 0xe4, 0x13, 0x0d, 0xe4, 0xe5, 0x9e, 0x67, 0xd0, 0xc7, 0x75, 0xc7, 0xb3, 0xab,
	0x05, 0x62, 0x79, 0x66, 0xb1, 0x8f, 0xef, 0x21, 0xa7, 0xe8, 0x73, 0xa6, 0x2a, 0xa2, 0x62, 0x7e,
	0x63, 0x59, 0xe5, 0x48, 0xf2, 0x56, 0x9b, 0x72, 0xde, 0x67, 0x2c, 0xe5, 0xce, 0x6a, 0x06, 0x96,
	0xf2, 0x4c, 0xa9, 0x97, 0x41, 0x0e, 0x77, 0x70, 0x9b, 0x72, 0x76, 0xd1, 0x92, 0xd1, 0xbf, 0x6d,
	0xd5, 0x22, 0x2d, 0x81, 0x68, 0x9c, 0xcf, 0x47, 0x06, 0x75, 0x3f, 0x73, 0xa7, 0x9c, 0xdf, 0x47,
	0x97, 0xcc, 0x8e, 0x6e, 0xaa, 0x9d, 0x66, 0xc6, 0x48, 0x86, 0x2c, 0x00, 0x34, 0x57, 0x39, 0x98,
	0xe1, 0xad, 0x9e, 0x72, 0xb7, 0x8b, 0x0d, 0x52, 0x44, 0x15, 0x5b, 0x46, 0xea, 0x73, 0xc2, 0x1f,
	0xce, 0xdc, 0x53, 0x44, 0xb6, 0xd4, 0xe7, 0x72, 0x17, 0xba, 0xa9, 0x8d, 0xbf, 0x58, 0x02, 0x2b,
	0x5b, 0x7c, 0x13, 0x7a, 0x07, 0x2d, 0x19, 0x3d, 0xea, 0x14, 0xc1, 0x9a, 0x10, 0x45, 0x26, 0x03,
	0x74, 0xd9, 0xe6, 0x39, 0x77, 0xcb, 0x48, 0x4d, 0x05, 0x35, 0xdc, 0xe2, 0x02, 0x61, 0xb3, 0xdd,
	0xc6, 0xad, 0x3c, 0x3a, 0x13, 0x69, 0xbb, 0x10, 0x35, 0x4a, 0x1c, 0xe8, 0xd6, 0x4a, 0x0a, 0x92,
	0x70, 0x8d, 0x9b, 0xf6, 0xb2, 0x18, 0x04, 0x7a, 0xef, 0x05, 0x93, 0xaf, 0xdc, 0x0d, 0x8b, 0x68,
	0x38, 0xa0, 0x28, 0x99, 0xcf, 0x24, 0x21, 0xcb, 0xce, 0x6e, 0x66, 0x21, 0x4b, 0x08, 0xc9, 0xb0,
	0x16, 0x7c, 0x2a, 0xb2, 0x58, 0xb6, 0xfa, 0xb9, 0xdd, 0xb6, 0xd1, 0x96, 0x51, 0x8d, 0x5c, 0xfb,
	0x0b, 0x88, 0xc1, 0xab, 0xcd, 0x9d, 0x72, 0xda, 0x52, 0xe3, 0x6a, 0x8e, 0x69, 0xb7, 0xc6, 0x28,
	0xa9, 0x71, 0x7b, 0x9c, 0x82, 0xc0, 0x18, 0x5a, 0x32, 0x3a, 0xa1, 0x59, 0x45, 0xc5, 0x11, 0x92,
	0x66, 0x14, 0xa2, 0x82, 0xeb, 0x65, 0x30, 0xde, 0x2f, 0xdb, 0xfc, 0xd2, 0xac, 0xcc, 0x4b, 0x20,
	0x53, 0x2b, 0x10, 0xd2, 0x04, 0x02, 0x6a, 0xf3, 0x92, 0xc5, 0x4b, 0xcd, 0x35, 0x12, 0x57, 0x30,
	0x46, 0xfd, 0xf4, 0x00, 0x39, 0x06, 0x97, 0xb3, 0x15, 0x23, 0x35, 0x91, 0x6f, 0xd2, 0x1a, 0x8e,
	0xc1, 0xb1, 0xac, 0x84, 0x0c, 0xc9, 0x37, 0x32, 0xa4, 0x53, 0xa2, 0xbe, 0x5e, 0x76, 0x4a, 0x90,
	0x3f, 0x16, 0x25, 0x6a, 0x84, 0xd8, 0x29, 0x51, 0xeb, 0xc3, 0x44, 0xe9, 0x91, 0x2c, 0x76, 0xc5,
	0x4d, 0xcb, 0x22, 0x76, 0x19, 0x53, 0x14, 0xd6, 0x63, 0xa9, 0x8f, 0x68, 0xbe, 0x58, 0xe6, 0x3e,
	0xa2, 0x82, 0x8a, 0x04, 0x77, 0xa5, 0x9e, 0x2c, 0x7b, 0x5c, 0x99, 0x7b, 0xb2, 0x84, 0x30, 0xd6,
	0xf6, 0x63, 0x74, 0xd1, 0xec, 0x73, 0x75, 0xd3, 0x48, 0x4e, 0x86, 0x18, 0xe9, 0x1d, 0x48, 0xaa,
	0x43, 0x77, 0xbb, 0x32, 0xab, 0x0e, 0x0d, 0x65, 0xa4, 0xfa, 0x85, 0xc4, 0xa5, 0xe2, 0x52, 0x65,
	0xe6, 0x52, 0x86, 0x48, 0x6b, 0x01, 0xbe, 0x76, 0xcc, 0xbf, 0xc4, 0xa6, 0x8d, 0x32, 0xd5, 0xc1,
	0xca, 0x2d, 0xd1, 0xf9, 0x65, 0xcc, 0xca, 0x14, 0x55, 0x27, 0x2b, 0x33, 0x45, 0x05, 0x63, 0xa4,
	0x18, 0x48, 0x73, 0x53, 0xd1, 0x7f, 0x6a, 0xad, 0x44, 0x06, 0x12, 0x4e, 0xb2, 0x2f, 0xb8, 0x20,
	0xa4, 0x5c, 0x98, 0x4d, 0xae, 0xd8, 0x7d, 0xa8, 0xee, 0x94, 0xb0, 0x9e, 0xc3, 0x2c, 0x56, 0xd1,
	0xb5, 0x52, 0x0f, 0xa9, 0xf5, 0x92, 0x61, 0xa0, 0x20, 0x8d, 0xd4, 0xfb, 0xe8, 0xe6, 0x48, 0x1f,
	0x28, 0xe7, 0x55, 0x9b, 0x36, 0x36, 0xc2, 0xcb, 0x54, 0xfe, 0x87, 0xd2, 0xdc, 0x2d, 0x79, 0x52,
	0xdd, 0xb0, 0x2a, 0x1a, 0x0a, 0x30, 0xb2, 0xfe, 0xa5, 0x3a, 0x27, 0x09, 0xcf, 0xa6, 0xd5, 0x52,
	0x6e, 0x89, 0x89, 0x7d, 0xb3, 0x38, 0xeb, 0xf1, 0x3c, 0x76, 0xef, 0x95, 0xee, 0x58, 0x18, 0x5d,
	0x84, 0xcc, 0xe4, 0x25, 0x44, 0x51, 0xe7, 0x7c, 0x21, 0x35, 0xa1, 0xc9, 0xcf, 0x67, 0xdd, 0x6a,
	0xd5, 0x69, 0xc8, 0xe2, 0x9a, 0xf5, 0x37, 0x15, 0x58, 0x43, 0x1d, 0xc6, 0x59, 0xea, 0x7c, 0x82,
	0x2e, 0x59, 0x5c, 0x7d, 0x94, 0x91, 0x63, 0xc6, 0x34, 0x8a, 0x87, 0x61, 0xb0, 0x87, 0x70, 0xb5,
	0xcc, 0xa1, 0xe7, 0x6e, 0x81, 0xae, 0x19, 0x58, 0xe4, 0xfb, 0xbf, 0xcf, 0x53, 0x83, 0x97, 0x47,
	0xe0, 0xf9, 0x02, 0x2d, 0x99, 0x02, 0x0f, 0x69, 0xd2, 0x36, 0x20, 0x1a, 0xd7, 0xf5, 0x15, 0xab,
	0x72, 0x72, 0xc4, 0xcc, 0x3c, 0x53, 0xe0, 0x22, 0x2b, 0x69, 0x8e, 0x90, 0x0c, 0x0c, 0x91, 0xcd,
	0xf3, 0x98, 0x61, 0x6d, 0x89, 0x70, 0x74, 0xcb, 0x48, 0x5a, 0x05, 0x49, 0x86, 0xb5, 0x40, 0xec,
	0xf4, 0x99, 0x8a, 0xcd, 0x4b, 0xf9, 0x0c, 0x5d, 0xb2, 0x85, 0x3d, 0x32, 0x16, 0xa2, 0x60, 0xa4,
	0xc5, 0xb7, 0x00, 0x30, 0x75, 0xf5, 0x58, 0xe2, 0x5e, 0x8b, 0x86, 0x74, 0x6b, 0x34, 0x61, 0x43,
	0x27, 0xff, 0x29, 0x3a, 0xab, 0x05, 0x47, 0x6a, 0x18, 0xe9, 0x40, 0x9e, 0x71, 0xb7, 0xb4, 0x10,
	0x22, 0xe9, 0x9a, 0x91, 0x00, 0xcb, 0x2d, 0x92, 0xd8, 0x47, 0x17, 0x4c, 0xa1, 0x92, 0x6e, 0xd8,
	0xda, 0x99, 0x01, 0xa4, 0x5d, 0x1a, 0x91, 0xcb, 0xb2, 0xc0, 0x9e, 0xb9, 0x60, 0x88, 0x9b, 0x64,
	0x21, 0x9a, 0x03, 0x1a, 0x17, 0xf4, 0x6e, 0x19, 0x46, 0x19, 0x5b, 0xbc, 0x98, 0x82, 0x2d, 0x95,
	0x75, 0x18, 0x42, 0x4e, 0x3d, 0x55, 0x05, 0xf5, 0x74, 0x4e, 0x0f, 0xbd, 0x74, 0xd5, 0x48, 0x84,
	0x66, 0x4a, 0x4a, 0x59, 0xe4, 0x3c, 0x8c, 0x87, 0x11, 0xa9, 0xe2, 0x21, 0x5a, 0xb6, 0xc6, 0x62,
	0xba, 0x6d, 0xa4, 0xa9, 0xa1, 0xa4, 0xcd, 0x48, 0x01, 0xf1, 0x28, 0x24, 0x80, 0x6f, 0xe6, 0x17,
	0x06, 0xa1, 0x88, 0xd9, 0x64, 0x1d, 0x84, 0x1c, 0x61, 0x1a, 0x84, 0x3c, 0x8f, 0x2a, 0xa8, 0xb2,
	0xb8, 0x47, 0x77, 0x6d, 0xec, 0x6b, 0xc0, 0x62, 0x67, 0x92, 0x1b, 0x2a, 0x0f, 0x68, 0x64, 0x69,
	0xa8, 0x1c, 0x50, 0xd4, 0x74, 0xff, 0x6e, 0x1a, 0x76, 0x15, 0xe9, 0xe6, 0x1d, 0x21, 0x6b, 0xba,
	0xdc, 0xab, 0x90, 0x35, 0x00, 0x8a, 0xfc, 0x6d, 0xa3, 0xb3, 0xda, 0xfd, 0xdd, 0x86, 0x81, 0x06,
	0xcb, 0x93, 0xb6, 0xf5, 0x58, 0x06, 0x49, 0xa5, 0xd6, 0xba, 0xe5, 0x26, 0xae, 0x6b, 0xe1, 0x48,
	0xc2, 0x14, 0x99, 0x7a, 0x84, 0x5e, 0x2a, 0xde, 0xa2, 0xbd, 0x6e, 0xe6, 0x8b, 0x65, 0x4b, 0x1d,
	0x93, 0xe5, 0xb1, 0x0c, 0x9d, 0x9c, 0xb8, 0xa9, 0x6a, 0x26, 0xc7, 0xb2, 0x8b, 0xe4, 0x58, 0x06,
	0x3d, 0x07, 0xb4, 0xdc, 0x7e, 0x35, 0x55, 0x56, 0xc3, 0x48, 0x86, 0x70, 0xf1, 0x54, 0x1e, 0xac,
	0x91, 0xcb, 0xb6, 0x9b, 0xaf, 0xb7, 0x4a, 0x39, 0xa6, 0xa0, 0x11, 0xe4, 0x37, 0xfe, 0xe7, 0x34,
	0xaa, 0xd3, 0xbd, 0xe9, 0x08, 0x3b, 0x1f, 0xc1, 0xe6, 0xae, 0xee, 0x9e, 0x56, 0xd8, 0xdc, 0xd5,
	0x01, 0xe6, 0x29, 0xfe, 0x63, 0xf4, 0x52, 0xd1, 0xa1, 0xed, 0x7a, 0x91, 0x94, 0x94, 0x2d, 0x6d,
	0x2e, 0xd2, 0x3c, 0xe1, 0x67, 0x03, 0x0b, 0xac, 0xf3, 0x05, 0x5f, 0xb3, 0x6b, 0x45, 0x72, 0x79,
	0x6e, 0x29, 0x35, 0xc1, 0x9d, 0xec, 0x2b, 0x66, 0xe0, 0x4e, 0xca, 0x2e, 0xa5, 0xf7, 0x00, 0x39,
	0x06, 0x27, 0xae, 0x15, 0x53, 0x75, 0xf3, 0xfc, 0x62, 0x47, 0x7f, 0xc8, 0xd9, 0x92, 0x9d, 0xb8,
	0x0c, 0x6c, 0x49, 0xd9, 0x46, 0x1b, 0xf6, 0x43, 0xde, 0x92, 0xaa, 0x37, 0x95, 0xa1, 0x25, 0x15,
	0x80, 0x91, 0xd6, 0xfb, 0x82, 0x96, 0xe2, 0x20, 0x65, 0xa2, 0x25, 0x03, 0x8a, 0x1a, 0xeb, 0x9f,
	0x55, 0x11, 0x02, 0x8d, 0x05, 0x94, 0x9d, 0x0f, 0xd1, 0x79, 0xfd, 0x3b, 0x1a, 0x6a, 0x83, 0xea,
	0xb9, 0x92, 0xd5, 0xc1, 0xb3, 0xe8, 0xd7, 0x37, 0x60, 0x25, 0x6a, 0xfe, 0xf8, 0xc6, 0x4d, 0x0b,
	0x41, 0xe3, 0x41, 0x3c, 0xcf, 0x57, 0x0e, 0xe2, 0x23, 0x74, 0xad, 0xf4, 0xd3, 0x1a, 0xeb, 0x96,
	0x12, 0x0a, 0x48, 0xc9, 0x30, 0xe3, 0xb0, 0x02, 0xc6, 0x9d, 0xda, 0xf8, 0x6f, 0xd3, 0x60, 0xc1,
	0x72, 0x4f, 0x65, 0xa7, 0x89, 0x2e, 0xdb, 0xfc, 0xd2, 0x15, 0x05, 0x60, 0x01, 0x49, 0x76, 0xac,
	0x40, 0x48, 0xd9, 0xee, 0x94, 0xd3, 0x45, 0x8d, 0x12, 0x1f, 0xf6, 0xb5, 0x11, 0x65, 0x30, 0x9c,
	0xe4, 0x73, 0xa0, 0x17, 0xc3, 0x10, 0xee, 0x94, 0xf3, 0x1c, 0xad, 0x8c, 0x70, 0x7a, 0x7f, 0xd9,
	0x58, 0x9a, 0x11, 0xdb, 0x58, 0x2f, 0x96, 0xf8, 0x19, 0x03, 0x06, 0x0a, 0xd2, 0x9d, 0x72, 0x5a,
	0x68, 0xd9, 0xea, 0xea, 0x7e, 0xdb, 0x58, 0xa6, 0x86, 0x6a, 0xdc, 0x28, 0xa9, 0x1f, 0x59, 0xda,
	0xd1, 0x4e, 0x68, 0xf4, 0x3d, 0x57, 0x3b, 0xa1, 0x11, 0x22, 0x75, 0x42, 0x91, 0x9f, 0xfb, 0xae,
	0x83, 0x55, 0x6d, 0x73, 0x5d, 0x37, 0x77, 0x02, 0x15, 0x54, 0x1c, 0x8b, 0xff, 0xc2, 0x81, 0xb1,
	0xc8, 0x62, 0xcc, 0x92, 0xf9, 0xda, 0x12, 0xdb, 0x5e, 0x99, 0xc2, 0xcc, 0x18, 0xb3, 0xd7, 0x83,
	0x2d, 0xb0, 0xfd, 0x6d, 0x13, 0x41, 0x1d, 0x65, 0x5c, 0xeb, 0x96, 0x86, 0xb5, 0x5f, 0x37, 0x92,
	0x35, 0x20, 0x8b, 0xa4, 0x7d, 0x74, 0xc5, 0x1e, 0xa2, 0xfe, 0x8e, 0x89, 0x6e, 0x01, 0x26, 0xb5,
	0x5f, 0x31, 0x20, 0x3e, 0x35, 0x27, 0x4b, 0xe2, 0xd6, 0x6b, 0xbe, 0x05, 0x76, 0xa0, 0xf9, 0xa0,
	0xda, 0x18, 0xee, 0xfe, 0xa6, 0x5d, 0x1e, 0x0c, 0x62, 0xb2, 0xfd, 0x97, 0x8c, 0xd1, 0xec, 0x57,
	0xed, 0xb4, 0x6c, 0x47, 0x58, 0x4f, 0x72, 0xbe, 0x94, 0xa0, 0xf6, 0x66, 0xbe, 0x14, 0x88, 0xb4,
	0x6e, 0xd2, 0x9d, 0x49, 0xe9, 0x44, 0x6b, 0x88, 0x88, 0xbf, 0x62, 0x16, 0x20, 0xcf, 0x2f, 0x95,
	0x9b, 0xba, 0x9b, 0x6c, 0xe4, 0x6f, 0xc4, 0x66, 0xb2, 0x34, 0x7a, 0xb4, 0xbd, 0x64, 0xd7, 0x2e,
	0x39, 0x03, 0x39, 0xd6, 0x0c, 0x9f, 0xe6, 0x55, 0x94, 0x62, 0xe2, 0xaf, 0x58, 0x04, 0xc7, 0xf2,
	0x25, 0x3d, 0x2f, 0x42, 0x6c, 0xe7, 0x61, 0xeb, 0x53, 0x95, 0x6c, 0x3a, 0x82, 0x6c, 0x3a, 0x01,
	0x59, 0x49, 0x92, 0x6a, 0x18, 0x7c, 0xa3, 0x24, 0x15, 0x48, 0x51, 0x92, 0x9f, 0x2a, 0xdd, 0x46,
	0x8a, 0x81, 0x6f, 0xeb, 0x36, 0x39, 0xa4, 0x61, 0x8b, 0x8c, 0xaf, 0xf2, 0x98, 0x8e, 0x26, 0xab,
	0x40, 0x8a, 0x3c, 0x7e, 0x95, 0x8f, 0x65, 0x63, 0x7c, 0x7d, 0x33, 0xc9, 0x02, 0xb0, 0xc4, 0x7d,
	0xe5, 0x7d, 0x74, 0xc1, 0x14, 0x1c, 0xff, 0x86, 0xb9, 0x6b, 0x0a, 0x80, 0xa9, 0x27, 0x35, 0x4a,
	0x22, 0xdc, 0xaf, 0xd9, 0x3b, 0xa7, 0x8c, 0x33, 0x79, 0x4a, 0x5d, 0xb1, 0xc6, 0xbf, 0xb7, 0x2a,
	0x4c, 0xcd, 0xad, 0xed, 0x46, 0xa1, 0x5f, 0x69, 0x71, 0xf4, 0x15, 0xee, 0x0d, 0x61, 0xf4, 0xd7,
	0xac, 0x3a, 0x53, 0x75, 0xc7, 0x32, 0x6d, 0xe7, 0x18, 0xc2, 0xe9, 0x9b, 0xa5, 0x2b, 0x01, 0x24,
	0xb5, 0xa4, 0xc7, 0xb0, 0x77, 0xa7, 0x9c, 0xa3, 0xbc, 0x53, 0x98, 0x62, 0xf4, 0xdf, 0x1d, 0x41,
	0x5c, 0x28, 0xf8, 0x9b, 0xd6, 0x42, 0xa4, 0xd9, 0xe4, 0x4b, 0xb4, 0x32, 0x22, 0x72, 0xff, 0xcb,
	0x25, 0xda, 0x5f, 0x2f, 0xb2, 0x20, 0xa0, 0xc3, 0x7c, 0xaa, 0x35, 0xc6, 0xdc, 0x5f, 0xb7, 0xf6,
	0x70, 0x0d, 0x59, 0xd2, 0xc5, 0xa5, 0xa9, 0x46, 0x89, 0xa0, 0x6f, 0x9c, 0x6a, 0x64, 0x44, 0x91,
	0xdd, 0xdf, 0xcf, 0xb5, 0xaf, 0x16, 0x2a, 0xdf, 0xb5, 0x48, 0x5d, 0xc2, 0x48, 0xc7, 0x2f, 0x1c,
	0x20, 0xe5, 0xba, 0x53, 0x1b, 0xff, 0xa4, 0x02, 0x0b, 0x64, 0x1a, 0xa1, 0x6e, 0x1b, 0x9d, 0xd5,
	0x62, 0xe7, 0xab, 0x9b, 0x23, 0x4a, 0x5e, 0xd1, 0xe7, 0x89, 0x8d, 0xca, 0xf7, 0xd1, 0x4b, 0xc5,
	0x40, 0xfa, 0xd7, 0x8d, 0x84, 0x78, 0xb6, 0xb4, 0xc4, 0x26, 0x8f, 0xf4, 0x28, 0x7a, 0xe3, 0xcf,
	0xde, 0x83, 0xa5, 0x02, 0x3f, 0x0d, 0x71, 0x3e, 0x43, 0x4b, 0xc6, 0x90, 0xd8, 0x8a, 0x50, 0x4d,
	0x88, 0x11, 0x8e, 0x07, 0xfb, 0xe8, 0x82, 0x29, 0x7c, 0xf6, 0x0d, 0x1b, 0x59, 0x06, 0x90, 0x46,
	0x8c, 0xc8, 0xe5, 0x9f, 0x30, 0x9d, 0x72, 0x0e, 0x54, 0xa2, 0xdc, 0xa5, 0xc3, 0x4a, 0x94, 0xfb,
	0x72, 0x94, 0xb3, 0xba, 0x8b, 0xce, 0xe9, 0xa1, 0xa3, 0xaf, 0x1a, 0x29, 0xb2, 0xed, 0xcb, 0x72,
	0x6a, 0xbf, 0x94, 0x04, 0x6a, 0x75, 0x97, 0x31, 0x21, 0xc6, 0xf4, 0x6e, 0xf1, 0xd1, 0x25, 0x4b,
	0xb8, 0x64, 0xd7, 0x58, 0x82, 0x82, 0x19, 0xcf, 0xab, 0x25, 0x40, 0x97, 0x6d, 0x61, 0x91, 0x6f,
	0x95, 0x94, 0x31, 0xa1, 0x9b, 0xce, 0x11, 0xba, 0x62, 0x0f, 0x9b, 0x7c, 0xc7, 0x22, 0x2d, 0x15,
	0x26, 0x39, 0xa7, 0x94, 0xdd, 0xb3, 0xa1, 0x26, 0xa0, 0x21, 0xd8, 0xf2, 0x8a, 0xa5, 0x99, 0x59,
	0xbe, 0xf1, 0xc4, 0xde, 0x18, 0x3d, 0x79, 0xd5, 0x42, 0x28, 0x2a, 0x3d, 0xf0, 0xfc, 0x40, 0x61,
	0x8a, 0x07, 0x01, 0x5e, 0x29, 0xa1, 0x15, 0x84, 0xbe, 0xed, 0xac, 0xde, 0x1a, 0x0b, 0xf7, 0xb6,
	0x91, 0x9e, 0x86, 0xb2, 0xed, 0xe2, 0x98, 0x62, 0xcb, 0xde, 0xb0, 0xb4, 0x8d, 0xdd, 0xbb, 0xe9,
	0xb1, 0xd4, 0xa1, 0xb4, 0x10, 0xb3, 0xe6, 0x0e, 0xa5, 0x82, 0x4c, 0x2b, 0xbb, 0x65, 0x6b, 0xb4,
	0xd9, 0xdb, 0x36, 0x6d, 0x20, 0xa3, 0x24, 0x3f, 0x42, 0x39, 0x99, 0x6e, 0xf4, 0x16, 0x23, 0xd0,
	0x5e, 0xb7, 0xd1, 0x84, 0xec, 0xb2, 0x53, 0x66, 0x4d, 0xbf, 0x8a, 0x40, 0xb5, 0x56, 0xfd, 0xca,
	0x11, 0xa3, 0x5d, 0x8a, 0x2c, 0xc1, 0x6c, 0xcd, 0x6a, 0x40, 0xc1, 0xd8, 0x9c, 0x1d, 0x2c, 0x21,
	0x6d, 0xcb, 0x29, 0xda, 0xfd, 0x6f, 0xe4, 0xd1, 0x22, 0xc7, 0xaf, 0x35, 0xd7, 0x5d, 0x42, 0x18,
	0xa9, 0x79, 0x05, 0xad, 0x24, 0x08, 0x96, 0x69, 0xa5, 0x52, 0x9a, 0x1f, 0x4a, 0x3d, 0x5c, 0x8a,
	0x3f, 0x6b, 0xee, 0xe1, 0x39, 0x60, 0x24, 0x7f, 0x5a, 0xc4, 0xd9, 0x5b, 0x63, 0x0c, 0x41, 0x23,
	0x4d, 0xad, 0xf7, 0x88, 0x90, 0xb2, 0xd6, 0xde, 0xc3, 0x11, 0xa6, 0xde, 0xc3, 0xf3, 0x60, 0x92,
	0x6a, 0x94, 0x04, 0x94, 0x5d, 0xb3, 0x0c, 0x70, 0x0d, 0x27, 0x99, 0x6a, 0x4a, 0x18, 0x49, 0xb0,
	0xaf, 0xae, 0xd8, 0x63, 0xc6, 0x9a, 0x75, 0xbb, 0x0e, 0x2b, 0xa1, 0xfe, 0xa9, 0xc4, 0x7d, 0x31,
	0x0c, 0xac, 0x99, 0xfb, 0x02, 0xce, 0xb4, 0xff, 0x70, 0xb5, 0x2c, 0x46, 0xec, 0x5d, 0xdb, 0x64,
	0xa1, 0x01, 0x8b, 0x84, 0x7f, 0x81, 0xae, 0x97, 0x87, 0x80, 0xbd, 0x67, 0xb5, 0x0d, 0x74, 0x68,
	0x91, 0x78, 0x5b, 0x1a, 0xb6, 0x6a, 0xbc, 0x57, 0xd7, 0x3a, 0x91, 0x08, 0x4c, 0x63, 0xcd, 0x70,
	0xe5, 0x0e, 0x47, 0x79, 0x95, 0xf2, 0x19, 0x34, 0x92, 0x84, 0x5e, 0x8c, 0xeb, 0xba, 0x36, 0xba,
	0x2c, 0x38, 0xb9, 0x1a, 0xbf, 0xbc, 0x4c, 0x12, 0x9a, 0x31, 0x24, 0xeb, 0xbd, 0xd1, 0x45, 0x72,
	0x7f, 0xec, 0xf1, 0x4b, 0x3d, 0x90, 0xa4, 0xa9, 0x86, 0x60, 0x75, 0x4b, 0x2d, 0x12, 0xc0, 0x58,
	0x6f, 0x2c, 0x7c, 0x81, 0xae, 0x95, 0x86, 0x68, 0x5d, 0x2f, 0x99, 0x51, 0x15, 0x64, 0xb1, 0xf9,
	0x23, 0x85, 0xf4, 0x08, 0x7f, 0x9e, 0x32, 0xe4, 0x98, 0x56, 0x5b, 0x53, 0xd2, 0x72, 0x5a, 0x98,
	0xd7, 0x5b, 0x36, 0xa5, 0x24, 0x81, 0xa4, 0xbd, 0xa1, 0xbc, 0x94, 0x3c, 0x1b, 0x16, 0xaa, 0x8d,
	0x92, 0xa8, 0xb0, 0x6b, 0xb6, 0x32, 0x54, 0x9c, 0x34, 0xbd, 0x33, 0xde, 0xc1, 0x76, 0xa2, 0x1b,
	0xb7, 0xf6, 0xc8, 0xb1, 0x66, 0xcd, 0xa4, 0xc3, 0x46, 0xf9, 0x21, 0x3e, 0x91, 0x8c, 0x13, 0x3d,
	0xc6, 0xac, 0xd9, 0x38, 0xd1, 0x50, 0x92, 0xc3, 0x86, 0x42, 0xf8, 0x33, 0x89, 0xf7, 0x42, 0x24,
	0x5a, 0x33, 0xef, 0x3a, 0xcc, 0x76, 0xd9, 0xc1, 0x12, 0xad, 0xd6, 0xb5, 0x89, 0x7b, 0x82, 0x1b,
	0xcf, 0x4f, 0xa5, 0x06, 0x2d, 0xc6, 0x8a, 0x35, 0x37, 0x68, 0x01, 0xd7, 0xb8, 0x57, 0x56, 0xca,
	0x0e, 0x85, 0x4b, 0xa7, 0x2a, 0xd7, 0x4a, 0x03, 0xd4, 0x9a, 0x07, 0x85, 0x01, 0x69, 0x3c, 0x6d,
	0x2d, 0x46, 0xa7, 0x35, 0x9b, 0x87, 0x3c, 0xdb, 0xe2, 0x07, 0x7b, 0xc5, 0x1e, 0x40, 0xf6, 0xce,
	0xa8, 0xc5, 0x37, 0xc0, 0x6c, 0x7e, 0x3d, 0x72, 0x37, 0x29, 0x84, 0x85, 0x35, 0x93, 0xd6, 0x61,
	0x36, 0x77, 0x6a, 0x4b, 0x2c, 0xd8, 0x72, 0x03, 0x91, 0x3a, 0x8d, 0x97, 0xae, 0xa5, 0xe4, 0x68,
	0xae, 0x66, 0xdb, 0x46, 0x42, 0x18, 0x99, 0xfb, 0x1c, 0x5d, 0x34, 0x87, 0x79, 0xbd, 0x59, 0xb2,
	0x94, 0xa7, 0x90, 0x11, 0x0b, 0x7a, 0xd9, 0x2c, 0x30, 0x44, 0x63, 0xbd, 0x6b, 0x51, 0xb0, 0x3a,
	0xd0, 0xb4, 0x88, 0x69, 0x94, 0x04, 0x66, 0xb5, 0x6a, 0x3a, 0x15, 0x27, 0x3b, 0x52, 0xb0, 0x0c,
	0xb0, 0x90, 0x2e, 0x98, 0x22, 0xb1, 0xde, 0x28, 0x93, 0x45, 0xd8, 0x96, 0x8f, 0xa4, 0x44, 0x2e,
	0x78, 0x66, 0x91, 0x4c, 0x7a, 0x5a, 0x69, 0x0e, 0xd0, 0x7a, 0xd3, 0xaa, 0x27, 0x38, 0xc4, 0x44,
	0x5a, 0x64, 0x52, 0x9f, 0xbb, 0x42, 0x2c, 0xd7, 0x6b, 0x66, 0x76, 0x69, 0x6e, 0x51, 0x9e, 0x5d,
	0x69, 0xd4, 0x9b, 0xe2, 0xb4, 0xae, 0xdb, 0x98, 0xd4, 0x91, 0x26, 0x95, 0x96, 0xe7, 0x6a, 0xfa,
	0x25, 0x1d, 0xbb, 0x24, 0x03, 0xd2, 0xb4, 0x33, 0x79, 0xad, 0x34, 0xe4, 0xe8, 0xba, 0xd5, 0xea,
	0xd1, 0x90, 0xc6, 0x51, 0x72, 0x24, 0xf5, 0x65, 0x43, 0xf4, 0xce, 0xbb, 0x23, 0xf4, 0x0e, 0x07,
	0x9a, 0xb6, 0x91, 0x34, 0x88, 0x36, 0xc0, 0xe5, 0xc0, 0x5f, 0xab, 0x56, 0x6d, 0x51, 0xb6, 0x14,
	0x92, 0x8d, 0x68, 0x63, 0x8c, 0xcc, 0x7b, 0x56, 0xb2, 0x3a, 0xb4, 0x28, 0xf5, 0xa7, 0x12, 0x71,
	0x63, 0x0c, 0xca, 0x7b, 0x36, 0xc9, 0x14, 0xa0, 0xd2, 0x35, 0x77, 0xb9, 0xf3, 0xa8, 0x20, 0xad,
	0x3e, 0xe9, 0xf8, 0x45, 0x9a, 0xa0, 0xc5, 0xfa, 0x68, 0x56, 0x9a, 0x1c, 0x27, 0xf2, 0x56, 0xd9,
	0xf6, 0x08, 0xdf, 0x85, 0x35, 0x58, 0x69, 0x52, 0xb6, 0xbe, 0x9f, 0x26, 0xe2, 0x47, 0xae, 0x58,
	0x07, 0x2c, 0xe4, 0x17, 0xf9, 0xfc, 0x58, 0x55, 0x28, 0x22, 0x62, 0xa3, 0x5d, 0xa1, 0x08, 0x88,
	0xb1, 0x93, 0x44, 0xaa, 0x0a, 0x28, 0x44, 0x6b, 0xb4, 0xaa, 0x00, 0x1d, 0x69, 0xb2, 0x86, 0x75,
	0x8c, 0x61, 0x65, 0x57, 0x28, 0xd0, 0xbe, 0xb2, 0x2b, 0x94, 0x68, 0xd0, 0x67, 0x8d, 0x92, 0x38,
	0x92, 0xd6, 0xf9, 0x41, 0xc5, 0x49, 0x4e, 0x36, 0x02, 0xa4, 0x22, 0xb4, 0x05, 0x75, 0x31, 0xbe,
	0xe4, 0x9a, 0xb5, 0x55, 0x15, 0x9c, 0xd1, 0xff, 0xa2, 0x34, 0x54, 0xa4, 0xb9, 0x35, 0x0c, 0xc8,
	0xf2, 0x65, 0x8f, 0x29, 0x8c, 0xa4, 0xb5, 0xa1, 0x75, 0xa4, 0x71, 0xd9, 0xa3, 0x61, 0x60, 0xd9,
	0xb0, 0x6c, 0x0d, 0x25, 0x69, 0xdd, 0x70, 0x94, 0x51, 0xa3, 0x17, 0x3e, 0x7d, 0xad, 0x4a, 0x7a,
	0xe8, 0x49, 0x7b, 0x95, 0x34, 0xa4, 0xa4, 0x9d, 0x6d, 0x9f, 0x80, 0xd2, 0x86, 0x9e, 0x1a, 0x91,
	0xd2, 0xa6, 0x77, 0x04, 0xc4, 0x38, 0xf4, 0xb4, 0xdd, 0x13, 0x3d, 0x20, 0xe4, 0xdd, 0xf2, 0x29,
	0x31, 0xa7, 0x6d, 0xb8, 0x34, 0xdc, 0x28, 0x0b, 0xcc, 0x68, 0x93, 0x8a, 0x8a, 0x33, 0x4d, 0xe9,
	0x79, 0xae, 0x3b, 0xe5, 0x0c, 0xd0, 0xea, 0xc8, 0xb8, 0x8b, 0x3f, 0x28, 0x37, 0x20, 0x26, 0x2c,
	0xf1, 0x0b, 0x55, 0x47, 0xcb, 0x31, 0x16, 0xad, 0x3a, 0x5a, 0x02, 0x95, 0x6d, 0x3a, 0xef, 0xab,
	0xdb, 0x86, 0x22, 0x8c, 0xe2, 0x6a, 0x89, 0x56, 0x1d, 0x49, 0xf4, 0x43, 0xf5, 0xf0, 0x8d, 0x47,
	0x58, 0xbc, 0x31, 0x62, 0x45, 0x2e, 0x75, 0x16, 0x96, 0x42, 0x9d, 0xbd, 0xac, 0xd1, 0x16, 0x6f,
	0x97, 0xac, 0x50, 0x04, 0x6a, 0xd4, 0x26, 0x9b, 0x21, 0xc2, 0xe2, 0xbd, 0x32, 0x43, 0x5d, 0x81,
	0x16, 0x89, 0xb7, 0xd4, 0xd5, 0x9a, 0x4a, 0xd8, 0xba, 0x5a, 0x53, 0x89, 0x8e, 0x9c, 0x53, 0xbf,
	0x44, 0x2b, 0x23, 0xc2, 0x33, 0xbe, 0x5c, 0x62, 0x12, 0x68, 0x58, 0x53, 0x1d, 0x6e, 0x8e, 0x8e,
	0xb1, 0xf8, 0x6a, 0x49, 0x09, 0x45, 0xb8, 0xc9, 0x8b, 0x6f, 0xc9, 0x18, 0x55, 0xd1, 0xdc, 0xf3,
	0x24, 0x84, 0x7d, 0xc7, 0xe6, 0x6b, 0x74, 0x6b, 0x9c, 0xc8, 0x89, 0xaf, 0x5b, 0x0d, 0x63, 0xf3,
	0x0b, 0x46, 0x25, 0x86, 0xd5, 0x76, 0x56, 0xe3, 0x21, 0x5a, 0xdb, 0x59, 0x81, 0x49, 0x5e, 0x2a,
	0xb9, 0xe5, 0xe0, 0xab, 0xb3, 0xc9, 0x8e, 0x24, 0x25, 0x39, 0x84, 0xa2, 0x59, 0x4a, 0x12, 0xc2,
	0xe4, 0x78, 0xd1, 0x28, 0x0b, 0x91, 0x68, 0x63, 0x59, 0xc5, 0x95, 0xaf, 0x80, 0xef, 0xaf, 0xa3,
	0xab, 0xad, 0xb8, 0xff, 0x5a, 0x84, 0x0f, 0x87, 0x3d, 0x3f, 0xec, 0xbf, 0x86, 0xa3, 0x4e, 0x18,
	0x61, 0xfe, 0xca, 0xfd, 0xb9, 0x47, 0x07, 0xf0, 0x95, 0xd2, 0x0f, 0xaa, 0x87, 0xb3, 0x90, 0xf2,
	0xd6, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x1f, 0xa2, 0x07, 0x67, 0xb1, 0x00, 0x00,
}
